fn (%input: Tensor[(1, 1, 49, 10), int8], %v0_weight: Tensor[(64, 1, 3, 3), int8], %v0_bias: Tensor[(64), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(64), float32], %v1_conv_0_weight: Tensor[(64, 1, 7, 7), int8], %v1_conv_0_bias: Tensor[(64), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(64), float32], %v1_conv_1_weight: Tensor[(64, 64, 1, 1), int8], %v1_conv_1_bias: Tensor[(64), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(64), float32], %v2_conv_0_weight: Tensor[(64, 1, 3, 3), int8], %v2_conv_0_bias: Tensor[(64), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(64), float32], %v2_conv_1_weight: Tensor[(64, 64, 1, 1), int8], %v2_conv_1_bias: Tensor[(64), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(64), float32], %v3_conv_0_weight: Tensor[(64, 1, 3, 3), int8], %v3_conv_0_bias: Tensor[(64), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(64), float32], %v3_conv_1_weight: Tensor[(64, 64, 1, 1), int8], %v3_conv_1_bias: Tensor[(64), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(64), float32], %v4_conv_0_weight: Tensor[(64, 1, 3, 3), int8], %v4_conv_0_bias: Tensor[(64), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(64), float32], %v4_conv_1_weight: Tensor[(64, 64, 1, 1), int8], %v4_conv_1_bias: Tensor[(64), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(64), float32], %v5_weight: Tensor[(10, 64, 1, 1), int8], %v5_bias: Tensor[(10), int32], %v5_zero_x: Tensor[(1), int8], %v5_zero_y: Tensor[(1), int8], %v5_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), float32], Tensor[(10, 64, 1, 1), float32], Tensor[(64), int32], Tensor[(64, 64, 1, 1), int8], Tensor[(64), int32], Tensor[(64, 1, 3, 3), int8], Tensor[(64), int32], Tensor[(64, 64, 1, 1), int8], Tensor[(64), int32], Tensor[(64, 1, 3, 3), int8], Tensor[(64), int32]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %1 = nn.mcutruncate(%0) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[3, 3, 3, 3], groups=64) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %3 = nn.mcutruncate(%2) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %5 = nn.mcutruncate(%4) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[1, 1, 1, 1], groups=64) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %7 = nn.mcutruncate(%6) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %9 = nn.mcutruncate(%8) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %10 = nn.mcuconv2d(%9, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[1, 1, 1, 1], groups=64) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %11 = nn.mcutruncate(%10) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %13 = nn.mcutruncate(%12) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %14 = nn.mcuconv2d(%13, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[1, 1, 1, 1], groups=64) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %15 = nn.mcutruncate(%14) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %16 = nn.mcuconv2d(%15, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %17 = nn.mcutruncate(%16) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %18 = mcumean(%17, axis=[2, 3], keepdims=True) /* from_string */ /* ty=Tensor[(1, 64, 1, 1), int8] */;
  %19 = nn.mcuconv2d(%18, %v5_weight, %v5_bias, %v5_zero_x, %v5_zero_y, %v5_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %20 = nn.mcutruncate(%19) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %21 = reshape(%20, newshape=[0, 0]) /* from_string */ /* ty=Tensor[(1, 10), int8] */;
  %22 = cast(%21, dtype="float32") /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %23 = nn.log_softmax(%22) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %24 = cast(%19, dtype="float32") /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %25 = greater_equal(%24, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %26 = less_equal(%24, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %27 = ones(shape=[], dtype="float32") /* from_string */ /* ty=float32 */;
  %28 = negative(%27) /* from_string */ /* ty=float32 */;
  %29 = multiply(%28, %label) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %30 = sum(%29, axis=[-1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1), float32] */;
  %31 = exp(%23) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %32 = multiply(%30, %31) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %33 = subtract(%29, %32) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %34 = multiply(%25, %26) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %35 = reshape(%33, newshape=[1, 10, 1, 1]) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %36 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %37 = where(%34, %35, %36) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %38 = reshape(%v5_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %39 = multiply(%37, %38) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %40 = cast(%18, dtype="float32") /* from_string */ /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %41 = tile(%39, reps=[1, 64, 1, 1]) /* from_string */ /* ty=Tensor[(1, 640, 1, 1), float32] */;
  %42 = reshape(%40, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %43 = reshape(%41, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(640, 1, 1, 1), float32] */;
  %44 = nn.conv2d(%42, %43, padding=[0, 0, 0, 0], groups=64) /* from_string */ /* ty=Tensor[(1, 640, 1, 1), float32] */;
  %45 = reshape(%44, newshape=[1, 64, 10, 1, 1]) /* from_string */ /* ty=Tensor[(1, 64, 10, 1, 1), float32] */;
  %46 = sum(%45, axis=[0]) /* from_string */ /* ty=Tensor[(64, 10, 1, 1), float32] */;
  %47 = greater_equal(%16, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %48 = less_equal(%16, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %49 = cast(%v5_weight, dtype="float32") /* from_string */ /* ty=Tensor[(10, 64, 1, 1), float32] */;
  %50 = nn.conv2d_transpose(%39, %49, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %51 = multiply(%50, 0.008f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %52 = ones(shape=[1, 64, 25, 5], dtype="float32") /* from_string */ /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %53 = multiply(%47, %48) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %54 = multiply(%51, %52) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %55 = zeros(shape=[1, 64, 25, 5], dtype="float32") /* from_string */ /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %56 = where(%53, %54, %55) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %57 = cast(%56, dtype="int32") /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %58 = reshape(%15, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %59 = tile(%56, reps=[1, 64, 1, 1]) /* from_string */ /* ty=Tensor[(1, 4096, 25, 5), float32] */;
  %60 = cast(%58, dtype="float32") /* from_string */ /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %61 = reshape(%59, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(4096, 1, 25, 5), float32] */;
  %62 = nn.conv2d(%60, %61, padding=[0, 0, 0, 0], groups=64, out_dtype="float32") /* from_string */ /* ty=Tensor[(1, 4096, 1, 1), float32] */;
  %63 = reshape(%62, newshape=[1, 64, 64, 1, 1]) /* from_string */ /* ty=Tensor[(1, 64, 64, 1, 1), float32] */;
  %64 = sum(%63, axis=[0]) /* from_string */ /* ty=Tensor[(64, 64, 1, 1), float32] */;
  %65 = transpose(%64, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(64, 64, 1, 1), float32] */;
  %66 = abs(%65) /* from_string */ /* ty=Tensor[(64, 64, 1, 1), float32] */;
  %67 = max(%66, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(64, 1, 1, 1), float32] */;
  %68 = divide(%67, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(64, 1, 1, 1), float32] */;
  %69 = divide(%65, %68) /* from_string */ /* ty=Tensor[(64, 64, 1, 1), float32] */;
  %70 = greater_equal(%14, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %71 = less_equal(%14, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %72 = cast(%v4_conv_1_weight, dtype="float32") /* from_string */ /* ty=Tensor[(64, 64, 1, 1), float32] */;
  %73 = nn.conv2d_transpose(%56, %72, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* from_string */ /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %74 = abs(%73) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %75 = max(%74, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 25, 5), float32] */;
  %76 = divide(%75, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 1, 25, 5), float32] */;
  %77 = divide(%73, %76) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %78 = multiply(%70, %71) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %79 = cast(%77, dtype="int8") /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %80 = zeros(shape=[1, 64, 25, 5], dtype="int8") /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %81 = where(%78, %79, %80) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %82 = cast(%81, dtype="int32") /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %83 = tile(%81, reps=[1, 1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %84 = reshape(%13, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %85 = reshape(%83, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(64, 1, 25, 5), int8] */;
  %86 = nn.conv2d(%84, %85, padding=[1, 1, 1, 1], groups=64, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 64, 3, 3), int32] */;
  %87 = reshape(%86, newshape=[1, 1, 64, 3, 3]) /* from_string */ /* ty=Tensor[(1, 1, 64, 3, 3), int32] */;
  %88 = sum(%87, axis=[0]) /* from_string */ /* ty=Tensor[(1, 64, 3, 3), int32] */;
  %89 = transpose(%88, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(64, 1, 3, 3), int32] */;
  %90 = abs(%89) /* from_string */ /* ty=Tensor[(64, 1, 3, 3), int32] */;
  %91 = max(%90, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(64, 1, 3, 3), int32] */;
  %92 = divide(%91, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(64, 1, 3, 3), int32] */;
  %93 = divide(%89, %92) /* from_string */ /* ty=Tensor[(64, 1, 3, 3), int32] */;
  %94 = greater_equal(%12, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %95 = less_equal(%12, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %96 = nn.conv2d_transpose(%81, %v4_conv_0_weight, channels=64, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=64, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %97 = abs(%96) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %98 = max(%97, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 25, 5), int32] */;
  %99 = divide(%98, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 25, 5), int32] */;
  %100 = divide(%96, %99) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %101 = multiply(%94, %95) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %102 = cast(%100, dtype="int8") /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %103 = zeros(shape=[1, 64, 25, 5], dtype="int8") /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %104 = where(%101, %102, %103) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %105 = cast(%104, dtype="int32") /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %106 = tile(%104, reps=[1, 64, 1, 1]) /* from_string */ /* ty=Tensor[(1, 4096, 25, 5), int8] */;
  %107 = reshape(%11, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %108 = reshape(%106, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(4096, 1, 25, 5), int8] */;
  %109 = nn.conv2d(%107, %108, padding=[0, 0, 0, 0], groups=64, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 4096, 1, 1), int32] */;
  %110 = reshape(%109, newshape=[1, 64, 64, 1, 1]) /* from_string */ /* ty=Tensor[(1, 64, 64, 1, 1), int32] */;
  %111 = sum(%110, axis=[0]) /* from_string */ /* ty=Tensor[(64, 64, 1, 1), int32] */;
  %112 = transpose(%111, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(64, 64, 1, 1), int32] */;
  %113 = abs(%112) /* from_string */ /* ty=Tensor[(64, 64, 1, 1), int32] */;
  %114 = max(%113, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(64, 1, 1, 1), int32] */;
  %115 = divide(%114, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(64, 1, 1, 1), int32] */;
  %116 = divide(%112, %115) /* from_string */ /* ty=Tensor[(64, 64, 1, 1), int32] */;
  %117 = greater_equal(%10, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %118 = less_equal(%10, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %119 = nn.conv2d_transpose(%104, %v3_conv_1_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %120 = abs(%119) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %121 = max(%120, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 25, 5), int32] */;
  %122 = divide(%121, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 25, 5), int32] */;
  %123 = divide(%119, %122) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %124 = multiply(%117, %118) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %125 = cast(%123, dtype="int8") /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %126 = zeros(shape=[1, 64, 25, 5], dtype="int8") /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %127 = where(%124, %125, %126) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %128 = cast(%127, dtype="int32") /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %129 = tile(%127, reps=[1, 1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %130 = reshape(%9, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %131 = reshape(%129, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(64, 1, 25, 5), int8] */;
  %132 = nn.conv2d(%130, %131, padding=[1, 1, 1, 1], groups=64, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 64, 3, 3), int32] */;
  %133 = reshape(%132, newshape=[1, 1, 64, 3, 3]) /* from_string */ /* ty=Tensor[(1, 1, 64, 3, 3), int32] */;
  %134 = sum(%133, axis=[0]) /* from_string */ /* ty=Tensor[(1, 64, 3, 3), int32] */;
  %135 = transpose(%134, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(64, 1, 3, 3), int32] */;
  %136 = abs(%135) /* from_string */ /* ty=Tensor[(64, 1, 3, 3), int32] */;
  %137 = max(%136, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(64, 1, 3, 3), int32] */;
  %138 = divide(%137, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(64, 1, 3, 3), int32] */;
  %139 = divide(%135, %138) /* from_string */ /* ty=Tensor[(64, 1, 3, 3), int32] */;
  %140 = greater_equal(%8, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %141 = less_equal(%8, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %142 = nn.conv2d_transpose(%127, %v3_conv_0_weight, channels=64, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=64, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %143 = abs(%142) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %144 = max(%143, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 25, 5), int32] */;
  %145 = divide(%144, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 25, 5), int32] */;
  %146 = divide(%142, %145) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %147 = multiply(%140, %141) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %148 = cast(%146, dtype="int8") /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %149 = zeros(shape=[1, 64, 25, 5], dtype="int8") /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %150 = where(%147, %148, %149) /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %151 = cast(%150, dtype="int32") /* from_string */ /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %152 = nn.cross_entropy_with_logits(%23, %label) /* from_string */ /* ty=float32 */;
  %153 = sum(%39, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(10), float32] */;
  %154 = transpose(%46, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(10, 64, 1, 1), float32] */;
  %155 = sum(%57, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(64), int32] */;
  %156 = cast(%69, dtype="int8") /* from_string */ /* ty=Tensor[(64, 64, 1, 1), int8] */;
  %157 = sum(%82, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(64), int32] */;
  %158 = cast(%93, dtype="int8") /* from_string */ /* ty=Tensor[(64, 1, 3, 3), int8] */;
  %159 = sum(%105, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(64), int32] */;
  %160 = cast(%116, dtype="int8") /* from_string */ /* ty=Tensor[(64, 64, 1, 1), int8] */;
  %161 = sum(%128, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(64), int32] */;
  %162 = cast(%139, dtype="int8") /* from_string */ /* ty=Tensor[(64, 1, 3, 3), int8] */;
  %163 = sum(%151, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(64), int32] */;
  (%152, %153, %154, %155, %156, %157, %158, %159, %160, %161, %162, %163)
}