fn (%input: Tensor[(1, 3, 128, 128), int8], %v0_weight: Tensor[(16, 3, 3, 3), int8], %v0_bias: Tensor[(16), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(16), float32], %v1_conv_0_weight: Tensor[(16, 1, 3, 3), int8], %v1_conv_0_bias: Tensor[(16), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(16), float32], %v1_conv_1_weight: Tensor[(8, 16, 1, 1), int8], %v1_conv_1_bias: Tensor[(8), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(8), float32], %v2_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v2_conv_0_bias: Tensor[(48), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(48), float32], %v2_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v2_conv_1_bias: Tensor[(48), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(48), float32], %v2_conv_2_weight: Tensor[(8, 48, 1, 1), int8], %v2_conv_2_bias: Tensor[(8), int32], %v2_conv_2_zero_x: Tensor[(1), int8], %v2_conv_2_zero_y: Tensor[(1), int8], %v2_conv_2_scale: Tensor[(8), float32], %v3_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v3_conv_0_bias: Tensor[(48), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(48), float32], %v3_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v3_conv_1_bias: Tensor[(48), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(48), float32], %v3_conv_2_weight: Tensor[(8, 48, 1, 1), int8], %v3_conv_2_bias: Tensor[(8), int32], %v3_conv_2_zero_x: Tensor[(1), int8], %v3_conv_2_zero_y: Tensor[(1), int8], %v3_conv_2_scale: Tensor[(8), float32], %v3_qadd_zero_x1: Tensor[(1), int8], %v3_qadd_zero_x2: Tensor[(1), int8], %v3_qadd_scale_x1: Tensor[(1), float32], %v3_qadd_scale_x2: Tensor[(1), float32], %v3_qadd_zero_y: Tensor[(1), int8], %v3_qadd_scale_y: Tensor[(1), float32], %v4_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v4_conv_0_bias: Tensor[(48), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(48), float32], %v4_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v4_conv_1_bias: Tensor[(48), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(48), float32], %v4_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v4_conv_2_bias: Tensor[(16), int32], %v4_conv_2_zero_x: Tensor[(1), int8], %v4_conv_2_zero_y: Tensor[(1), int8], %v4_conv_2_scale: Tensor[(16), float32], %v5_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v5_conv_0_bias: Tensor[(96), int32], %v5_conv_0_zero_x: Tensor[(1), int8], %v5_conv_0_zero_y: Tensor[(1), int8], %v5_conv_0_scale: Tensor[(96), float32], %v5_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v5_conv_1_bias: Tensor[(96), int32], %v5_conv_1_zero_x: Tensor[(1), int8], %v5_conv_1_zero_y: Tensor[(1), int8], %v5_conv_1_scale: Tensor[(96), float32], %v5_conv_2_weight: Tensor[(16, 96, 1, 1), int8], %v5_conv_2_bias: Tensor[(16), int32], %v5_conv_2_zero_x: Tensor[(1), int8], %v5_conv_2_zero_y: Tensor[(1), int8], %v5_conv_2_scale: Tensor[(16), float32], %v5_qadd_zero_x1: Tensor[(1), int8], %v5_qadd_zero_x2: Tensor[(1), int8], %v5_qadd_scale_x1: Tensor[(1), float32], %v5_qadd_scale_x2: Tensor[(1), float32], %v5_qadd_zero_y: Tensor[(1), int8], %v5_qadd_scale_y: Tensor[(1), float32], %v6_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v6_conv_0_bias: Tensor[(96), int32], %v6_conv_0_zero_x: Tensor[(1), int8], %v6_conv_0_zero_y: Tensor[(1), int8], %v6_conv_0_scale: Tensor[(96), float32], %v6_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v6_conv_1_bias: Tensor[(96), int32], %v6_conv_1_zero_x: Tensor[(1), int8], %v6_conv_1_zero_y: Tensor[(1), int8], %v6_conv_1_scale: Tensor[(96), float32], %v6_conv_2_weight: Tensor[(16, 96, 1, 1), int8], %v6_conv_2_bias: Tensor[(16), int32], %v6_conv_2_zero_x: Tensor[(1), int8], %v6_conv_2_zero_y: Tensor[(1), int8], %v6_conv_2_scale: Tensor[(16), float32], %v6_qadd_zero_x1: Tensor[(1), int8], %v6_qadd_zero_x2: Tensor[(1), int8], %v6_qadd_scale_x1: Tensor[(1), float32], %v6_qadd_scale_x2: Tensor[(1), float32], %v6_qadd_zero_y: Tensor[(1), int8], %v6_qadd_scale_y: Tensor[(1), float32], %v7_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v7_conv_0_bias: Tensor[(96), int32], %v7_conv_0_zero_x: Tensor[(1), int8], %v7_conv_0_zero_y: Tensor[(1), int8], %v7_conv_0_scale: Tensor[(96), float32], %v7_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v7_conv_1_bias: Tensor[(96), int32], %v7_conv_1_zero_x: Tensor[(1), int8], %v7_conv_1_zero_y: Tensor[(1), int8], %v7_conv_1_scale: Tensor[(96), float32], %v7_conv_2_weight: Tensor[(24, 96, 1, 1), int8], %v7_conv_2_bias: Tensor[(24), int32], %v7_conv_2_zero_x: Tensor[(1), int8], %v7_conv_2_zero_y: Tensor[(1), int8], %v7_conv_2_scale: Tensor[(24), float32], %v8_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v8_conv_0_bias: Tensor[(144), int32], %v8_conv_0_zero_x: Tensor[(1), int8], %v8_conv_0_zero_y: Tensor[(1), int8], %v8_conv_0_scale: Tensor[(144), float32], %v8_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v8_conv_1_bias: Tensor[(144), int32], %v8_conv_1_zero_x: Tensor[(1), int8], %v8_conv_1_zero_y: Tensor[(1), int8], %v8_conv_1_scale: Tensor[(144), float32], %v8_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v8_conv_2_bias: Tensor[(24), int32], %v8_conv_2_zero_x: Tensor[(1), int8], %v8_conv_2_zero_y: Tensor[(1), int8], %v8_conv_2_scale: Tensor[(24), float32], %v8_qadd_zero_x1: Tensor[(1), int8], %v8_qadd_zero_x2: Tensor[(1), int8], %v8_qadd_scale_x1: Tensor[(1), float32], %v8_qadd_scale_x2: Tensor[(1), float32], %v8_qadd_zero_y: Tensor[(1), int8], %v8_qadd_scale_y: Tensor[(1), float32], %v9_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v9_conv_0_bias: Tensor[(144), int32], %v9_conv_0_zero_x: Tensor[(1), int8], %v9_conv_0_zero_y: Tensor[(1), int8], %v9_conv_0_scale: Tensor[(144), float32], %v9_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v9_conv_1_bias: Tensor[(144), int32], %v9_conv_1_zero_x: Tensor[(1), int8], %v9_conv_1_zero_y: Tensor[(1), int8], %v9_conv_1_scale: Tensor[(144), float32], %v9_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v9_conv_2_bias: Tensor[(24), int32], %v9_conv_2_zero_x: Tensor[(1), int8], %v9_conv_2_zero_y: Tensor[(1), int8], %v9_conv_2_scale: Tensor[(24), float32], %v9_qadd_zero_x1: Tensor[(1), int8], %v9_qadd_zero_x2: Tensor[(1), int8], %v9_qadd_scale_x1: Tensor[(1), float32], %v9_qadd_scale_x2: Tensor[(1), float32], %v9_qadd_zero_y: Tensor[(1), int8], %v9_qadd_scale_y: Tensor[(1), float32], %v10_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v10_conv_0_bias: Tensor[(144), int32], %v10_conv_0_zero_x: Tensor[(1), int8], %v10_conv_0_zero_y: Tensor[(1), int8], %v10_conv_0_scale: Tensor[(144), float32], %v10_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v10_conv_1_bias: Tensor[(144), int32], %v10_conv_1_zero_x: Tensor[(1), int8], %v10_conv_1_zero_y: Tensor[(1), int8], %v10_conv_1_scale: Tensor[(144), float32], %v10_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v10_conv_2_bias: Tensor[(24), int32], %v10_conv_2_zero_x: Tensor[(1), int8], %v10_conv_2_zero_y: Tensor[(1), int8], %v10_conv_2_scale: Tensor[(24), float32], %v10_qadd_zero_x1: Tensor[(1), int8], %v10_qadd_zero_x2: Tensor[(1), int8], %v10_qadd_scale_x1: Tensor[(1), float32], %v10_qadd_scale_x2: Tensor[(1), float32], %v10_qadd_zero_y: Tensor[(1), int8], %v10_qadd_scale_y: Tensor[(1), float32], %v11_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v11_conv_0_bias: Tensor[(144), int32], %v11_conv_0_zero_x: Tensor[(1), int8], %v11_conv_0_zero_y: Tensor[(1), int8], %v11_conv_0_scale: Tensor[(144), float32], %v11_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v11_conv_1_bias: Tensor[(144), int32], %v11_conv_1_zero_x: Tensor[(1), int8], %v11_conv_1_zero_y: Tensor[(1), int8], %v11_conv_1_scale: Tensor[(144), float32], %v11_conv_2_weight: Tensor[(32, 144, 1, 1), int8], %v11_conv_2_bias: Tensor[(32), int32], %v11_conv_2_zero_x: Tensor[(1), int8], %v11_conv_2_zero_y: Tensor[(1), int8], %v11_conv_2_scale: Tensor[(32), float32], %v12_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v12_conv_0_bias: Tensor[(192), int32], %v12_conv_0_zero_x: Tensor[(1), int8], %v12_conv_0_zero_y: Tensor[(1), int8], %v12_conv_0_scale: Tensor[(192), float32], %v12_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v12_conv_1_bias: Tensor[(192), int32], %v12_conv_1_zero_x: Tensor[(1), int8], %v12_conv_1_zero_y: Tensor[(1), int8], %v12_conv_1_scale: Tensor[(192), float32], %v12_conv_2_weight: Tensor[(32, 192, 1, 1), int8], %v12_conv_2_bias: Tensor[(32), int32], %v12_conv_2_zero_x: Tensor[(1), int8], %v12_conv_2_zero_y: Tensor[(1), int8], %v12_conv_2_scale: Tensor[(32), float32], %v12_qadd_zero_x1: Tensor[(1), int8], %v12_qadd_zero_x2: Tensor[(1), int8], %v12_qadd_scale_x1: Tensor[(1), float32], %v12_qadd_scale_x2: Tensor[(1), float32], %v12_qadd_zero_y: Tensor[(1), int8], %v12_qadd_scale_y: Tensor[(1), float32], %v13_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v13_conv_0_bias: Tensor[(192), int32], %v13_conv_0_zero_x: Tensor[(1), int8], %v13_conv_0_zero_y: Tensor[(1), int8], %v13_conv_0_scale: Tensor[(192), float32], %v13_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v13_conv_1_bias: Tensor[(192), int32], %v13_conv_1_zero_x: Tensor[(1), int8], %v13_conv_1_zero_y: Tensor[(1), int8], %v13_conv_1_scale: Tensor[(192), float32], %v13_conv_2_weight: Tensor[(32, 192, 1, 1), int8], %v13_conv_2_bias: Tensor[(32), int32], %v13_conv_2_zero_x: Tensor[(1), int8], %v13_conv_2_zero_y: Tensor[(1), int8], %v13_conv_2_scale: Tensor[(32), float32], %v13_qadd_zero_x1: Tensor[(1), int8], %v13_qadd_zero_x2: Tensor[(1), int8], %v13_qadd_scale_x1: Tensor[(1), float32], %v13_qadd_scale_x2: Tensor[(1), float32], %v13_qadd_zero_y: Tensor[(1), int8], %v13_qadd_scale_y: Tensor[(1), float32], %v14_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v14_conv_0_bias: Tensor[(192), int32], %v14_conv_0_zero_x: Tensor[(1), int8], %v14_conv_0_zero_y: Tensor[(1), int8], %v14_conv_0_scale: Tensor[(192), float32], %v14_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v14_conv_1_bias: Tensor[(192), int32], %v14_conv_1_zero_x: Tensor[(1), int8], %v14_conv_1_zero_y: Tensor[(1), int8], %v14_conv_1_scale: Tensor[(192), float32], %v14_conv_2_weight: Tensor[(56, 192, 1, 1), int8], %v14_conv_2_bias: Tensor[(56), int32], %v14_conv_2_zero_x: Tensor[(1), int8], %v14_conv_2_zero_y: Tensor[(1), int8], %v14_conv_2_scale: Tensor[(56), float32], %v15_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v15_conv_0_bias: Tensor[(336), int32], %v15_conv_0_zero_x: Tensor[(1), int8], %v15_conv_0_zero_y: Tensor[(1), int8], %v15_conv_0_scale: Tensor[(336), float32], %v15_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v15_conv_1_bias: Tensor[(336), int32], %v15_conv_1_zero_x: Tensor[(1), int8], %v15_conv_1_zero_y: Tensor[(1), int8], %v15_conv_1_scale: Tensor[(336), float32], %v15_conv_2_weight: Tensor[(56, 336, 1, 1), int8], %v15_conv_2_bias: Tensor[(56), int32], %v15_conv_2_zero_x: Tensor[(1), int8], %v15_conv_2_zero_y: Tensor[(1), int8], %v15_conv_2_scale: Tensor[(56), float32], %v15_qadd_zero_x1: Tensor[(1), int8], %v15_qadd_zero_x2: Tensor[(1), int8], %v15_qadd_scale_x1: Tensor[(1), float32], %v15_qadd_scale_x2: Tensor[(1), float32], %v15_qadd_zero_y: Tensor[(1), int8], %v15_qadd_scale_y: Tensor[(1), float32], %v16_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v16_conv_0_bias: Tensor[(336), int32], %v16_conv_0_zero_x: Tensor[(1), int8], %v16_conv_0_zero_y: Tensor[(1), int8], %v16_conv_0_scale: Tensor[(336), float32], %v16_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v16_conv_1_bias: Tensor[(336), int32], %v16_conv_1_zero_x: Tensor[(1), int8], %v16_conv_1_zero_y: Tensor[(1), int8], %v16_conv_1_scale: Tensor[(336), float32], %v16_conv_2_weight: Tensor[(56, 336, 1, 1), int8], %v16_conv_2_bias: Tensor[(56), int32], %v16_conv_2_zero_x: Tensor[(1), int8], %v16_conv_2_zero_y: Tensor[(1), int8], %v16_conv_2_scale: Tensor[(56), float32], %v16_qadd_zero_x1: Tensor[(1), int8], %v16_qadd_zero_x2: Tensor[(1), int8], %v16_qadd_scale_x1: Tensor[(1), float32], %v16_qadd_scale_x2: Tensor[(1), float32], %v16_qadd_zero_y: Tensor[(1), int8], %v16_qadd_scale_y: Tensor[(1), float32], %v17_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v17_conv_0_bias: Tensor[(336), int32], %v17_conv_0_zero_x: Tensor[(1), int8], %v17_conv_0_zero_y: Tensor[(1), int8], %v17_conv_0_scale: Tensor[(336), float32], %v17_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v17_conv_1_bias: Tensor[(336), int32], %v17_conv_1_zero_x: Tensor[(1), int8], %v17_conv_1_zero_y: Tensor[(1), int8], %v17_conv_1_scale: Tensor[(336), float32], %v17_conv_2_weight: Tensor[(112, 336, 1, 1), int8], %v17_conv_2_bias: Tensor[(112), int32], %v17_conv_2_zero_x: Tensor[(1), int8], %v17_conv_2_zero_y: Tensor[(1), int8], %v17_conv_2_scale: Tensor[(112), float32], %v18_weight: Tensor[(10, 112, 1, 1), int8], %v18_bias: Tensor[(10), int32], %v18_zero_x: Tensor[(1), int8], %v18_zero_y: Tensor[(1), int8], %v18_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), float32], Tensor[(10, 112, 1, 1), float32], Tensor[(112), float32], Tensor[(336), float32], Tensor[(42, 1, 3, 3), float32], Tensor[(336), float32], Tensor[(336, 7, 1, 1), float32], Tensor[(56), int32], Tensor[(336), int32], Tensor[(336), float32], Tensor[(336, 7, 1, 1), float32], Tensor[(56), int32], Tensor[(336), int32], Tensor[(336), float32], Tensor[(336, 7, 1, 1), float32], Tensor[(56), float32], Tensor[(56, 48, 1, 1), float32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 32, 1, 1), int8], Tensor[(32), int32]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1 = nn.mcutruncate(%0) /* from_string */ /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[1, 1, 1, 1], groups=16) /* from_string */ /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %3 = nn.mcutruncate(%2) /* from_string */ /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %5 = nn.mcutruncate(%4) /* from_string */ /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 64, 64), int32] */;
  %7 = nn.mcutruncate(%6) /* from_string */ /* ty=Tensor[(1, 48, 64, 64), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=48) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %9 = nn.mcutruncate(%8) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %10 = nn.mcuconv2d(%9, %v2_conv_2_weight, %v2_conv_2_bias, %v2_conv_2_zero_x, %v2_conv_2_zero_y, %v2_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %11 = nn.mcutruncate(%10) /* from_string */ /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %13 = nn.mcutruncate(%12) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %14 = nn.mcuconv2d(%13, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %15 = nn.mcutruncate(%14) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %16 = nn.mcuconv2d(%15, %v3_conv_2_weight, %v3_conv_2_bias, %v3_conv_2_zero_x, %v3_conv_2_zero_y, %v3_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %17 = nn.mcutruncate(%16) /* from_string */ /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %18 = nn.mcuadd(%11, %17, %v3_qadd_zero_x1, %v3_qadd_zero_x2, %v3_qadd_scale_x1, %v3_qadd_scale_x2, %v3_qadd_zero_y, %v3_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %19 = nn.mcutruncate(%18) /* from_string */ /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %20 = nn.mcuconv2d(%19, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %21 = nn.mcutruncate(%20) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %22 = nn.mcuconv2d(%21, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=48) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %23 = nn.mcutruncate(%22) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %24 = nn.mcuconv2d(%23, %v4_conv_2_weight, %v4_conv_2_bias, %v4_conv_2_zero_x, %v4_conv_2_zero_y, %v4_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %25 = nn.mcutruncate(%24) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %26 = nn.mcuconv2d(%25, %v5_conv_0_weight, %v5_conv_0_bias, %v5_conv_0_zero_x, %v5_conv_0_zero_y, %v5_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %27 = nn.mcutruncate(%26) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %28 = nn.mcuconv2d(%27, %v5_conv_1_weight, %v5_conv_1_bias, %v5_conv_1_zero_x, %v5_conv_1_zero_y, %v5_conv_1_scale, padding=[1, 1, 1, 1], groups=96) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %29 = nn.mcutruncate(%28) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %30 = nn.mcuconv2d(%29, %v5_conv_2_weight, %v5_conv_2_bias, %v5_conv_2_zero_x, %v5_conv_2_zero_y, %v5_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %31 = nn.mcutruncate(%30) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %32 = nn.mcuadd(%25, %31, %v5_qadd_zero_x1, %v5_qadd_zero_x2, %v5_qadd_scale_x1, %v5_qadd_scale_x2, %v5_qadd_zero_y, %v5_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %33 = nn.mcutruncate(%32) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %34 = nn.mcuconv2d(%33, %v6_conv_0_weight, %v6_conv_0_bias, %v6_conv_0_zero_x, %v6_conv_0_zero_y, %v6_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %35 = nn.mcutruncate(%34) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %36 = nn.mcuconv2d(%35, %v6_conv_1_weight, %v6_conv_1_bias, %v6_conv_1_zero_x, %v6_conv_1_zero_y, %v6_conv_1_scale, padding=[1, 1, 1, 1], groups=96) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %37 = nn.mcutruncate(%36) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %38 = nn.mcuconv2d(%37, %v6_conv_2_weight, %v6_conv_2_bias, %v6_conv_2_zero_x, %v6_conv_2_zero_y, %v6_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %39 = nn.mcutruncate(%38) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %40 = nn.mcuadd(%33, %39, %v6_qadd_zero_x1, %v6_qadd_zero_x2, %v6_qadd_scale_x1, %v6_qadd_scale_x2, %v6_qadd_zero_y, %v6_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %41 = nn.mcutruncate(%40) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %42 = nn.mcuconv2d(%41, %v7_conv_0_weight, %v7_conv_0_bias, %v7_conv_0_zero_x, %v7_conv_0_zero_y, %v7_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %43 = nn.mcutruncate(%42) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %44 = nn.mcuconv2d(%43, %v7_conv_1_weight, %v7_conv_1_bias, %v7_conv_1_zero_x, %v7_conv_1_zero_y, %v7_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=96) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %45 = nn.mcutruncate(%44) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %46 = nn.mcuconv2d(%45, %v7_conv_2_weight, %v7_conv_2_bias, %v7_conv_2_zero_x, %v7_conv_2_zero_y, %v7_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %47 = nn.mcutruncate(%46) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %48 = nn.mcuconv2d(%47, %v8_conv_0_weight, %v8_conv_0_bias, %v8_conv_0_zero_x, %v8_conv_0_zero_y, %v8_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %49 = nn.mcutruncate(%48) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %50 = nn.mcuconv2d(%49, %v8_conv_1_weight, %v8_conv_1_bias, %v8_conv_1_zero_x, %v8_conv_1_zero_y, %v8_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %51 = nn.mcutruncate(%50) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %52 = nn.mcuconv2d(%51, %v8_conv_2_weight, %v8_conv_2_bias, %v8_conv_2_zero_x, %v8_conv_2_zero_y, %v8_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %53 = nn.mcutruncate(%52) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %54 = nn.mcuadd(%47, %53, %v8_qadd_zero_x1, %v8_qadd_zero_x2, %v8_qadd_scale_x1, %v8_qadd_scale_x2, %v8_qadd_zero_y, %v8_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %55 = nn.mcutruncate(%54) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %56 = nn.mcuconv2d(%55, %v9_conv_0_weight, %v9_conv_0_bias, %v9_conv_0_zero_x, %v9_conv_0_zero_y, %v9_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %57 = nn.mcutruncate(%56) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %58 = nn.mcuconv2d(%57, %v9_conv_1_weight, %v9_conv_1_bias, %v9_conv_1_zero_x, %v9_conv_1_zero_y, %v9_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %59 = nn.mcutruncate(%58) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %60 = nn.mcuconv2d(%59, %v9_conv_2_weight, %v9_conv_2_bias, %v9_conv_2_zero_x, %v9_conv_2_zero_y, %v9_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %61 = nn.mcutruncate(%60) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %62 = nn.mcuadd(%55, %61, %v9_qadd_zero_x1, %v9_qadd_zero_x2, %v9_qadd_scale_x1, %v9_qadd_scale_x2, %v9_qadd_zero_y, %v9_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %63 = nn.mcutruncate(%62) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %64 = nn.mcuconv2d(%63, %v10_conv_0_weight, %v10_conv_0_bias, %v10_conv_0_zero_x, %v10_conv_0_zero_y, %v10_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %65 = nn.mcutruncate(%64) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %66 = nn.mcuconv2d(%65, %v10_conv_1_weight, %v10_conv_1_bias, %v10_conv_1_zero_x, %v10_conv_1_zero_y, %v10_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %67 = nn.mcutruncate(%66) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %68 = nn.mcuconv2d(%67, %v10_conv_2_weight, %v10_conv_2_bias, %v10_conv_2_zero_x, %v10_conv_2_zero_y, %v10_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %69 = nn.mcutruncate(%68) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %70 = nn.mcuadd(%63, %69, %v10_qadd_zero_x1, %v10_qadd_zero_x2, %v10_qadd_scale_x1, %v10_qadd_scale_x2, %v10_qadd_zero_y, %v10_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %71 = nn.mcutruncate(%70) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %72 = nn.mcuconv2d(%71, %v11_conv_0_weight, %v11_conv_0_bias, %v11_conv_0_zero_x, %v11_conv_0_zero_y, %v11_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %73 = nn.mcutruncate(%72) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %74 = nn.mcuconv2d(%73, %v11_conv_1_weight, %v11_conv_1_bias, %v11_conv_1_zero_x, %v11_conv_1_zero_y, %v11_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %75 = nn.mcutruncate(%74) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %76 = nn.mcuconv2d(%75, %v11_conv_2_weight, %v11_conv_2_bias, %v11_conv_2_zero_x, %v11_conv_2_zero_y, %v11_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %77 = nn.mcutruncate(%76) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %78 = nn.mcuconv2d(%77, %v12_conv_0_weight, %v12_conv_0_bias, %v12_conv_0_zero_x, %v12_conv_0_zero_y, %v12_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %79 = nn.mcutruncate(%78) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %80 = nn.mcuconv2d(%79, %v12_conv_1_weight, %v12_conv_1_bias, %v12_conv_1_zero_x, %v12_conv_1_zero_y, %v12_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %81 = nn.mcutruncate(%80) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %82 = nn.mcuconv2d(%81, %v12_conv_2_weight, %v12_conv_2_bias, %v12_conv_2_zero_x, %v12_conv_2_zero_y, %v12_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %83 = nn.mcutruncate(%82) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %84 = nn.mcuadd(%77, %83, %v12_qadd_zero_x1, %v12_qadd_zero_x2, %v12_qadd_scale_x1, %v12_qadd_scale_x2, %v12_qadd_zero_y, %v12_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %85 = nn.mcutruncate(%84) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %86 = nn.mcuconv2d(%85, %v13_conv_0_weight, %v13_conv_0_bias, %v13_conv_0_zero_x, %v13_conv_0_zero_y, %v13_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %87 = nn.mcutruncate(%86) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %88 = nn.mcuconv2d(%87, %v13_conv_1_weight, %v13_conv_1_bias, %v13_conv_1_zero_x, %v13_conv_1_zero_y, %v13_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %89 = nn.mcutruncate(%88) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %90 = nn.mcuconv2d(%89, %v13_conv_2_weight, %v13_conv_2_bias, %v13_conv_2_zero_x, %v13_conv_2_zero_y, %v13_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %91 = nn.mcutruncate(%90) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %92 = nn.mcuadd(%85, %91, %v13_qadd_zero_x1, %v13_qadd_zero_x2, %v13_qadd_scale_x1, %v13_qadd_scale_x2, %v13_qadd_zero_y, %v13_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %93 = nn.mcutruncate(%92) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %94 = nn.mcuconv2d(%93, %v14_conv_0_weight, %v14_conv_0_bias, %v14_conv_0_zero_x, %v14_conv_0_zero_y, %v14_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %95 = nn.mcutruncate(%94) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %96 = nn.mcuconv2d(%95, %v14_conv_1_weight, %v14_conv_1_bias, %v14_conv_1_zero_x, %v14_conv_1_zero_y, %v14_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=192) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %97 = nn.mcutruncate(%96) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %98 = nn.mcuconv2d(%97, %v14_conv_2_weight, %v14_conv_2_bias, %v14_conv_2_zero_x, %v14_conv_2_zero_y, %v14_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %99 = nn.mcutruncate(%98) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %100 = nn.mcuconv2d(%99, %v15_conv_0_weight, %v15_conv_0_bias, %v15_conv_0_zero_x, %v15_conv_0_zero_y, %v15_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %101 = nn.mcutruncate(%100) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %102 = nn.mcuconv2d(%101, %v15_conv_1_weight, %v15_conv_1_bias, %v15_conv_1_zero_x, %v15_conv_1_zero_y, %v15_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %103 = nn.mcutruncate(%102) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %104 = nn.mcuconv2d(%103, %v15_conv_2_weight, %v15_conv_2_bias, %v15_conv_2_zero_x, %v15_conv_2_zero_y, %v15_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %105 = nn.mcutruncate(%104) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %106 = nn.mcuadd(%99, %105, %v15_qadd_zero_x1, %v15_qadd_zero_x2, %v15_qadd_scale_x1, %v15_qadd_scale_x2, %v15_qadd_zero_y, %v15_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %107 = nn.mcutruncate(%106) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %108 = nn.mcuconv2d(%107, %v16_conv_0_weight, %v16_conv_0_bias, %v16_conv_0_zero_x, %v16_conv_0_zero_y, %v16_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %109 = nn.mcutruncate(%108) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %110 = nn.mcuconv2d(%109, %v16_conv_1_weight, %v16_conv_1_bias, %v16_conv_1_zero_x, %v16_conv_1_zero_y, %v16_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %111 = nn.mcutruncate(%110) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %112 = nn.mcuconv2d(%111, %v16_conv_2_weight, %v16_conv_2_bias, %v16_conv_2_zero_x, %v16_conv_2_zero_y, %v16_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %113 = nn.mcutruncate(%112) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %114 = nn.mcuadd(%107, %113, %v16_qadd_zero_x1, %v16_qadd_zero_x2, %v16_qadd_scale_x1, %v16_qadd_scale_x2, %v16_qadd_zero_y, %v16_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %115 = nn.mcutruncate(%114) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %116 = nn.mcuconv2d(%115, %v17_conv_0_weight, %v17_conv_0_bias, %v17_conv_0_zero_x, %v17_conv_0_zero_y, %v17_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %117 = nn.mcutruncate(%116) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %118 = nn.mcuconv2d(%117, %v17_conv_1_weight, %v17_conv_1_bias, %v17_conv_1_zero_x, %v17_conv_1_zero_y, %v17_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %119 = nn.mcutruncate(%118) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %120 = nn.mcuconv2d(%119, %v17_conv_2_weight, %v17_conv_2_bias, %v17_conv_2_zero_x, %v17_conv_2_zero_y, %v17_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 112, 4, 4), int32] */;
  %121 = nn.mcutruncate(%120) /* from_string */ /* ty=Tensor[(1, 112, 4, 4), int8] */;
  %122 = mcumean(%121, axis=[2, 3], keepdims=True) /* from_string */ /* ty=Tensor[(1, 112, 1, 1), int8] */;
  %123 = nn.mcuconv2d(%122, %v18_weight, %v18_bias, %v18_zero_x, %v18_zero_y, %v18_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %124 = nn.mcutruncate(%123) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %125 = reshape(%124, newshape=[0, 0]) /* from_string */ /* ty=Tensor[(1, 10), int8] */;
  %126 = cast(%125, dtype="float32") /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %127 = nn.log_softmax(%126) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %128 = cast(%123, dtype="float32") /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %129 = greater_equal(%128, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %130 = less_equal(%128, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %131 = ones(shape=[], dtype="float32") /* from_string */ /* ty=float32 */;
  %132 = negative(%131) /* from_string */ /* ty=float32 */;
  %133 = multiply(%132, %label) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %134 = sum(%133, axis=[-1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1), float32] */;
  %135 = exp(%127) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %136 = multiply(%134, %135) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %137 = subtract(%133, %136) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %138 = multiply(%129, %130) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %139 = reshape(%137, newshape=[1, 10, 1, 1]) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %140 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %141 = where(%138, %139, %140) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %142 = reshape(%v18_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %143 = multiply(%141, %142) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %144 = cast(%122, dtype="float32") /* from_string */ /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %145 = tile(%143, reps=[1, 112, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1120, 1, 1), float32] */;
  %146 = reshape(%144, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %147 = reshape(%145, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(1120, 1, 1, 1), float32] */;
  %148 = nn.conv2d(%146, %147, padding=[0, 0, 0, 0], groups=112) /* from_string */ /* ty=Tensor[(1, 1120, 1, 1), float32] */;
  %149 = reshape(%148, newshape=[1, 112, 10, 1, 1]) /* from_string */ /* ty=Tensor[(1, 112, 10, 1, 1), float32] */;
  %150 = sum(%149, axis=[0]) /* from_string */ /* ty=Tensor[(112, 10, 1, 1), float32] */;
  %151 = cast(%120, dtype="float32") /* from_string */ /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %152 = greater_equal(%151, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %153 = less_equal(%151, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %154 = cast(%v18_weight, dtype="float32") /* from_string */ /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %155 = nn.conv2d_transpose(%143, %154, channels=112, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %156 = multiply(%155, 0.0625f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %157 = ones(shape=[1, 112, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %158 = multiply(%152, %153) /* from_string */ /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %159 = multiply(%156, %157) /* from_string */ /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %160 = zeros(shape=[1, 112, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %161 = where(%158, %159, %160) /* from_string */ /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %162 = reshape(%v17_conv_2_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %163 = multiply(%161, %162) /* from_string */ /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %164 = cast(%118, dtype="float32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %165 = greater_equal(%164, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %166 = less_equal(%164, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %167 = cast(%v17_conv_2_weight, dtype="float32") /* from_string */ /* ty=Tensor[(112, 336, 1, 1), float32] */;
  %168 = multiply(%165, %166) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %169 = nn.conv2d_transpose(%163, %167, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %170 = zeros(shape=[1, 336, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %171 = where(%168, %169, %170) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %172 = reshape(%v17_conv_1_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 336, 1, 1), float32] */;
  %173 = multiply(%171, %172) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %174 = cast(%117, dtype="float32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %175 = strided_slice(%174, begin=[0, 0, 0, 0], end=[1, 42, 4, 4], strides=[1], axes=None) /* from_string */ /* ty=Tensor[(1, 42, 4, 4), float32] */;
  %176 = strided_slice(%173, begin=[0, 0, 0, 0], end=[1, 42, 4, 4], strides=[1], axes=None) /* from_string */ /* ty=Tensor[(1, 42, 4, 4), float32] */;
  %177 = tile(%176, reps=[1, 1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 42, 4, 4), float32] */;
  %178 = reshape(%175, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 42, 4, 4), float32] */;
  %179 = reshape(%177, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(42, 1, 4, 4), float32] */;
  %180 = nn.conv2d(%178, %179, padding=[1, 1, 1, 1], groups=42) /* from_string */ /* ty=Tensor[(1, 42, 3, 3), float32] */;
  %181 = reshape(%180, newshape=[1, 1, 42, 3, 3]) /* from_string */ /* ty=Tensor[(1, 1, 42, 3, 3), float32] */;
  %182 = sum(%181, axis=[0]) /* from_string */ /* ty=Tensor[(1, 42, 3, 3), float32] */;
  %183 = greater_equal(%116, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %184 = less_equal(%116, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %185 = cast(%v17_conv_1_weight, dtype="float32") /* from_string */ /* ty=Tensor[(336, 1, 3, 3), float32] */;
  %186 = multiply(%183, %184) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %187 = nn.conv2d_transpose(%173, %185, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %188 = zeros(shape=[1, 336, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %189 = where(%186, %187, %188) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %190 = reshape(%v17_conv_0_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 336, 1, 1), float32] */;
  %191 = multiply(%189, %190) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %192 = cast(%115, dtype="float32") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %193 = strided_slice(%192, begin=[0, 0, 0, 0], end=[1, 7, 4, 4], strides=[1], axes=None) /* from_string */ /* ty=Tensor[(1, 7, 4, 4), float32] */;
  %194 = tile(%191, reps=[1, 7, 1, 1]) /* from_string */ /* ty=Tensor[(1, 2352, 4, 4), float32] */;
  %195 = reshape(%193, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 7, 4, 4), float32] */;
  %196 = reshape(%194, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(2352, 1, 4, 4), float32] */;
  %197 = nn.conv2d(%195, %196, padding=[0, 0, 0, 0], groups=7) /* from_string */ /* ty=Tensor[(1, 2352, 1, 1), float32] */;
  %198 = reshape(%197, newshape=[1, 7, 336, 1, 1]) /* from_string */ /* ty=Tensor[(1, 7, 336, 1, 1), float32] */;
  %199 = sum(%198, axis=[0]) /* from_string */ /* ty=Tensor[(7, 336, 1, 1), float32] */;
  %200 = greater_equal(%112, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %201 = less_equal(%112, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %202 = greater_equal(%114, meta[relay.Constant][0] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %203 = less_equal(%114, meta[relay.Constant][1] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %204 = cast(%v17_conv_0_weight, dtype="float32") /* from_string */ /* ty=Tensor[(336, 56, 1, 1), float32] */;
  %205 = multiply(%202, %203) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %206 = nn.conv2d_transpose(%191, %204, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %207 = zeros(shape=[1, 56, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %208 = where(%205, %206, %207) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %209 = reshape(%v16_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %210 = divide(%208, %209) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %211 = reshape(%v16_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %212 = multiply(%200, %201) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %213 = multiply(%210, %211) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %214 = zeros(shape=[1, 56, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %215 = where(%212, %213, %214) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %216 = cast(%215, dtype="int32") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %217 = greater_equal(%110, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %218 = less_equal(%110, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %219 = cast(%v16_conv_2_weight, dtype="float32") /* from_string */ /* ty=Tensor[(56, 336, 1, 1), float32] */;
  %220 = nn.conv2d_transpose(%215, %219, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %221 = abs(%220) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %222 = max(%221, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %223 = divide(%222, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %224 = divide(%220, %223) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %225 = multiply(%217, %218) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %226 = cast(%224, dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %227 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %228 = where(%225, %226, %227) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %229 = cast(%228, dtype="int32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %230 = greater_equal(%108, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %231 = less_equal(%108, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %232 = nn.conv2d_transpose(%228, %v16_conv_1_weight, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %233 = abs(%232) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %234 = max(%233, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %235 = divide(%234, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %236 = divide(%232, %235) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %237 = multiply(%230, %231) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %238 = cast(%236, dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %239 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %240 = where(%237, %238, %239) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %241 = cast(%240, dtype="float32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %242 = reshape(%v16_conv_0_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 336, 1, 1), float32] */;
  %243 = multiply(%241, %242) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %244 = cast(%107, dtype="float32") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %245 = strided_slice(%244, begin=[0, 0, 0, 0], end=[1, 7, 4, 4], strides=[1], axes=None) /* from_string */ /* ty=Tensor[(1, 7, 4, 4), float32] */;
  %246 = tile(%243, reps=[1, 7, 1, 1]) /* from_string */ /* ty=Tensor[(1, 2352, 4, 4), float32] */;
  %247 = reshape(%245, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 7, 4, 4), float32] */;
  %248 = reshape(%246, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(2352, 1, 4, 4), float32] */;
  %249 = nn.conv2d(%247, %248, padding=[0, 0, 0, 0], groups=7) /* from_string */ /* ty=Tensor[(1, 2352, 1, 1), float32] */;
  %250 = reshape(%249, newshape=[1, 7, 336, 1, 1]) /* from_string */ /* ty=Tensor[(1, 7, 336, 1, 1), float32] */;
  %251 = sum(%250, axis=[0]) /* from_string */ /* ty=Tensor[(7, 336, 1, 1), float32] */;
  %252 = greater_equal(%104, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %253 = less_equal(%104, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %254 = greater_equal(%106, meta[relay.Constant][2] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %255 = less_equal(%106, meta[relay.Constant][3] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %256 = cast(%v16_conv_0_weight, dtype="float32") /* from_string */ /* ty=Tensor[(336, 56, 1, 1), float32] */;
  %257 = multiply(%254, %255) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %258 = nn.conv2d_transpose(%243, %256, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %259 = zeros(shape=[1, 56, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %260 = where(%257, %258, %259) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %261 = reshape(%v15_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %262 = divide(%260, %261) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %263 = reshape(%v15_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %264 = multiply(%252, %253) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %265 = multiply(%262, %263) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %266 = zeros(shape=[1, 56, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %267 = where(%264, %265, %266) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %268 = cast(%267, dtype="int32") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %269 = greater_equal(%102, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %270 = less_equal(%102, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %271 = cast(%v15_conv_2_weight, dtype="float32") /* from_string */ /* ty=Tensor[(56, 336, 1, 1), float32] */;
  %272 = nn.conv2d_transpose(%267, %271, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %273 = abs(%272) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %274 = max(%273, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %275 = divide(%274, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %276 = divide(%272, %275) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %277 = multiply(%269, %270) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %278 = cast(%276, dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %279 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %280 = where(%277, %278, %279) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %281 = cast(%280, dtype="int32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %282 = greater_equal(%100, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %283 = less_equal(%100, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %284 = nn.conv2d_transpose(%280, %v15_conv_1_weight, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %285 = abs(%284) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %286 = max(%285, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %287 = divide(%286, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %288 = divide(%284, %287) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %289 = multiply(%282, %283) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %290 = cast(%288, dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %291 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %292 = where(%289, %290, %291) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %293 = cast(%292, dtype="float32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %294 = reshape(%v15_conv_0_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 336, 1, 1), float32] */;
  %295 = multiply(%293, %294) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %296 = cast(%99, dtype="float32") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %297 = strided_slice(%296, begin=[0, 0, 0, 0], end=[1, 7, 4, 4], strides=[1], axes=None) /* from_string */ /* ty=Tensor[(1, 7, 4, 4), float32] */;
  %298 = tile(%295, reps=[1, 7, 1, 1]) /* from_string */ /* ty=Tensor[(1, 2352, 4, 4), float32] */;
  %299 = reshape(%297, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 7, 4, 4), float32] */;
  %300 = reshape(%298, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(2352, 1, 4, 4), float32] */;
  %301 = nn.conv2d(%299, %300, padding=[0, 0, 0, 0], groups=7) /* from_string */ /* ty=Tensor[(1, 2352, 1, 1), float32] */;
  %302 = reshape(%301, newshape=[1, 7, 336, 1, 1]) /* from_string */ /* ty=Tensor[(1, 7, 336, 1, 1), float32] */;
  %303 = sum(%302, axis=[0]) /* from_string */ /* ty=Tensor[(7, 336, 1, 1), float32] */;
  %304 = greater_equal(%98, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %305 = less_equal(%98, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %306 = cast(%v15_conv_0_weight, dtype="float32") /* from_string */ /* ty=Tensor[(336, 56, 1, 1), float32] */;
  %307 = multiply(%304, %305) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %308 = nn.conv2d_transpose(%295, %306, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %309 = zeros(shape=[1, 56, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %310 = where(%307, %308, %309) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %311 = reshape(%v14_conv_2_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 56, 1, 1), float32] */;
  %312 = multiply(%310, %311) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %313 = cast(%97, dtype="float32") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %314 = strided_slice(%313, begin=[0, 0, 0, 0], end=[1, 48, 4, 4], strides=[1], axes=None) /* from_string */ /* ty=Tensor[(1, 48, 4, 4), float32] */;
  %315 = tile(%312, reps=[1, 48, 1, 1]) /* from_string */ /* ty=Tensor[(1, 2688, 4, 4), float32] */;
  %316 = reshape(%314, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 4, 4), float32] */;
  %317 = reshape(%315, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(2688, 1, 4, 4), float32] */;
  %318 = nn.conv2d(%316, %317, padding=[0, 0, 0, 0], groups=48) /* from_string */ /* ty=Tensor[(1, 2688, 1, 1), float32] */;
  %319 = reshape(%318, newshape=[1, 48, 56, 1, 1]) /* from_string */ /* ty=Tensor[(1, 48, 56, 1, 1), float32] */;
  %320 = sum(%319, axis=[0]) /* from_string */ /* ty=Tensor[(48, 56, 1, 1), float32] */;
  %321 = greater_equal(%96, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %322 = less_equal(%96, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %323 = cast(%v14_conv_2_weight, dtype="float32") /* from_string */ /* ty=Tensor[(56, 192, 1, 1), float32] */;
  %324 = multiply(%321, %322) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %325 = nn.conv2d_transpose(%312, %323, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %326 = zeros(shape=[1, 192, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %327 = where(%324, %325, %326) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %328 = cast(%327, dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %329 = greater_equal(%94, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %330 = less_equal(%94, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %331 = cast(%v14_conv_1_weight, dtype="float32") /* from_string */ /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %332 = nn.conv2d_transpose(%327, %331, channels=192, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="float32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %333 = abs(%332) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %334 = max(%333, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), float32] */;
  %335 = divide(%334, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), float32] */;
  %336 = divide(%332, %335) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %337 = multiply(%329, %330) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %338 = cast(%336, dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %339 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %340 = where(%337, %338, %339) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %341 = cast(%340, dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %342 = tile(%340, reps=[1, 32, 1, 1]) /* from_string */ /* ty=Tensor[(1, 6144, 8, 8), int8] */;
  %343 = reshape(%93, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %344 = reshape(%342, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(6144, 1, 8, 8), int8] */;
  %345 = nn.conv2d(%343, %344, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %346 = reshape(%345, newshape=[1, 32, 192, 1, 1]) /* from_string */ /* ty=Tensor[(1, 32, 192, 1, 1), int32] */;
  %347 = sum(%346, axis=[0]) /* from_string */ /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %348 = transpose(%347, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %349 = abs(%348) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %350 = max(%349, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %351 = divide(%350, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %352 = divide(%348, %351) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %353 = greater_equal(%90, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %354 = less_equal(%90, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %355 = greater_equal(%92, meta[relay.Constant][4] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %356 = less_equal(%92, meta[relay.Constant][5] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %357 = nn.conv2d_transpose(%340, %v14_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %358 = abs(%357) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %359 = max(%358, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %360 = divide(%359, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %361 = divide(%357, %360) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %362 = multiply(%355, %356) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %363 = cast(%361, dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %364 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %365 = where(%362, %363, %364) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %366 = cast(%365, dtype="float32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %367 = reshape(%v13_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %368 = divide(%366, %367) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %369 = reshape(%v13_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %370 = multiply(%368, %369) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %371 = multiply(%353, %354) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %372 = cast(%370, dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %373 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %374 = where(%371, %372, %373) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %375 = cast(%374, dtype="int32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %376 = greater_equal(%88, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %377 = less_equal(%88, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %378 = nn.conv2d_transpose(%374, %v13_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %379 = abs(%378) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %380 = max(%379, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %381 = divide(%380, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %382 = divide(%378, %381) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %383 = multiply(%376, %377) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %384 = cast(%382, dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %385 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %386 = where(%383, %384, %385) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %387 = cast(%386, dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %388 = greater_equal(%86, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %389 = less_equal(%86, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %390 = nn.conv2d_transpose(%386, %v13_conv_1_weight, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %391 = abs(%390) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %392 = max(%391, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %393 = divide(%392, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %394 = divide(%390, %393) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %395 = multiply(%388, %389) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %396 = cast(%394, dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %397 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %398 = where(%395, %396, %397) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %399 = cast(%398, dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %400 = tile(%398, reps=[1, 32, 1, 1]) /* from_string */ /* ty=Tensor[(1, 6144, 8, 8), int8] */;
  %401 = reshape(%85, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %402 = reshape(%400, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(6144, 1, 8, 8), int8] */;
  %403 = nn.conv2d(%401, %402, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %404 = reshape(%403, newshape=[1, 32, 192, 1, 1]) /* from_string */ /* ty=Tensor[(1, 32, 192, 1, 1), int32] */;
  %405 = sum(%404, axis=[0]) /* from_string */ /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %406 = transpose(%405, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %407 = abs(%406) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %408 = max(%407, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %409 = divide(%408, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %410 = divide(%406, %409) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %411 = greater_equal(%82, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %412 = less_equal(%82, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %413 = greater_equal(%84, meta[relay.Constant][6] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %414 = less_equal(%84, meta[relay.Constant][7] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %415 = nn.conv2d_transpose(%398, %v13_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %416 = abs(%415) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %417 = max(%416, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %418 = divide(%417, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %419 = divide(%415, %418) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %420 = multiply(%413, %414) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %421 = cast(%419, dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %422 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %423 = where(%420, %421, %422) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %424 = cast(%423, dtype="float32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %425 = reshape(%v12_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %426 = divide(%424, %425) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %427 = reshape(%v12_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %428 = multiply(%426, %427) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %429 = multiply(%411, %412) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %430 = cast(%428, dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %431 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %432 = where(%429, %430, %431) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %433 = cast(%432, dtype="int32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %434 = nn.cross_entropy_with_logits(%127, %label) /* from_string */ /* ty=float32 */;
  %435 = sum(%143, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(10), float32] */;
  %436 = transpose(%150, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %437 = sum(%163, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(112), float32] */;
  %438 = sum(%173, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(336), float32] */;
  %439 = transpose(%182, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(42, 1, 3, 3), float32] */;
  %440 = sum(%191, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(336), float32] */;
  %441 = transpose(%199, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(336, 7, 1, 1), float32] */;
  %442 = sum(%216, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(56), int32] */;
  %443 = sum(%229, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(336), int32] */;
  %444 = sum(%243, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(336), float32] */;
  %445 = transpose(%251, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(336, 7, 1, 1), float32] */;
  %446 = sum(%268, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(56), int32] */;
  %447 = sum(%281, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(336), int32] */;
  %448 = sum(%295, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(336), float32] */;
  %449 = transpose(%303, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(336, 7, 1, 1), float32] */;
  %450 = sum(%312, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(56), float32] */;
  %451 = transpose(%320, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(56, 48, 1, 1), float32] */;
  %452 = sum(%328, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(192), int32] */;
  %453 = sum(%341, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(192), int32] */;
  %454 = cast(%352, dtype="int8") /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int8] */;
  %455 = sum(%375, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(32), int32] */;
  %456 = sum(%387, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(192), int32] */;
  %457 = sum(%399, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(192), int32] */;
  %458 = cast(%410, dtype="int8") /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int8] */;
  %459 = sum(%433, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(32), int32] */;
  (%434, %435, %436, %437, %438, %439, %440, %441, %442, %443, %444, %445, %446, %447, %448, %449, %450, %451, %452, %453, %454, %455, %456, %457, %458, %459)
}
