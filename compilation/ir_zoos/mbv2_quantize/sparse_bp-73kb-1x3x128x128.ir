def @main(%input: Tensor[(1, 3, 128, 128), int8], %v0_weight: Tensor[(16, 3, 3, 3), int8], %v0_bias: Tensor[(16), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(16), float32], %v1_conv_0_weight: Tensor[(16, 1, 3, 3), int8], %v1_conv_0_bias: Tensor[(16), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(16), float32], %v1_conv_1_weight: Tensor[(8, 16, 1, 1), int8], %v1_conv_1_bias: Tensor[(8), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(8), float32], %v2_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v2_conv_0_bias: Tensor[(48), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(48), float32], %v2_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v2_conv_1_bias: Tensor[(48), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(48), float32], %v2_conv_2_weight: Tensor[(8, 48, 1, 1), int8], %v2_conv_2_bias: Tensor[(8), int32], %v2_conv_2_zero_x: Tensor[(1), int8], %v2_conv_2_zero_y: Tensor[(1), int8], %v2_conv_2_scale: Tensor[(8), float32], %v3_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v3_conv_0_bias: Tensor[(48), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(48), float32], %v3_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v3_conv_1_bias: Tensor[(48), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(48), float32], %v3_conv_2_weight: Tensor[(8, 48, 1, 1), int8], %v3_conv_2_bias: Tensor[(8), int32], %v3_conv_2_zero_x: Tensor[(1), int8], %v3_conv_2_zero_y: Tensor[(1), int8], %v3_conv_2_scale: Tensor[(8), float32], %v3_qadd_zero_x1: Tensor[(1), int8], %v3_qadd_zero_x2: Tensor[(1), int8], %v3_qadd_scale_x1: Tensor[(1), float32], %v3_qadd_scale_x2: Tensor[(1), float32], %v3_qadd_zero_y: Tensor[(1), int8], %v3_qadd_scale_y: Tensor[(1), float32], %v4_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v4_conv_0_bias: Tensor[(48), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(48), float32], %v4_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v4_conv_1_bias: Tensor[(48), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(48), float32], %v4_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v4_conv_2_bias: Tensor[(16), int32], %v4_conv_2_zero_x: Tensor[(1), int8], %v4_conv_2_zero_y: Tensor[(1), int8], %v4_conv_2_scale: Tensor[(16), float32], %v5_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v5_conv_0_bias: Tensor[(96), int32], %v5_conv_0_zero_x: Tensor[(1), int8], %v5_conv_0_zero_y: Tensor[(1), int8], %v5_conv_0_scale: Tensor[(96), float32], %v5_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v5_conv_1_bias: Tensor[(96), int32], %v5_conv_1_zero_x: Tensor[(1), int8], %v5_conv_1_zero_y: Tensor[(1), int8], %v5_conv_1_scale: Tensor[(96), float32], %v5_conv_2_weight: Tensor[(16, 96, 1, 1), int8], %v5_conv_2_bias: Tensor[(16), int32], %v5_conv_2_zero_x: Tensor[(1), int8], %v5_conv_2_zero_y: Tensor[(1), int8], %v5_conv_2_scale: Tensor[(16), float32], %v5_qadd_zero_x1: Tensor[(1), int8], %v5_qadd_zero_x2: Tensor[(1), int8], %v5_qadd_scale_x1: Tensor[(1), float32], %v5_qadd_scale_x2: Tensor[(1), float32], %v5_qadd_zero_y: Tensor[(1), int8], %v5_qadd_scale_y: Tensor[(1), float32], %v6_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v6_conv_0_bias: Tensor[(96), int32], %v6_conv_0_zero_x: Tensor[(1), int8], %v6_conv_0_zero_y: Tensor[(1), int8], %v6_conv_0_scale: Tensor[(96), float32], %v6_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v6_conv_1_bias: Tensor[(96), int32], %v6_conv_1_zero_x: Tensor[(1), int8], %v6_conv_1_zero_y: Tensor[(1), int8], %v6_conv_1_scale: Tensor[(96), float32], %v6_conv_2_weight: Tensor[(16, 96, 1, 1), int8], %v6_conv_2_bias: Tensor[(16), int32], %v6_conv_2_zero_x: Tensor[(1), int8], %v6_conv_2_zero_y: Tensor[(1), int8], %v6_conv_2_scale: Tensor[(16), float32], %v6_qadd_zero_x1: Tensor[(1), int8], %v6_qadd_zero_x2: Tensor[(1), int8], %v6_qadd_scale_x1: Tensor[(1), float32], %v6_qadd_scale_x2: Tensor[(1), float32], %v6_qadd_zero_y: Tensor[(1), int8], %v6_qadd_scale_y: Tensor[(1), float32], %v7_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v7_conv_0_bias: Tensor[(96), int32], %v7_conv_0_zero_x: Tensor[(1), int8], %v7_conv_0_zero_y: Tensor[(1), int8], %v7_conv_0_scale: Tensor[(96), float32], %v7_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v7_conv_1_bias: Tensor[(96), int32], %v7_conv_1_zero_x: Tensor[(1), int8], %v7_conv_1_zero_y: Tensor[(1), int8], %v7_conv_1_scale: Tensor[(96), float32], %v7_conv_2_weight: Tensor[(24, 96, 1, 1), int8], %v7_conv_2_bias: Tensor[(24), int32], %v7_conv_2_zero_x: Tensor[(1), int8], %v7_conv_2_zero_y: Tensor[(1), int8], %v7_conv_2_scale: Tensor[(24), float32], %v8_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v8_conv_0_bias: Tensor[(144), int32], %v8_conv_0_zero_x: Tensor[(1), int8], %v8_conv_0_zero_y: Tensor[(1), int8], %v8_conv_0_scale: Tensor[(144), float32], %v8_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v8_conv_1_bias: Tensor[(144), int32], %v8_conv_1_zero_x: Tensor[(1), int8], %v8_conv_1_zero_y: Tensor[(1), int8], %v8_conv_1_scale: Tensor[(144), float32], %v8_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v8_conv_2_bias: Tensor[(24), int32], %v8_conv_2_zero_x: Tensor[(1), int8], %v8_conv_2_zero_y: Tensor[(1), int8], %v8_conv_2_scale: Tensor[(24), float32], %v8_qadd_zero_x1: Tensor[(1), int8], %v8_qadd_zero_x2: Tensor[(1), int8], %v8_qadd_scale_x1: Tensor[(1), float32], %v8_qadd_scale_x2: Tensor[(1), float32], %v8_qadd_zero_y: Tensor[(1), int8], %v8_qadd_scale_y: Tensor[(1), float32], %v9_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v9_conv_0_bias: Tensor[(144), int32], %v9_conv_0_zero_x: Tensor[(1), int8], %v9_conv_0_zero_y: Tensor[(1), int8], %v9_conv_0_scale: Tensor[(144), float32], %v9_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v9_conv_1_bias: Tensor[(144), int32], %v9_conv_1_zero_x: Tensor[(1), int8], %v9_conv_1_zero_y: Tensor[(1), int8], %v9_conv_1_scale: Tensor[(144), float32], %v9_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v9_conv_2_bias: Tensor[(24), int32], %v9_conv_2_zero_x: Tensor[(1), int8], %v9_conv_2_zero_y: Tensor[(1), int8], %v9_conv_2_scale: Tensor[(24), float32], %v9_qadd_zero_x1: Tensor[(1), int8], %v9_qadd_zero_x2: Tensor[(1), int8], %v9_qadd_scale_x1: Tensor[(1), float32], %v9_qadd_scale_x2: Tensor[(1), float32], %v9_qadd_zero_y: Tensor[(1), int8], %v9_qadd_scale_y: Tensor[(1), float32], %v10_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v10_conv_0_bias: Tensor[(144), int32], %v10_conv_0_zero_x: Tensor[(1), int8], %v10_conv_0_zero_y: Tensor[(1), int8], %v10_conv_0_scale: Tensor[(144), float32], %v10_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v10_conv_1_bias: Tensor[(144), int32], %v10_conv_1_zero_x: Tensor[(1), int8], %v10_conv_1_zero_y: Tensor[(1), int8], %v10_conv_1_scale: Tensor[(144), float32], %v10_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v10_conv_2_bias: Tensor[(24), int32], %v10_conv_2_zero_x: Tensor[(1), int8], %v10_conv_2_zero_y: Tensor[(1), int8], %v10_conv_2_scale: Tensor[(24), float32], %v10_qadd_zero_x1: Tensor[(1), int8], %v10_qadd_zero_x2: Tensor[(1), int8], %v10_qadd_scale_x1: Tensor[(1), float32], %v10_qadd_scale_x2: Tensor[(1), float32], %v10_qadd_zero_y: Tensor[(1), int8], %v10_qadd_scale_y: Tensor[(1), float32], %v11_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v11_conv_0_bias: Tensor[(144), int32], %v11_conv_0_zero_x: Tensor[(1), int8], %v11_conv_0_zero_y: Tensor[(1), int8], %v11_conv_0_scale: Tensor[(144), float32], %v11_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v11_conv_1_bias: Tensor[(144), int32], %v11_conv_1_zero_x: Tensor[(1), int8], %v11_conv_1_zero_y: Tensor[(1), int8], %v11_conv_1_scale: Tensor[(144), float32], %v11_conv_2_weight: Tensor[(32, 144, 1, 1), int8], %v11_conv_2_bias: Tensor[(32), int32], %v11_conv_2_zero_x: Tensor[(1), int8], %v11_conv_2_zero_y: Tensor[(1), int8], %v11_conv_2_scale: Tensor[(32), float32], %v12_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v12_conv_0_bias: Tensor[(192), int32], %v12_conv_0_zero_x: Tensor[(1), int8], %v12_conv_0_zero_y: Tensor[(1), int8], %v12_conv_0_scale: Tensor[(192), float32], %v12_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v12_conv_1_bias: Tensor[(192), int32], %v12_conv_1_zero_x: Tensor[(1), int8], %v12_conv_1_zero_y: Tensor[(1), int8], %v12_conv_1_scale: Tensor[(192), float32], %v12_conv_2_weight: Tensor[(32, 192, 1, 1), int8], %v12_conv_2_bias: Tensor[(32), int32], %v12_conv_2_zero_x: Tensor[(1), int8], %v12_conv_2_zero_y: Tensor[(1), int8], %v12_conv_2_scale: Tensor[(32), float32], %v12_qadd_zero_x1: Tensor[(1), int8], %v12_qadd_zero_x2: Tensor[(1), int8], %v12_qadd_scale_x1: Tensor[(1), float32], %v12_qadd_scale_x2: Tensor[(1), float32], %v12_qadd_zero_y: Tensor[(1), int8], %v12_qadd_scale_y: Tensor[(1), float32], %v13_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v13_conv_0_bias: Tensor[(192), int32], %v13_conv_0_zero_x: Tensor[(1), int8], %v13_conv_0_zero_y: Tensor[(1), int8], %v13_conv_0_scale: Tensor[(192), float32], %v13_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v13_conv_1_bias: Tensor[(192), int32], %v13_conv_1_zero_x: Tensor[(1), int8], %v13_conv_1_zero_y: Tensor[(1), int8], %v13_conv_1_scale: Tensor[(192), float32], %v13_conv_2_weight: Tensor[(32, 192, 1, 1), int8], %v13_conv_2_bias: Tensor[(32), int32], %v13_conv_2_zero_x: Tensor[(1), int8], %v13_conv_2_zero_y: Tensor[(1), int8], %v13_conv_2_scale: Tensor[(32), float32], %v13_qadd_zero_x1: Tensor[(1), int8], %v13_qadd_zero_x2: Tensor[(1), int8], %v13_qadd_scale_x1: Tensor[(1), float32], %v13_qadd_scale_x2: Tensor[(1), float32], %v13_qadd_zero_y: Tensor[(1), int8], %v13_qadd_scale_y: Tensor[(1), float32], %v14_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v14_conv_0_bias: Tensor[(192), int32], %v14_conv_0_zero_x: Tensor[(1), int8], %v14_conv_0_zero_y: Tensor[(1), int8], %v14_conv_0_scale: Tensor[(192), float32], %v14_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v14_conv_1_bias: Tensor[(192), int32], %v14_conv_1_zero_x: Tensor[(1), int8], %v14_conv_1_zero_y: Tensor[(1), int8], %v14_conv_1_scale: Tensor[(192), float32], %v14_conv_2_weight: Tensor[(56, 192, 1, 1), int8], %v14_conv_2_bias: Tensor[(56), int32], %v14_conv_2_zero_x: Tensor[(1), int8], %v14_conv_2_zero_y: Tensor[(1), int8], %v14_conv_2_scale: Tensor[(56), float32], %v15_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v15_conv_0_bias: Tensor[(336), int32], %v15_conv_0_zero_x: Tensor[(1), int8], %v15_conv_0_zero_y: Tensor[(1), int8], %v15_conv_0_scale: Tensor[(336), float32], %v15_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v15_conv_1_bias: Tensor[(336), int32], %v15_conv_1_zero_x: Tensor[(1), int8], %v15_conv_1_zero_y: Tensor[(1), int8], %v15_conv_1_scale: Tensor[(336), float32], %v15_conv_2_weight: Tensor[(56, 336, 1, 1), int8], %v15_conv_2_bias: Tensor[(56), int32], %v15_conv_2_zero_x: Tensor[(1), int8], %v15_conv_2_zero_y: Tensor[(1), int8], %v15_conv_2_scale: Tensor[(56), float32], %v15_qadd_zero_x1: Tensor[(1), int8], %v15_qadd_zero_x2: Tensor[(1), int8], %v15_qadd_scale_x1: Tensor[(1), float32], %v15_qadd_scale_x2: Tensor[(1), float32], %v15_qadd_zero_y: Tensor[(1), int8], %v15_qadd_scale_y: Tensor[(1), float32], %v16_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v16_conv_0_bias: Tensor[(336), int32], %v16_conv_0_zero_x: Tensor[(1), int8], %v16_conv_0_zero_y: Tensor[(1), int8], %v16_conv_0_scale: Tensor[(336), float32], %v16_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v16_conv_1_bias: Tensor[(336), int32], %v16_conv_1_zero_x: Tensor[(1), int8], %v16_conv_1_zero_y: Tensor[(1), int8], %v16_conv_1_scale: Tensor[(336), float32], %v16_conv_2_weight: Tensor[(56, 336, 1, 1), int8], %v16_conv_2_bias: Tensor[(56), int32], %v16_conv_2_zero_x: Tensor[(1), int8], %v16_conv_2_zero_y: Tensor[(1), int8], %v16_conv_2_scale: Tensor[(56), float32], %v16_qadd_zero_x1: Tensor[(1), int8], %v16_qadd_zero_x2: Tensor[(1), int8], %v16_qadd_scale_x1: Tensor[(1), float32], %v16_qadd_scale_x2: Tensor[(1), float32], %v16_qadd_zero_y: Tensor[(1), int8], %v16_qadd_scale_y: Tensor[(1), float32], %v17_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v17_conv_0_bias: Tensor[(336), int32], %v17_conv_0_zero_x: Tensor[(1), int8], %v17_conv_0_zero_y: Tensor[(1), int8], %v17_conv_0_scale: Tensor[(336), float32], %v17_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v17_conv_1_bias: Tensor[(336), int32], %v17_conv_1_zero_x: Tensor[(1), int8], %v17_conv_1_zero_y: Tensor[(1), int8], %v17_conv_1_scale: Tensor[(336), float32], %v17_conv_2_weight: Tensor[(112, 336, 1, 1), int8], %v17_conv_2_bias: Tensor[(112), int32], %v17_conv_2_zero_x: Tensor[(1), int8], %v17_conv_2_zero_y: Tensor[(1), int8], %v17_conv_2_scale: Tensor[(112), float32], %v18_weight: Tensor[(10, 112, 1, 1), int8], %v18_bias: Tensor[(10), int32], %v18_zero_x: Tensor[(1), int8], %v18_zero_y: Tensor[(1), int8], %v18_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), int32], Tensor[(10, 112, 1, 1), int8], Tensor[(112), int32], Tensor[(336), int32], Tensor[(336), int32], Tensor[(336, 56, 1, 1), int8], Tensor[(56), int32], Tensor[(336), int32], Tensor[(336), float32], Tensor[(336, 7, 1, 1), float32], Tensor[(56), int32], Tensor[(336), int32], Tensor[(336), float32], Tensor[(336, 7, 1, 1), float32], Tensor[(56), float32], Tensor[(56, 48, 1, 1), float32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(192), int32], Tensor[(192), float32], Tensor[(192, 16, 1, 1), float32], Tensor[(32), int32], Tensor[(192), int32], Tensor[(192), float32], Tensor[(192, 16, 1, 1), float32], Tensor[(32), float32], Tensor[(32, 18, 1, 1), float32], Tensor[(144), int32]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1 = nn.mcutruncate(%0) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[1, 1, 1, 1], groups=16) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %3 = nn.mcutruncate(%2) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %5 = nn.mcutruncate(%4) /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 64, 64), int32] */;
  %7 = nn.mcutruncate(%6) /* ty=Tensor[(1, 48, 64, 64), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %9 = nn.mcutruncate(%8) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %10 = nn.mcuconv2d(%9, %v2_conv_2_weight, %v2_conv_2_bias, %v2_conv_2_zero_x, %v2_conv_2_zero_y, %v2_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %11 = nn.mcutruncate(%10) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %13 = nn.mcutruncate(%12) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %14 = nn.mcuconv2d(%13, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %15 = nn.mcutruncate(%14) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %16 = nn.mcuconv2d(%15, %v3_conv_2_weight, %v3_conv_2_bias, %v3_conv_2_zero_x, %v3_conv_2_zero_y, %v3_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %17 = nn.mcutruncate(%16) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %18 = nn.mcuadd(%11, %17, %v3_qadd_zero_x1, %v3_qadd_zero_x2, %v3_qadd_scale_x1, %v3_qadd_scale_x2, %v3_qadd_zero_y, %v3_qadd_scale_y, axis=0) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %19 = nn.mcutruncate(%18) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %20 = nn.mcuconv2d(%19, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %21 = nn.mcutruncate(%20) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %22 = nn.mcuconv2d(%21, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %23 = nn.mcutruncate(%22) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %24 = nn.mcuconv2d(%23, %v4_conv_2_weight, %v4_conv_2_bias, %v4_conv_2_zero_x, %v4_conv_2_zero_y, %v4_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %25 = nn.mcutruncate(%24) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %26 = nn.mcuconv2d(%25, %v5_conv_0_weight, %v5_conv_0_bias, %v5_conv_0_zero_x, %v5_conv_0_zero_y, %v5_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %27 = nn.mcutruncate(%26) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %28 = nn.mcuconv2d(%27, %v5_conv_1_weight, %v5_conv_1_bias, %v5_conv_1_zero_x, %v5_conv_1_zero_y, %v5_conv_1_scale, padding=[1, 1, 1, 1], groups=96) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %29 = nn.mcutruncate(%28) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %30 = nn.mcuconv2d(%29, %v5_conv_2_weight, %v5_conv_2_bias, %v5_conv_2_zero_x, %v5_conv_2_zero_y, %v5_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %31 = nn.mcutruncate(%30) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %32 = nn.mcuadd(%25, %31, %v5_qadd_zero_x1, %v5_qadd_zero_x2, %v5_qadd_scale_x1, %v5_qadd_scale_x2, %v5_qadd_zero_y, %v5_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %33 = nn.mcutruncate(%32) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %34 = nn.mcuconv2d(%33, %v6_conv_0_weight, %v6_conv_0_bias, %v6_conv_0_zero_x, %v6_conv_0_zero_y, %v6_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %35 = nn.mcutruncate(%34) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %36 = nn.mcuconv2d(%35, %v6_conv_1_weight, %v6_conv_1_bias, %v6_conv_1_zero_x, %v6_conv_1_zero_y, %v6_conv_1_scale, padding=[1, 1, 1, 1], groups=96) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %37 = nn.mcutruncate(%36) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %38 = nn.mcuconv2d(%37, %v6_conv_2_weight, %v6_conv_2_bias, %v6_conv_2_zero_x, %v6_conv_2_zero_y, %v6_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %39 = nn.mcutruncate(%38) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %40 = nn.mcuadd(%33, %39, %v6_qadd_zero_x1, %v6_qadd_zero_x2, %v6_qadd_scale_x1, %v6_qadd_scale_x2, %v6_qadd_zero_y, %v6_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %41 = nn.mcutruncate(%40) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %42 = nn.mcuconv2d(%41, %v7_conv_0_weight, %v7_conv_0_bias, %v7_conv_0_zero_x, %v7_conv_0_zero_y, %v7_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %43 = nn.mcutruncate(%42) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %44 = nn.mcuconv2d(%43, %v7_conv_1_weight, %v7_conv_1_bias, %v7_conv_1_zero_x, %v7_conv_1_zero_y, %v7_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %45 = nn.mcutruncate(%44) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %46 = nn.mcuconv2d(%45, %v7_conv_2_weight, %v7_conv_2_bias, %v7_conv_2_zero_x, %v7_conv_2_zero_y, %v7_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %47 = nn.mcutruncate(%46) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %48 = nn.mcuconv2d(%47, %v8_conv_0_weight, %v8_conv_0_bias, %v8_conv_0_zero_x, %v8_conv_0_zero_y, %v8_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %49 = nn.mcutruncate(%48) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %50 = nn.mcuconv2d(%49, %v8_conv_1_weight, %v8_conv_1_bias, %v8_conv_1_zero_x, %v8_conv_1_zero_y, %v8_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %51 = nn.mcutruncate(%50) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %52 = nn.mcuconv2d(%51, %v8_conv_2_weight, %v8_conv_2_bias, %v8_conv_2_zero_x, %v8_conv_2_zero_y, %v8_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %53 = nn.mcutruncate(%52) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %54 = nn.mcuadd(%47, %53, %v8_qadd_zero_x1, %v8_qadd_zero_x2, %v8_qadd_scale_x1, %v8_qadd_scale_x2, %v8_qadd_zero_y, %v8_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %55 = nn.mcutruncate(%54) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %56 = nn.mcuconv2d(%55, %v9_conv_0_weight, %v9_conv_0_bias, %v9_conv_0_zero_x, %v9_conv_0_zero_y, %v9_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %57 = nn.mcutruncate(%56) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %58 = nn.mcuconv2d(%57, %v9_conv_1_weight, %v9_conv_1_bias, %v9_conv_1_zero_x, %v9_conv_1_zero_y, %v9_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %59 = nn.mcutruncate(%58) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %60 = nn.mcuconv2d(%59, %v9_conv_2_weight, %v9_conv_2_bias, %v9_conv_2_zero_x, %v9_conv_2_zero_y, %v9_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %61 = nn.mcutruncate(%60) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %62 = nn.mcuadd(%55, %61, %v9_qadd_zero_x1, %v9_qadd_zero_x2, %v9_qadd_scale_x1, %v9_qadd_scale_x2, %v9_qadd_zero_y, %v9_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %63 = nn.mcutruncate(%62) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %64 = nn.mcuconv2d(%63, %v10_conv_0_weight, %v10_conv_0_bias, %v10_conv_0_zero_x, %v10_conv_0_zero_y, %v10_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %65 = nn.mcutruncate(%64) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %66 = nn.mcuconv2d(%65, %v10_conv_1_weight, %v10_conv_1_bias, %v10_conv_1_zero_x, %v10_conv_1_zero_y, %v10_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %67 = nn.mcutruncate(%66) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %68 = nn.mcuconv2d(%67, %v10_conv_2_weight, %v10_conv_2_bias, %v10_conv_2_zero_x, %v10_conv_2_zero_y, %v10_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %69 = nn.mcutruncate(%68) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %70 = nn.mcuadd(%63, %69, %v10_qadd_zero_x1, %v10_qadd_zero_x2, %v10_qadd_scale_x1, %v10_qadd_scale_x2, %v10_qadd_zero_y, %v10_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %71 = nn.mcutruncate(%70) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %72 = nn.mcuconv2d(%71, %v11_conv_0_weight, %v11_conv_0_bias, %v11_conv_0_zero_x, %v11_conv_0_zero_y, %v11_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %73 = nn.mcutruncate(%72) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %74 = nn.mcuconv2d(%73, %v11_conv_1_weight, %v11_conv_1_bias, %v11_conv_1_zero_x, %v11_conv_1_zero_y, %v11_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %75 = nn.mcutruncate(%74) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %76 = nn.mcuconv2d(%75, %v11_conv_2_weight, %v11_conv_2_bias, %v11_conv_2_zero_x, %v11_conv_2_zero_y, %v11_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %77 = nn.mcutruncate(%76) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %78 = nn.mcuconv2d(%77, %v12_conv_0_weight, %v12_conv_0_bias, %v12_conv_0_zero_x, %v12_conv_0_zero_y, %v12_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %79 = nn.mcutruncate(%78) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %80 = nn.mcuconv2d(%79, %v12_conv_1_weight, %v12_conv_1_bias, %v12_conv_1_zero_x, %v12_conv_1_zero_y, %v12_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %81 = nn.mcutruncate(%80) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %82 = nn.mcuconv2d(%81, %v12_conv_2_weight, %v12_conv_2_bias, %v12_conv_2_zero_x, %v12_conv_2_zero_y, %v12_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %83 = nn.mcutruncate(%82) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %84 = nn.mcuadd(%77, %83, %v12_qadd_zero_x1, %v12_qadd_zero_x2, %v12_qadd_scale_x1, %v12_qadd_scale_x2, %v12_qadd_zero_y, %v12_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %85 = nn.mcutruncate(%84) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %86 = nn.mcuconv2d(%85, %v13_conv_0_weight, %v13_conv_0_bias, %v13_conv_0_zero_x, %v13_conv_0_zero_y, %v13_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %87 = nn.mcutruncate(%86) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %88 = nn.mcuconv2d(%87, %v13_conv_1_weight, %v13_conv_1_bias, %v13_conv_1_zero_x, %v13_conv_1_zero_y, %v13_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %89 = nn.mcutruncate(%88) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %90 = nn.mcuconv2d(%89, %v13_conv_2_weight, %v13_conv_2_bias, %v13_conv_2_zero_x, %v13_conv_2_zero_y, %v13_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %91 = nn.mcutruncate(%90) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %92 = nn.mcuadd(%85, %91, %v13_qadd_zero_x1, %v13_qadd_zero_x2, %v13_qadd_scale_x1, %v13_qadd_scale_x2, %v13_qadd_zero_y, %v13_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %93 = nn.mcutruncate(%92) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %94 = nn.mcuconv2d(%93, %v14_conv_0_weight, %v14_conv_0_bias, %v14_conv_0_zero_x, %v14_conv_0_zero_y, %v14_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %95 = nn.mcutruncate(%94) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %96 = nn.mcuconv2d(%95, %v14_conv_1_weight, %v14_conv_1_bias, %v14_conv_1_zero_x, %v14_conv_1_zero_y, %v14_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %97 = nn.mcutruncate(%96) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %98 = nn.mcuconv2d(%97, %v14_conv_2_weight, %v14_conv_2_bias, %v14_conv_2_zero_x, %v14_conv_2_zero_y, %v14_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %99 = nn.mcutruncate(%98) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %100 = nn.mcuconv2d(%99, %v15_conv_0_weight, %v15_conv_0_bias, %v15_conv_0_zero_x, %v15_conv_0_zero_y, %v15_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %101 = nn.mcutruncate(%100) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %102 = nn.mcuconv2d(%101, %v15_conv_1_weight, %v15_conv_1_bias, %v15_conv_1_zero_x, %v15_conv_1_zero_y, %v15_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %103 = nn.mcutruncate(%102) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %104 = nn.mcuconv2d(%103, %v15_conv_2_weight, %v15_conv_2_bias, %v15_conv_2_zero_x, %v15_conv_2_zero_y, %v15_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %105 = nn.mcutruncate(%104) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %106 = nn.mcuadd(%99, %105, %v15_qadd_zero_x1, %v15_qadd_zero_x2, %v15_qadd_scale_x1, %v15_qadd_scale_x2, %v15_qadd_zero_y, %v15_qadd_scale_y, axis=0) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %107 = nn.mcutruncate(%106) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %108 = nn.mcuconv2d(%107, %v16_conv_0_weight, %v16_conv_0_bias, %v16_conv_0_zero_x, %v16_conv_0_zero_y, %v16_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %109 = nn.mcutruncate(%108) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %110 = nn.mcuconv2d(%109, %v16_conv_1_weight, %v16_conv_1_bias, %v16_conv_1_zero_x, %v16_conv_1_zero_y, %v16_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %111 = nn.mcutruncate(%110) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %112 = nn.mcuconv2d(%111, %v16_conv_2_weight, %v16_conv_2_bias, %v16_conv_2_zero_x, %v16_conv_2_zero_y, %v16_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %113 = nn.mcutruncate(%112) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %114 = nn.mcuadd(%107, %113, %v16_qadd_zero_x1, %v16_qadd_zero_x2, %v16_qadd_scale_x1, %v16_qadd_scale_x2, %v16_qadd_zero_y, %v16_qadd_scale_y, axis=0) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %115 = nn.mcutruncate(%114) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %116 = nn.mcuconv2d(%115, %v17_conv_0_weight, %v17_conv_0_bias, %v17_conv_0_zero_x, %v17_conv_0_zero_y, %v17_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %117 = nn.mcutruncate(%116) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %118 = nn.mcuconv2d(%117, %v17_conv_1_weight, %v17_conv_1_bias, %v17_conv_1_zero_x, %v17_conv_1_zero_y, %v17_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %119 = nn.mcutruncate(%118) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %120 = nn.mcuconv2d(%119, %v17_conv_2_weight, %v17_conv_2_bias, %v17_conv_2_zero_x, %v17_conv_2_zero_y, %v17_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 112, 4, 4), int32] */;
  %121 = nn.mcutruncate(%120) /* ty=Tensor[(1, 112, 4, 4), int8] */;
  %122 = mcumean(%121, axis=[2, 3], keepdims=True) /* ty=Tensor[(1, 112, 1, 1), int8] */;
  %123 = nn.mcuconv2d(%122, %v18_weight, %v18_bias, %v18_zero_x, %v18_zero_y, %v18_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %124 = nn.mcutruncate(%123) /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %125 = reshape(%124, newshape=[0, 0]) /* ty=Tensor[(1, 10), int8] */;
  %126 = cast(%125, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %127 = nn.log_softmax(%126) /* ty=Tensor[(1, 10), float32] */;
  %128 = greater_equal(%123, -128 /* ty=int32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %129 = less_equal(%123, 127 /* ty=int32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %130 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %131 = negative(%130) /* ty=float32 */;
  %132 = multiply(%131, %label) /* ty=Tensor[(1, 10), float32] */;
  %133 = sum(%132, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %134 = exp(%127) /* ty=Tensor[(1, 10), float32] */;
  %135 = multiply(%133, %134) /* ty=Tensor[(1, 10), float32] */;
  %136 = subtract(%132, %135) /* ty=Tensor[(1, 10), float32] */;
  %137 = multiply(%128, %129) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %138 = reshape(%136, newshape=[1, 10, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %139 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %140 = where(%137, %138, %139) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %141 = cast(%140, dtype="int32") /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %142 = reshape(%122, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 112, 1, 1), int8] */;
  %143 = tile(%140, reps=[1, 112, 1, 1]) /* ty=Tensor[(1, 1120, 1, 1), float32] */;
  %144 = cast(%142, dtype="float32") /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %145 = reshape(%143, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1120, 1, 1, 1), float32] */;
  %146 = nn.conv2d(%144, %145, padding=[0, 0, 0, 0], groups=112, out_dtype="float32") /* ty=Tensor[(1, 1120, 1, 1), float32] */;
  %147 = reshape(%146, newshape=[1, 112, 10, 1, 1]) /* ty=Tensor[(1, 112, 10, 1, 1), float32] */;
  %148 = sum(%147, axis=[0]) /* ty=Tensor[(112, 10, 1, 1), float32] */;
  %149 = transpose(%148, axes=[1, 0, 2, 3]) /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %150 = abs(%149) /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %151 = max(%150, axis=[1], keepdims=True) /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %152 = divide(%151, 127f /* ty=float32 */) /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %153 = divide(%149, %152) /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %154 = greater_equal(%120, -128 /* ty=int32 */) /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %155 = less_equal(%120, 127 /* ty=int32 */) /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %156 = cast(%v18_weight, dtype="float32") /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %157 = nn.conv2d_transpose(%140, %156, channels=112, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %158 = abs(%157) /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %159 = max(%158, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %160 = divide(%159, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %161 = divide(%157, %160) /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %162 = cast(%161, dtype="int8") /* ty=Tensor[(1, 112, 1, 1), int8] */;
  %163 = cast(%162, dtype="float32") /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %164 = multiply(%163, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %165 = ones(shape=[1, 112, 4, 4], dtype="float32") /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %166 = multiply(%154, %155) /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %167 = multiply(%164, %165) /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %168 = zeros(shape=[1, 112, 4, 4], dtype="float32") /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %169 = where(%166, %167, %168) /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %170 = cast(%169, dtype="int32") /* ty=Tensor[(1, 112, 4, 4), int32] */;
  %171 = greater_equal(%118, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %172 = less_equal(%118, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %173 = cast(%v17_conv_2_weight, dtype="float32") /* ty=Tensor[(112, 336, 1, 1), float32] */;
  %174 = nn.conv2d_transpose(%169, %173, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %175 = abs(%174) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %176 = max(%175, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %177 = divide(%176, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %178 = divide(%174, %177) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %179 = multiply(%171, %172) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %180 = cast(%178, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %181 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %182 = where(%179, %180, %181) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %183 = cast(%182, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %184 = greater_equal(%116, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %185 = less_equal(%116, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %186 = nn.conv2d_transpose(%182, %v17_conv_1_weight, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %187 = abs(%186) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %188 = max(%187, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %189 = divide(%188, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %190 = divide(%186, %189) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %191 = multiply(%184, %185) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %192 = cast(%190, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %193 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %194 = where(%191, %192, %193) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %195 = cast(%194, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %196 = tile(%194, reps=[1, 56, 1, 1]) /* ty=Tensor[(1, 18816, 4, 4), int8] */;
  %197 = reshape(%115, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %198 = reshape(%196, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(18816, 1, 4, 4), int8] */;
  %199 = nn.conv2d(%197, %198, padding=[0, 0, 0, 0], groups=56, out_dtype="int32") /* ty=Tensor[(1, 18816, 1, 1), int32] */;
  %200 = reshape(%199, newshape=[1, 56, 336, 1, 1]) /* ty=Tensor[(1, 56, 336, 1, 1), int32] */;
  %201 = sum(%200, axis=[0]) /* ty=Tensor[(56, 336, 1, 1), int32] */;
  %202 = transpose(%201, axes=[1, 0, 2, 3]) /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %203 = abs(%202) /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %204 = max(%203, axis=[1], keepdims=True) /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %205 = divide(%204, 127 /* ty=int32 */) /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %206 = divide(%202, %205) /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %207 = greater_equal(%112, -128 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %208 = less_equal(%112, 127 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %209 = greater_equal(%114, meta[relay.Constant][0] /* ty=int8 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %210 = less_equal(%114, meta[relay.Constant][1] /* ty=int8 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %211 = nn.conv2d_transpose(%194, %v17_conv_0_weight, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %212 = abs(%211) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %213 = max(%212, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %214 = divide(%213, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %215 = divide(%211, %214) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %216 = multiply(%209, %210) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %217 = cast(%215, dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %218 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %219 = where(%216, %217, %218) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %220 = cast(%219, dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %221 = reshape(%v16_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %222 = divide(%220, %221) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %223 = reshape(%v16_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %224 = multiply(%222, %223) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %225 = multiply(%207, %208) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %226 = cast(%224, dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %227 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %228 = where(%225, %226, %227) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %229 = cast(%228, dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %230 = greater_equal(%110, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %231 = less_equal(%110, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %232 = nn.conv2d_transpose(%228, %v16_conv_2_weight, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %233 = abs(%232) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %234 = max(%233, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %235 = divide(%234, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %236 = divide(%232, %235) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %237 = multiply(%230, %231) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %238 = cast(%236, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %239 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %240 = where(%237, %238, %239) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %241 = cast(%240, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %242 = greater_equal(%108, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %243 = less_equal(%108, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %244 = nn.conv2d_transpose(%240, %v16_conv_1_weight, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %245 = abs(%244) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %246 = max(%245, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %247 = divide(%246, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %248 = divide(%244, %247) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %249 = multiply(%242, %243) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %250 = cast(%248, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %251 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %252 = where(%249, %250, %251) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %253 = cast(%252, dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %254 = reshape(%v16_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 336, 1, 1), float32] */;
  %255 = multiply(%253, %254) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %256 = cast(%107, dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %257 = strided_slice(%256, begin=[0, 0, 0, 0], end=[1, 7, 4, 4], strides=[1], axes=None) /* ty=Tensor[(1, 7, 4, 4), float32] */;
  %258 = tile(%255, reps=[1, 7, 1, 1]) /* ty=Tensor[(1, 2352, 4, 4), float32] */;
  %259 = reshape(%257, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 7, 4, 4), float32] */;
  %260 = reshape(%258, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(2352, 1, 4, 4), float32] */;
  %261 = nn.conv2d(%259, %260, padding=[0, 0, 0, 0], groups=7) /* ty=Tensor[(1, 2352, 1, 1), float32] */;
  %262 = reshape(%261, newshape=[1, 7, 336, 1, 1]) /* ty=Tensor[(1, 7, 336, 1, 1), float32] */;
  %263 = sum(%262, axis=[0]) /* ty=Tensor[(7, 336, 1, 1), float32] */;
  %264 = greater_equal(%104, -128 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %265 = less_equal(%104, 127 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %266 = greater_equal(%106, meta[relay.Constant][2] /* ty=int8 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %267 = less_equal(%106, meta[relay.Constant][3] /* ty=int8 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %268 = cast(%v16_conv_0_weight, dtype="float32") /* ty=Tensor[(336, 56, 1, 1), float32] */;
  %269 = multiply(%266, %267) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %270 = nn.conv2d_transpose(%255, %268, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %271 = zeros(shape=[1, 56, 4, 4], dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %272 = where(%269, %270, %271) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %273 = reshape(%v15_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %274 = divide(%272, %273) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %275 = reshape(%v15_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %276 = multiply(%264, %265) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %277 = multiply(%274, %275) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %278 = zeros(shape=[1, 56, 4, 4], dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %279 = where(%276, %277, %278) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %280 = cast(%279, dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %281 = greater_equal(%102, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %282 = less_equal(%102, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %283 = cast(%v15_conv_2_weight, dtype="float32") /* ty=Tensor[(56, 336, 1, 1), float32] */;
  %284 = nn.conv2d_transpose(%279, %283, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %285 = abs(%284) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %286 = max(%285, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %287 = divide(%286, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %288 = divide(%284, %287) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %289 = multiply(%281, %282) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %290 = cast(%288, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %291 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %292 = where(%289, %290, %291) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %293 = cast(%292, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %294 = greater_equal(%100, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %295 = less_equal(%100, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %296 = nn.conv2d_transpose(%292, %v15_conv_1_weight, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %297 = abs(%296) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %298 = max(%297, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %299 = divide(%298, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %300 = divide(%296, %299) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %301 = multiply(%294, %295) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %302 = cast(%300, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %303 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %304 = where(%301, %302, %303) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %305 = cast(%304, dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %306 = reshape(%v15_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 336, 1, 1), float32] */;
  %307 = multiply(%305, %306) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %308 = cast(%99, dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %309 = strided_slice(%308, begin=[0, 0, 0, 0], end=[1, 7, 4, 4], strides=[1], axes=None) /* ty=Tensor[(1, 7, 4, 4), float32] */;
  %310 = tile(%307, reps=[1, 7, 1, 1]) /* ty=Tensor[(1, 2352, 4, 4), float32] */;
  %311 = reshape(%309, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 7, 4, 4), float32] */;
  %312 = reshape(%310, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(2352, 1, 4, 4), float32] */;
  %313 = nn.conv2d(%311, %312, padding=[0, 0, 0, 0], groups=7) /* ty=Tensor[(1, 2352, 1, 1), float32] */;
  %314 = reshape(%313, newshape=[1, 7, 336, 1, 1]) /* ty=Tensor[(1, 7, 336, 1, 1), float32] */;
  %315 = sum(%314, axis=[0]) /* ty=Tensor[(7, 336, 1, 1), float32] */;
  %316 = greater_equal(%98, -128 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %317 = less_equal(%98, 127 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %318 = cast(%v15_conv_0_weight, dtype="float32") /* ty=Tensor[(336, 56, 1, 1), float32] */;
  %319 = multiply(%316, %317) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %320 = nn.conv2d_transpose(%307, %318, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %321 = zeros(shape=[1, 56, 4, 4], dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %322 = where(%319, %320, %321) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %323 = reshape(%v14_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 56, 1, 1), float32] */;
  %324 = multiply(%322, %323) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %325 = cast(%97, dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %326 = strided_slice(%325, begin=[0, 0, 0, 0], end=[1, 48, 4, 4], strides=[1], axes=None) /* ty=Tensor[(1, 48, 4, 4), float32] */;
  %327 = tile(%324, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 2688, 4, 4), float32] */;
  %328 = reshape(%326, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 4, 4), float32] */;
  %329 = reshape(%327, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(2688, 1, 4, 4), float32] */;
  %330 = nn.conv2d(%328, %329, padding=[0, 0, 0, 0], groups=48) /* ty=Tensor[(1, 2688, 1, 1), float32] */;
  %331 = reshape(%330, newshape=[1, 48, 56, 1, 1]) /* ty=Tensor[(1, 48, 56, 1, 1), float32] */;
  %332 = sum(%331, axis=[0]) /* ty=Tensor[(48, 56, 1, 1), float32] */;
  %333 = greater_equal(%96, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %334 = less_equal(%96, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %335 = cast(%v14_conv_2_weight, dtype="float32") /* ty=Tensor[(56, 192, 1, 1), float32] */;
  %336 = multiply(%333, %334) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %337 = nn.conv2d_transpose(%324, %335, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %338 = zeros(shape=[1, 192, 4, 4], dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %339 = where(%336, %337, %338) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %340 = cast(%339, dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %341 = greater_equal(%94, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %342 = less_equal(%94, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %343 = cast(%v14_conv_1_weight, dtype="float32") /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %344 = nn.conv2d_transpose(%339, %343, channels=192, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %345 = abs(%344) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %346 = max(%345, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), float32] */;
  %347 = divide(%346, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 8, 8), float32] */;
  %348 = divide(%344, %347) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %349 = multiply(%341, %342) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %350 = cast(%348, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %351 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %352 = where(%349, %350, %351) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %353 = cast(%352, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %354 = tile(%352, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 8, 8), int8] */;
  %355 = reshape(%93, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %356 = reshape(%354, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 8, 8), int8] */;
  %357 = nn.conv2d(%355, %356, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %358 = reshape(%357, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), int32] */;
  %359 = sum(%358, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %360 = transpose(%359, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %361 = abs(%360) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %362 = max(%361, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %363 = divide(%362, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %364 = divide(%360, %363) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %365 = greater_equal(%90, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %366 = less_equal(%90, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %367 = greater_equal(%92, meta[relay.Constant][4] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %368 = less_equal(%92, meta[relay.Constant][5] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %369 = nn.conv2d_transpose(%352, %v14_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %370 = abs(%369) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %371 = max(%370, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %372 = divide(%371, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %373 = divide(%369, %372) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %374 = multiply(%367, %368) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %375 = cast(%373, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %376 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %377 = where(%374, %375, %376) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %378 = cast(%377, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %379 = reshape(%v13_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %380 = divide(%378, %379) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %381 = reshape(%v13_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %382 = multiply(%380, %381) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %383 = multiply(%365, %366) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %384 = cast(%382, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %385 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %386 = where(%383, %384, %385) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %387 = cast(%386, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %388 = greater_equal(%88, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %389 = less_equal(%88, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %390 = nn.conv2d_transpose(%386, %v13_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %391 = abs(%390) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %392 = max(%391, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %393 = divide(%392, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %394 = divide(%390, %393) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %395 = multiply(%388, %389) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %396 = cast(%394, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %397 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %398 = where(%395, %396, %397) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %399 = cast(%398, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %400 = greater_equal(%86, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %401 = less_equal(%86, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %402 = nn.conv2d_transpose(%398, %v13_conv_1_weight, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %403 = abs(%402) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %404 = max(%403, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %405 = divide(%404, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %406 = divide(%402, %405) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %407 = multiply(%400, %401) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %408 = cast(%406, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %409 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %410 = where(%407, %408, %409) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %411 = cast(%410, dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %412 = reshape(%v13_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %413 = multiply(%411, %412) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %414 = cast(%85, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %415 = strided_slice(%414, begin=[0, 0, 0, 0], end=[1, 16, 8, 8], strides=[1], axes=None) /* ty=Tensor[(1, 16, 8, 8), float32] */;
  %416 = tile(%413, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 3072, 8, 8), float32] */;
  %417 = reshape(%415, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 8, 8), float32] */;
  %418 = reshape(%416, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3072, 1, 8, 8), float32] */;
  %419 = nn.conv2d(%417, %418, padding=[0, 0, 0, 0], groups=16) /* ty=Tensor[(1, 3072, 1, 1), float32] */;
  %420 = reshape(%419, newshape=[1, 16, 192, 1, 1]) /* ty=Tensor[(1, 16, 192, 1, 1), float32] */;
  %421 = sum(%420, axis=[0]) /* ty=Tensor[(16, 192, 1, 1), float32] */;
  %422 = greater_equal(%82, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %423 = less_equal(%82, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %424 = greater_equal(%84, meta[relay.Constant][6] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %425 = less_equal(%84, meta[relay.Constant][7] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %426 = cast(%v13_conv_0_weight, dtype="float32") /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %427 = multiply(%424, %425) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %428 = nn.conv2d_transpose(%413, %426, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %429 = zeros(shape=[1, 32, 8, 8], dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %430 = where(%427, %428, %429) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %431 = reshape(%v12_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %432 = divide(%430, %431) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %433 = reshape(%v12_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %434 = multiply(%422, %423) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %435 = multiply(%432, %433) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %436 = zeros(shape=[1, 32, 8, 8], dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %437 = where(%434, %435, %436) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %438 = cast(%437, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %439 = greater_equal(%80, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %440 = less_equal(%80, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %441 = cast(%v12_conv_2_weight, dtype="float32") /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %442 = nn.conv2d_transpose(%437, %441, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %443 = abs(%442) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %444 = max(%443, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), float32] */;
  %445 = divide(%444, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 8, 8), float32] */;
  %446 = divide(%442, %445) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %447 = multiply(%439, %440) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %448 = cast(%446, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %449 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %450 = where(%447, %448, %449) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %451 = cast(%450, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %452 = greater_equal(%78, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %453 = less_equal(%78, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %454 = nn.conv2d_transpose(%450, %v12_conv_1_weight, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %455 = abs(%454) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %456 = max(%455, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %457 = divide(%456, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %458 = divide(%454, %457) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %459 = multiply(%452, %453) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %460 = cast(%458, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %461 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %462 = where(%459, %460, %461) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %463 = cast(%462, dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %464 = reshape(%v12_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %465 = multiply(%463, %464) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %466 = cast(%77, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %467 = strided_slice(%466, begin=[0, 0, 0, 0], end=[1, 16, 8, 8], strides=[1], axes=None) /* ty=Tensor[(1, 16, 8, 8), float32] */;
  %468 = tile(%465, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 3072, 8, 8), float32] */;
  %469 = reshape(%467, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 8, 8), float32] */;
  %470 = reshape(%468, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3072, 1, 8, 8), float32] */;
  %471 = nn.conv2d(%469, %470, padding=[0, 0, 0, 0], groups=16) /* ty=Tensor[(1, 3072, 1, 1), float32] */;
  %472 = reshape(%471, newshape=[1, 16, 192, 1, 1]) /* ty=Tensor[(1, 16, 192, 1, 1), float32] */;
  %473 = sum(%472, axis=[0]) /* ty=Tensor[(16, 192, 1, 1), float32] */;
  %474 = greater_equal(%76, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %475 = less_equal(%76, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %476 = cast(%v12_conv_0_weight, dtype="float32") /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %477 = multiply(%474, %475) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %478 = nn.conv2d_transpose(%465, %476, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %479 = zeros(shape=[1, 32, 8, 8], dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %480 = where(%477, %478, %479) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %481 = reshape(%v11_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %482 = multiply(%480, %481) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %483 = cast(%75, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %484 = strided_slice(%483, begin=[0, 0, 0, 0], end=[1, 18, 8, 8], strides=[1], axes=None) /* ty=Tensor[(1, 18, 8, 8), float32] */;
  %485 = tile(%482, reps=[1, 18, 1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %486 = reshape(%484, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 18, 8, 8), float32] */;
  %487 = reshape(%485, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(576, 1, 8, 8), float32] */;
  %488 = nn.conv2d(%486, %487, padding=[0, 0, 0, 0], groups=18) /* ty=Tensor[(1, 576, 1, 1), float32] */;
  %489 = reshape(%488, newshape=[1, 18, 32, 1, 1]) /* ty=Tensor[(1, 18, 32, 1, 1), float32] */;
  %490 = sum(%489, axis=[0]) /* ty=Tensor[(18, 32, 1, 1), float32] */;
  %491 = greater_equal(%74, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %492 = less_equal(%74, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %493 = cast(%v11_conv_2_weight, dtype="float32") /* ty=Tensor[(32, 144, 1, 1), float32] */;
  %494 = multiply(%491, %492) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %495 = nn.conv2d_transpose(%482, %493, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %496 = zeros(shape=[1, 144, 8, 8], dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %497 = where(%494, %495, %496) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %498 = cast(%497, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %499 = nn.cross_entropy_with_logits(%127, %label) /* ty=float32 */;
  %500 = sum(%141, axis=[1], exclude=True) /* ty=Tensor[(10), int32] */;
  %501 = cast(%153, dtype="int8") /* ty=Tensor[(10, 112, 1, 1), int8] */;
  %502 = sum(%170, axis=[1], exclude=True) /* ty=Tensor[(112), int32] */;
  %503 = sum(%183, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %504 = sum(%195, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %505 = cast(%206, dtype="int8") /* ty=Tensor[(336, 56, 1, 1), int8] */;
  %506 = sum(%229, axis=[1], exclude=True) /* ty=Tensor[(56), int32] */;
  %507 = sum(%241, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %508 = sum(%255, axis=[1], exclude=True) /* ty=Tensor[(336), float32] */;
  %509 = transpose(%263, axes=[1, 0, 2, 3]) /* ty=Tensor[(336, 7, 1, 1), float32] */;
  %510 = sum(%280, axis=[1], exclude=True) /* ty=Tensor[(56), int32] */;
  %511 = sum(%293, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %512 = sum(%307, axis=[1], exclude=True) /* ty=Tensor[(336), float32] */;
  %513 = transpose(%315, axes=[1, 0, 2, 3]) /* ty=Tensor[(336, 7, 1, 1), float32] */;
  %514 = sum(%324, axis=[1], exclude=True) /* ty=Tensor[(56), float32] */;
  %515 = transpose(%332, axes=[1, 0, 2, 3]) /* ty=Tensor[(56, 48, 1, 1), float32] */;
  %516 = sum(%340, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %517 = sum(%353, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %518 = cast(%364, dtype="int8") /* ty=Tensor[(192, 32, 1, 1), int8] */;
  %519 = sum(%387, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %520 = sum(%399, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %521 = sum(%413, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %522 = transpose(%421, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 16, 1, 1), float32] */;
  %523 = sum(%438, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %524 = sum(%451, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %525 = sum(%465, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %526 = transpose(%473, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 16, 1, 1), float32] */;
  %527 = sum(%482, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %528 = transpose(%490, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 18, 1, 1), float32] */;
  %529 = sum(%498, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  (%499, %500, %501, %502, %503, %504, %505, %506, %507, %508, %509, %510, %511, %512, %513, %514, %515, %516, %517, %518, %519, %520, %521, %522, %523, %524, %525, %526, %527, %528, %529)
}

