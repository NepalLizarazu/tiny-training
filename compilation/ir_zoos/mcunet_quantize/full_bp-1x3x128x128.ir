def @main(%input: Tensor[(1, 3, 128, 128), int8], %v0_weight: Tensor[(16, 3, 3, 3), int8], %v0_bias: Tensor[(16), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(16), float32], %v1_conv_0_weight: Tensor[(16, 1, 3, 3), int8], %v1_conv_0_bias: Tensor[(16), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(16), float32], %v1_conv_1_weight: Tensor[(8, 16, 1, 1), int8], %v1_conv_1_bias: Tensor[(8), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(8), float32], %v2_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v2_conv_0_bias: Tensor[(48), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(48), float32], %v2_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v2_conv_1_bias: Tensor[(48), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(48), float32], %v2_conv_2_weight: Tensor[(8, 48, 1, 1), int8], %v2_conv_2_bias: Tensor[(8), int32], %v2_conv_2_zero_x: Tensor[(1), int8], %v2_conv_2_zero_y: Tensor[(1), int8], %v2_conv_2_scale: Tensor[(8), float32], %v3_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v3_conv_0_bias: Tensor[(48), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(48), float32], %v3_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v3_conv_1_bias: Tensor[(48), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(48), float32], %v3_conv_2_weight: Tensor[(8, 48, 1, 1), int8], %v3_conv_2_bias: Tensor[(8), int32], %v3_conv_2_zero_x: Tensor[(1), int8], %v3_conv_2_zero_y: Tensor[(1), int8], %v3_conv_2_scale: Tensor[(8), float32], %v3_qadd_zero_x1: Tensor[(1), int8], %v3_qadd_zero_x2: Tensor[(1), int8], %v3_qadd_scale_x1: Tensor[(1), float32], %v3_qadd_scale_x2: Tensor[(1), float32], %v3_qadd_zero_y: Tensor[(1), int8], %v3_qadd_scale_y: Tensor[(1), float32], %v4_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v4_conv_0_bias: Tensor[(48), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(48), float32], %v4_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v4_conv_1_bias: Tensor[(48), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(48), float32], %v4_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v4_conv_2_bias: Tensor[(16), int32], %v4_conv_2_zero_x: Tensor[(1), int8], %v4_conv_2_zero_y: Tensor[(1), int8], %v4_conv_2_scale: Tensor[(16), float32], %v5_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v5_conv_0_bias: Tensor[(96), int32], %v5_conv_0_zero_x: Tensor[(1), int8], %v5_conv_0_zero_y: Tensor[(1), int8], %v5_conv_0_scale: Tensor[(96), float32], %v5_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v5_conv_1_bias: Tensor[(96), int32], %v5_conv_1_zero_x: Tensor[(1), int8], %v5_conv_1_zero_y: Tensor[(1), int8], %v5_conv_1_scale: Tensor[(96), float32], %v5_conv_2_weight: Tensor[(16, 96, 1, 1), int8], %v5_conv_2_bias: Tensor[(16), int32], %v5_conv_2_zero_x: Tensor[(1), int8], %v5_conv_2_zero_y: Tensor[(1), int8], %v5_conv_2_scale: Tensor[(16), float32], %v5_qadd_zero_x1: Tensor[(1), int8], %v5_qadd_zero_x2: Tensor[(1), int8], %v5_qadd_scale_x1: Tensor[(1), float32], %v5_qadd_scale_x2: Tensor[(1), float32], %v5_qadd_zero_y: Tensor[(1), int8], %v5_qadd_scale_y: Tensor[(1), float32], %v6_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v6_conv_0_bias: Tensor[(96), int32], %v6_conv_0_zero_x: Tensor[(1), int8], %v6_conv_0_zero_y: Tensor[(1), int8], %v6_conv_0_scale: Tensor[(96), float32], %v6_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v6_conv_1_bias: Tensor[(96), int32], %v6_conv_1_zero_x: Tensor[(1), int8], %v6_conv_1_zero_y: Tensor[(1), int8], %v6_conv_1_scale: Tensor[(96), float32], %v6_conv_2_weight: Tensor[(16, 96, 1, 1), int8], %v6_conv_2_bias: Tensor[(16), int32], %v6_conv_2_zero_x: Tensor[(1), int8], %v6_conv_2_zero_y: Tensor[(1), int8], %v6_conv_2_scale: Tensor[(16), float32], %v6_qadd_zero_x1: Tensor[(1), int8], %v6_qadd_zero_x2: Tensor[(1), int8], %v6_qadd_scale_x1: Tensor[(1), float32], %v6_qadd_scale_x2: Tensor[(1), float32], %v6_qadd_zero_y: Tensor[(1), int8], %v6_qadd_scale_y: Tensor[(1), float32], %v7_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v7_conv_0_bias: Tensor[(96), int32], %v7_conv_0_zero_x: Tensor[(1), int8], %v7_conv_0_zero_y: Tensor[(1), int8], %v7_conv_0_scale: Tensor[(96), float32], %v7_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v7_conv_1_bias: Tensor[(96), int32], %v7_conv_1_zero_x: Tensor[(1), int8], %v7_conv_1_zero_y: Tensor[(1), int8], %v7_conv_1_scale: Tensor[(96), float32], %v7_conv_2_weight: Tensor[(24, 96, 1, 1), int8], %v7_conv_2_bias: Tensor[(24), int32], %v7_conv_2_zero_x: Tensor[(1), int8], %v7_conv_2_zero_y: Tensor[(1), int8], %v7_conv_2_scale: Tensor[(24), float32], %v8_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v8_conv_0_bias: Tensor[(144), int32], %v8_conv_0_zero_x: Tensor[(1), int8], %v8_conv_0_zero_y: Tensor[(1), int8], %v8_conv_0_scale: Tensor[(144), float32], %v8_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v8_conv_1_bias: Tensor[(144), int32], %v8_conv_1_zero_x: Tensor[(1), int8], %v8_conv_1_zero_y: Tensor[(1), int8], %v8_conv_1_scale: Tensor[(144), float32], %v8_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v8_conv_2_bias: Tensor[(24), int32], %v8_conv_2_zero_x: Tensor[(1), int8], %v8_conv_2_zero_y: Tensor[(1), int8], %v8_conv_2_scale: Tensor[(24), float32], %v8_qadd_zero_x1: Tensor[(1), int8], %v8_qadd_zero_x2: Tensor[(1), int8], %v8_qadd_scale_x1: Tensor[(1), float32], %v8_qadd_scale_x2: Tensor[(1), float32], %v8_qadd_zero_y: Tensor[(1), int8], %v8_qadd_scale_y: Tensor[(1), float32], %v9_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v9_conv_0_bias: Tensor[(144), int32], %v9_conv_0_zero_x: Tensor[(1), int8], %v9_conv_0_zero_y: Tensor[(1), int8], %v9_conv_0_scale: Tensor[(144), float32], %v9_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v9_conv_1_bias: Tensor[(144), int32], %v9_conv_1_zero_x: Tensor[(1), int8], %v9_conv_1_zero_y: Tensor[(1), int8], %v9_conv_1_scale: Tensor[(144), float32], %v9_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v9_conv_2_bias: Tensor[(24), int32], %v9_conv_2_zero_x: Tensor[(1), int8], %v9_conv_2_zero_y: Tensor[(1), int8], %v9_conv_2_scale: Tensor[(24), float32], %v9_qadd_zero_x1: Tensor[(1), int8], %v9_qadd_zero_x2: Tensor[(1), int8], %v9_qadd_scale_x1: Tensor[(1), float32], %v9_qadd_scale_x2: Tensor[(1), float32], %v9_qadd_zero_y: Tensor[(1), int8], %v9_qadd_scale_y: Tensor[(1), float32], %v10_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v10_conv_0_bias: Tensor[(144), int32], %v10_conv_0_zero_x: Tensor[(1), int8], %v10_conv_0_zero_y: Tensor[(1), int8], %v10_conv_0_scale: Tensor[(144), float32], %v10_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v10_conv_1_bias: Tensor[(144), int32], %v10_conv_1_zero_x: Tensor[(1), int8], %v10_conv_1_zero_y: Tensor[(1), int8], %v10_conv_1_scale: Tensor[(144), float32], %v10_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v10_conv_2_bias: Tensor[(24), int32], %v10_conv_2_zero_x: Tensor[(1), int8], %v10_conv_2_zero_y: Tensor[(1), int8], %v10_conv_2_scale: Tensor[(24), float32], %v10_qadd_zero_x1: Tensor[(1), int8], %v10_qadd_zero_x2: Tensor[(1), int8], %v10_qadd_scale_x1: Tensor[(1), float32], %v10_qadd_scale_x2: Tensor[(1), float32], %v10_qadd_zero_y: Tensor[(1), int8], %v10_qadd_scale_y: Tensor[(1), float32], %v11_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v11_conv_0_bias: Tensor[(144), int32], %v11_conv_0_zero_x: Tensor[(1), int8], %v11_conv_0_zero_y: Tensor[(1), int8], %v11_conv_0_scale: Tensor[(144), float32], %v11_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v11_conv_1_bias: Tensor[(144), int32], %v11_conv_1_zero_x: Tensor[(1), int8], %v11_conv_1_zero_y: Tensor[(1), int8], %v11_conv_1_scale: Tensor[(144), float32], %v11_conv_2_weight: Tensor[(32, 144, 1, 1), int8], %v11_conv_2_bias: Tensor[(32), int32], %v11_conv_2_zero_x: Tensor[(1), int8], %v11_conv_2_zero_y: Tensor[(1), int8], %v11_conv_2_scale: Tensor[(32), float32], %v12_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v12_conv_0_bias: Tensor[(192), int32], %v12_conv_0_zero_x: Tensor[(1), int8], %v12_conv_0_zero_y: Tensor[(1), int8], %v12_conv_0_scale: Tensor[(192), float32], %v12_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v12_conv_1_bias: Tensor[(192), int32], %v12_conv_1_zero_x: Tensor[(1), int8], %v12_conv_1_zero_y: Tensor[(1), int8], %v12_conv_1_scale: Tensor[(192), float32], %v12_conv_2_weight: Tensor[(32, 192, 1, 1), int8], %v12_conv_2_bias: Tensor[(32), int32], %v12_conv_2_zero_x: Tensor[(1), int8], %v12_conv_2_zero_y: Tensor[(1), int8], %v12_conv_2_scale: Tensor[(32), float32], %v12_qadd_zero_x1: Tensor[(1), int8], %v12_qadd_zero_x2: Tensor[(1), int8], %v12_qadd_scale_x1: Tensor[(1), float32], %v12_qadd_scale_x2: Tensor[(1), float32], %v12_qadd_zero_y: Tensor[(1), int8], %v12_qadd_scale_y: Tensor[(1), float32], %v13_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v13_conv_0_bias: Tensor[(192), int32], %v13_conv_0_zero_x: Tensor[(1), int8], %v13_conv_0_zero_y: Tensor[(1), int8], %v13_conv_0_scale: Tensor[(192), float32], %v13_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v13_conv_1_bias: Tensor[(192), int32], %v13_conv_1_zero_x: Tensor[(1), int8], %v13_conv_1_zero_y: Tensor[(1), int8], %v13_conv_1_scale: Tensor[(192), float32], %v13_conv_2_weight: Tensor[(32, 192, 1, 1), int8], %v13_conv_2_bias: Tensor[(32), int32], %v13_conv_2_zero_x: Tensor[(1), int8], %v13_conv_2_zero_y: Tensor[(1), int8], %v13_conv_2_scale: Tensor[(32), float32], %v13_qadd_zero_x1: Tensor[(1), int8], %v13_qadd_zero_x2: Tensor[(1), int8], %v13_qadd_scale_x1: Tensor[(1), float32], %v13_qadd_scale_x2: Tensor[(1), float32], %v13_qadd_zero_y: Tensor[(1), int8], %v13_qadd_scale_y: Tensor[(1), float32], %v14_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v14_conv_0_bias: Tensor[(192), int32], %v14_conv_0_zero_x: Tensor[(1), int8], %v14_conv_0_zero_y: Tensor[(1), int8], %v14_conv_0_scale: Tensor[(192), float32], %v14_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v14_conv_1_bias: Tensor[(192), int32], %v14_conv_1_zero_x: Tensor[(1), int8], %v14_conv_1_zero_y: Tensor[(1), int8], %v14_conv_1_scale: Tensor[(192), float32], %v14_conv_2_weight: Tensor[(56, 192, 1, 1), int8], %v14_conv_2_bias: Tensor[(56), int32], %v14_conv_2_zero_x: Tensor[(1), int8], %v14_conv_2_zero_y: Tensor[(1), int8], %v14_conv_2_scale: Tensor[(56), float32], %v15_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v15_conv_0_bias: Tensor[(336), int32], %v15_conv_0_zero_x: Tensor[(1), int8], %v15_conv_0_zero_y: Tensor[(1), int8], %v15_conv_0_scale: Tensor[(336), float32], %v15_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v15_conv_1_bias: Tensor[(336), int32], %v15_conv_1_zero_x: Tensor[(1), int8], %v15_conv_1_zero_y: Tensor[(1), int8], %v15_conv_1_scale: Tensor[(336), float32], %v15_conv_2_weight: Tensor[(56, 336, 1, 1), int8], %v15_conv_2_bias: Tensor[(56), int32], %v15_conv_2_zero_x: Tensor[(1), int8], %v15_conv_2_zero_y: Tensor[(1), int8], %v15_conv_2_scale: Tensor[(56), float32], %v15_qadd_zero_x1: Tensor[(1), int8], %v15_qadd_zero_x2: Tensor[(1), int8], %v15_qadd_scale_x1: Tensor[(1), float32], %v15_qadd_scale_x2: Tensor[(1), float32], %v15_qadd_zero_y: Tensor[(1), int8], %v15_qadd_scale_y: Tensor[(1), float32], %v16_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v16_conv_0_bias: Tensor[(336), int32], %v16_conv_0_zero_x: Tensor[(1), int8], %v16_conv_0_zero_y: Tensor[(1), int8], %v16_conv_0_scale: Tensor[(336), float32], %v16_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v16_conv_1_bias: Tensor[(336), int32], %v16_conv_1_zero_x: Tensor[(1), int8], %v16_conv_1_zero_y: Tensor[(1), int8], %v16_conv_1_scale: Tensor[(336), float32], %v16_conv_2_weight: Tensor[(56, 336, 1, 1), int8], %v16_conv_2_bias: Tensor[(56), int32], %v16_conv_2_zero_x: Tensor[(1), int8], %v16_conv_2_zero_y: Tensor[(1), int8], %v16_conv_2_scale: Tensor[(56), float32], %v16_qadd_zero_x1: Tensor[(1), int8], %v16_qadd_zero_x2: Tensor[(1), int8], %v16_qadd_scale_x1: Tensor[(1), float32], %v16_qadd_scale_x2: Tensor[(1), float32], %v16_qadd_zero_y: Tensor[(1), int8], %v16_qadd_scale_y: Tensor[(1), float32], %v17_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v17_conv_0_bias: Tensor[(336), int32], %v17_conv_0_zero_x: Tensor[(1), int8], %v17_conv_0_zero_y: Tensor[(1), int8], %v17_conv_0_scale: Tensor[(336), float32], %v17_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v17_conv_1_bias: Tensor[(336), int32], %v17_conv_1_zero_x: Tensor[(1), int8], %v17_conv_1_zero_y: Tensor[(1), int8], %v17_conv_1_scale: Tensor[(336), float32], %v17_conv_2_weight: Tensor[(112, 336, 1, 1), int8], %v17_conv_2_bias: Tensor[(112), int32], %v17_conv_2_zero_x: Tensor[(1), int8], %v17_conv_2_zero_y: Tensor[(1), int8], %v17_conv_2_scale: Tensor[(112), float32], %v18_weight: Tensor[(10, 112, 1, 1), int8], %v18_bias: Tensor[(10), int32], %v18_zero_x: Tensor[(1), int8], %v18_zero_y: Tensor[(1), int8], %v18_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), float32], Tensor[(10, 112, 1, 1), float32], Tensor[(112), float32], Tensor[(112, 336, 1, 1), float32], Tensor[(336), float32], Tensor[(336, 1, 3, 3), float32], Tensor[(336), float32], Tensor[(336, 56, 1, 1), float32], Tensor[(56), float32], Tensor[(56, 336, 1, 1), float32], Tensor[(336), float32], Tensor[(336, 1, 3, 3), float32], Tensor[(336), float32], Tensor[(336, 56, 1, 1), float32], Tensor[(56), float32], Tensor[(56, 336, 1, 1), float32], Tensor[(336), float32], Tensor[(336, 1, 3, 3), float32], Tensor[(336), float32], Tensor[(336, 56, 1, 1), float32], Tensor[(56), float32], Tensor[(56, 192, 1, 1), float32], Tensor[(192), float32], Tensor[(192, 1, 3, 3), float32], Tensor[(192), float32], Tensor[(192, 32, 1, 1), float32], Tensor[(32), float32], Tensor[(32, 192, 1, 1), float32], Tensor[(192), float32], Tensor[(192, 1, 3, 3), float32], Tensor[(192), float32], Tensor[(192, 32, 1, 1), float32], Tensor[(32), float32], Tensor[(32, 192, 1, 1), float32], Tensor[(192), float32], Tensor[(192, 1, 3, 3), float32], Tensor[(192), float32], Tensor[(192, 32, 1, 1), float32], Tensor[(32), float32], Tensor[(32, 144, 1, 1), float32], Tensor[(144), float32], Tensor[(144, 1, 3, 3), float32], Tensor[(144), float32], Tensor[(144, 24, 1, 1), float32], Tensor[(24), float32], Tensor[(24, 144, 1, 1), float32], Tensor[(144), float32], Tensor[(144, 1, 3, 3), float32], Tensor[(144), float32], Tensor[(144, 24, 1, 1), float32], Tensor[(24), float32], Tensor[(24, 144, 1, 1), float32], Tensor[(144), float32], Tensor[(144, 1, 3, 3), float32], Tensor[(144), float32], Tensor[(144, 24, 1, 1), float32], Tensor[(24), float32], Tensor[(24, 144, 1, 1), float32], Tensor[(144), float32], Tensor[(144, 1, 3, 3), float32], Tensor[(144), float32], Tensor[(144, 24, 1, 1), float32], Tensor[(24), float32], Tensor[(24, 96, 1, 1), float32], Tensor[(96), float32], Tensor[(96, 1, 3, 3), float32], Tensor[(96), float32], Tensor[(96, 16, 1, 1), float32], Tensor[(16), float32], Tensor[(16, 96, 1, 1), float32], Tensor[(96), float32], Tensor[(96, 1, 3, 3), float32], Tensor[(96), float32], Tensor[(96, 16, 1, 1), float32], Tensor[(16), float32], Tensor[(16, 96, 1, 1), float32], Tensor[(96), float32], Tensor[(96, 1, 3, 3), float32], Tensor[(96), float32], Tensor[(96, 16, 1, 1), float32], Tensor[(16), float32], Tensor[(16, 48, 1, 1), float32], Tensor[(48), float32], Tensor[(48, 1, 3, 3), float32], Tensor[(48), float32], Tensor[(48, 8, 1, 1), float32], Tensor[(8), float32], Tensor[(8, 48, 1, 1), float32], Tensor[(48), float32], Tensor[(48, 1, 3, 3), float32], Tensor[(48), float32], Tensor[(48, 8, 1, 1), float32], Tensor[(8), float32], Tensor[(8, 48, 1, 1), float32], Tensor[(48), float32], Tensor[(48, 1, 3, 3), float32], Tensor[(48), float32], Tensor[(48, 8, 1, 1), float32], Tensor[(8), float32], Tensor[(8, 16, 1, 1), float32], Tensor[(16), float32], Tensor[(16, 1, 3, 3), float32], Tensor[(16), float32], Tensor[(16, 3, 3, 3), float32]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1 = nn.mcutruncate(%0) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[1, 1, 1, 1], groups=16) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %3 = nn.mcutruncate(%2) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %5 = nn.mcutruncate(%4) /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 64, 64), int32] */;
  %7 = nn.mcutruncate(%6) /* ty=Tensor[(1, 48, 64, 64), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %9 = nn.mcutruncate(%8) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %10 = nn.mcuconv2d(%9, %v2_conv_2_weight, %v2_conv_2_bias, %v2_conv_2_zero_x, %v2_conv_2_zero_y, %v2_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %11 = nn.mcutruncate(%10) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %13 = nn.mcutruncate(%12) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %14 = nn.mcuconv2d(%13, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %15 = nn.mcutruncate(%14) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %16 = nn.mcuconv2d(%15, %v3_conv_2_weight, %v3_conv_2_bias, %v3_conv_2_zero_x, %v3_conv_2_zero_y, %v3_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %17 = nn.mcutruncate(%16) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %18 = nn.mcuadd(%11, %17, %v3_qadd_zero_x1, %v3_qadd_zero_x2, %v3_qadd_scale_x1, %v3_qadd_scale_x2, %v3_qadd_zero_y, %v3_qadd_scale_y, axis=0) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %19 = nn.mcutruncate(%18) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %20 = nn.mcuconv2d(%19, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %21 = nn.mcutruncate(%20) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %22 = nn.mcuconv2d(%21, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %23 = nn.mcutruncate(%22) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %24 = nn.mcuconv2d(%23, %v4_conv_2_weight, %v4_conv_2_bias, %v4_conv_2_zero_x, %v4_conv_2_zero_y, %v4_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %25 = nn.mcutruncate(%24) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %26 = nn.mcuconv2d(%25, %v5_conv_0_weight, %v5_conv_0_bias, %v5_conv_0_zero_x, %v5_conv_0_zero_y, %v5_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %27 = nn.mcutruncate(%26) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %28 = nn.mcuconv2d(%27, %v5_conv_1_weight, %v5_conv_1_bias, %v5_conv_1_zero_x, %v5_conv_1_zero_y, %v5_conv_1_scale, padding=[1, 1, 1, 1], groups=96) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %29 = nn.mcutruncate(%28) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %30 = nn.mcuconv2d(%29, %v5_conv_2_weight, %v5_conv_2_bias, %v5_conv_2_zero_x, %v5_conv_2_zero_y, %v5_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %31 = nn.mcutruncate(%30) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %32 = nn.mcuadd(%25, %31, %v5_qadd_zero_x1, %v5_qadd_zero_x2, %v5_qadd_scale_x1, %v5_qadd_scale_x2, %v5_qadd_zero_y, %v5_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %33 = nn.mcutruncate(%32) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %34 = nn.mcuconv2d(%33, %v6_conv_0_weight, %v6_conv_0_bias, %v6_conv_0_zero_x, %v6_conv_0_zero_y, %v6_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %35 = nn.mcutruncate(%34) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %36 = nn.mcuconv2d(%35, %v6_conv_1_weight, %v6_conv_1_bias, %v6_conv_1_zero_x, %v6_conv_1_zero_y, %v6_conv_1_scale, padding=[1, 1, 1, 1], groups=96) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %37 = nn.mcutruncate(%36) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %38 = nn.mcuconv2d(%37, %v6_conv_2_weight, %v6_conv_2_bias, %v6_conv_2_zero_x, %v6_conv_2_zero_y, %v6_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %39 = nn.mcutruncate(%38) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %40 = nn.mcuadd(%33, %39, %v6_qadd_zero_x1, %v6_qadd_zero_x2, %v6_qadd_scale_x1, %v6_qadd_scale_x2, %v6_qadd_zero_y, %v6_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %41 = nn.mcutruncate(%40) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %42 = nn.mcuconv2d(%41, %v7_conv_0_weight, %v7_conv_0_bias, %v7_conv_0_zero_x, %v7_conv_0_zero_y, %v7_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %43 = nn.mcutruncate(%42) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %44 = nn.mcuconv2d(%43, %v7_conv_1_weight, %v7_conv_1_bias, %v7_conv_1_zero_x, %v7_conv_1_zero_y, %v7_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %45 = nn.mcutruncate(%44) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %46 = nn.mcuconv2d(%45, %v7_conv_2_weight, %v7_conv_2_bias, %v7_conv_2_zero_x, %v7_conv_2_zero_y, %v7_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %47 = nn.mcutruncate(%46) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %48 = nn.mcuconv2d(%47, %v8_conv_0_weight, %v8_conv_0_bias, %v8_conv_0_zero_x, %v8_conv_0_zero_y, %v8_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %49 = nn.mcutruncate(%48) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %50 = nn.mcuconv2d(%49, %v8_conv_1_weight, %v8_conv_1_bias, %v8_conv_1_zero_x, %v8_conv_1_zero_y, %v8_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %51 = nn.mcutruncate(%50) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %52 = nn.mcuconv2d(%51, %v8_conv_2_weight, %v8_conv_2_bias, %v8_conv_2_zero_x, %v8_conv_2_zero_y, %v8_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %53 = nn.mcutruncate(%52) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %54 = nn.mcuadd(%47, %53, %v8_qadd_zero_x1, %v8_qadd_zero_x2, %v8_qadd_scale_x1, %v8_qadd_scale_x2, %v8_qadd_zero_y, %v8_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %55 = nn.mcutruncate(%54) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %56 = nn.mcuconv2d(%55, %v9_conv_0_weight, %v9_conv_0_bias, %v9_conv_0_zero_x, %v9_conv_0_zero_y, %v9_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %57 = nn.mcutruncate(%56) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %58 = nn.mcuconv2d(%57, %v9_conv_1_weight, %v9_conv_1_bias, %v9_conv_1_zero_x, %v9_conv_1_zero_y, %v9_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %59 = nn.mcutruncate(%58) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %60 = nn.mcuconv2d(%59, %v9_conv_2_weight, %v9_conv_2_bias, %v9_conv_2_zero_x, %v9_conv_2_zero_y, %v9_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %61 = nn.mcutruncate(%60) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %62 = nn.mcuadd(%55, %61, %v9_qadd_zero_x1, %v9_qadd_zero_x2, %v9_qadd_scale_x1, %v9_qadd_scale_x2, %v9_qadd_zero_y, %v9_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %63 = nn.mcutruncate(%62) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %64 = nn.mcuconv2d(%63, %v10_conv_0_weight, %v10_conv_0_bias, %v10_conv_0_zero_x, %v10_conv_0_zero_y, %v10_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %65 = nn.mcutruncate(%64) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %66 = nn.mcuconv2d(%65, %v10_conv_1_weight, %v10_conv_1_bias, %v10_conv_1_zero_x, %v10_conv_1_zero_y, %v10_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %67 = nn.mcutruncate(%66) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %68 = nn.mcuconv2d(%67, %v10_conv_2_weight, %v10_conv_2_bias, %v10_conv_2_zero_x, %v10_conv_2_zero_y, %v10_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %69 = nn.mcutruncate(%68) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %70 = nn.mcuadd(%63, %69, %v10_qadd_zero_x1, %v10_qadd_zero_x2, %v10_qadd_scale_x1, %v10_qadd_scale_x2, %v10_qadd_zero_y, %v10_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %71 = nn.mcutruncate(%70) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %72 = nn.mcuconv2d(%71, %v11_conv_0_weight, %v11_conv_0_bias, %v11_conv_0_zero_x, %v11_conv_0_zero_y, %v11_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %73 = nn.mcutruncate(%72) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %74 = nn.mcuconv2d(%73, %v11_conv_1_weight, %v11_conv_1_bias, %v11_conv_1_zero_x, %v11_conv_1_zero_y, %v11_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %75 = nn.mcutruncate(%74) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %76 = nn.mcuconv2d(%75, %v11_conv_2_weight, %v11_conv_2_bias, %v11_conv_2_zero_x, %v11_conv_2_zero_y, %v11_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %77 = nn.mcutruncate(%76) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %78 = nn.mcuconv2d(%77, %v12_conv_0_weight, %v12_conv_0_bias, %v12_conv_0_zero_x, %v12_conv_0_zero_y, %v12_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %79 = nn.mcutruncate(%78) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %80 = nn.mcuconv2d(%79, %v12_conv_1_weight, %v12_conv_1_bias, %v12_conv_1_zero_x, %v12_conv_1_zero_y, %v12_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %81 = nn.mcutruncate(%80) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %82 = nn.mcuconv2d(%81, %v12_conv_2_weight, %v12_conv_2_bias, %v12_conv_2_zero_x, %v12_conv_2_zero_y, %v12_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %83 = nn.mcutruncate(%82) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %84 = nn.mcuadd(%77, %83, %v12_qadd_zero_x1, %v12_qadd_zero_x2, %v12_qadd_scale_x1, %v12_qadd_scale_x2, %v12_qadd_zero_y, %v12_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %85 = nn.mcutruncate(%84) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %86 = nn.mcuconv2d(%85, %v13_conv_0_weight, %v13_conv_0_bias, %v13_conv_0_zero_x, %v13_conv_0_zero_y, %v13_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %87 = nn.mcutruncate(%86) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %88 = nn.mcuconv2d(%87, %v13_conv_1_weight, %v13_conv_1_bias, %v13_conv_1_zero_x, %v13_conv_1_zero_y, %v13_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %89 = nn.mcutruncate(%88) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %90 = nn.mcuconv2d(%89, %v13_conv_2_weight, %v13_conv_2_bias, %v13_conv_2_zero_x, %v13_conv_2_zero_y, %v13_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %91 = nn.mcutruncate(%90) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %92 = nn.mcuadd(%85, %91, %v13_qadd_zero_x1, %v13_qadd_zero_x2, %v13_qadd_scale_x1, %v13_qadd_scale_x2, %v13_qadd_zero_y, %v13_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %93 = nn.mcutruncate(%92) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %94 = nn.mcuconv2d(%93, %v14_conv_0_weight, %v14_conv_0_bias, %v14_conv_0_zero_x, %v14_conv_0_zero_y, %v14_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %95 = nn.mcutruncate(%94) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %96 = nn.mcuconv2d(%95, %v14_conv_1_weight, %v14_conv_1_bias, %v14_conv_1_zero_x, %v14_conv_1_zero_y, %v14_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %97 = nn.mcutruncate(%96) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %98 = nn.mcuconv2d(%97, %v14_conv_2_weight, %v14_conv_2_bias, %v14_conv_2_zero_x, %v14_conv_2_zero_y, %v14_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %99 = nn.mcutruncate(%98) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %100 = nn.mcuconv2d(%99, %v15_conv_0_weight, %v15_conv_0_bias, %v15_conv_0_zero_x, %v15_conv_0_zero_y, %v15_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %101 = nn.mcutruncate(%100) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %102 = nn.mcuconv2d(%101, %v15_conv_1_weight, %v15_conv_1_bias, %v15_conv_1_zero_x, %v15_conv_1_zero_y, %v15_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %103 = nn.mcutruncate(%102) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %104 = nn.mcuconv2d(%103, %v15_conv_2_weight, %v15_conv_2_bias, %v15_conv_2_zero_x, %v15_conv_2_zero_y, %v15_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %105 = nn.mcutruncate(%104) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %106 = nn.mcuadd(%99, %105, %v15_qadd_zero_x1, %v15_qadd_zero_x2, %v15_qadd_scale_x1, %v15_qadd_scale_x2, %v15_qadd_zero_y, %v15_qadd_scale_y, axis=0) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %107 = nn.mcutruncate(%106) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %108 = nn.mcuconv2d(%107, %v16_conv_0_weight, %v16_conv_0_bias, %v16_conv_0_zero_x, %v16_conv_0_zero_y, %v16_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %109 = nn.mcutruncate(%108) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %110 = nn.mcuconv2d(%109, %v16_conv_1_weight, %v16_conv_1_bias, %v16_conv_1_zero_x, %v16_conv_1_zero_y, %v16_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %111 = nn.mcutruncate(%110) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %112 = nn.mcuconv2d(%111, %v16_conv_2_weight, %v16_conv_2_bias, %v16_conv_2_zero_x, %v16_conv_2_zero_y, %v16_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %113 = nn.mcutruncate(%112) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %114 = nn.mcuadd(%107, %113, %v16_qadd_zero_x1, %v16_qadd_zero_x2, %v16_qadd_scale_x1, %v16_qadd_scale_x2, %v16_qadd_zero_y, %v16_qadd_scale_y, axis=0) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %115 = nn.mcutruncate(%114) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %116 = nn.mcuconv2d(%115, %v17_conv_0_weight, %v17_conv_0_bias, %v17_conv_0_zero_x, %v17_conv_0_zero_y, %v17_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %117 = nn.mcutruncate(%116) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %118 = nn.mcuconv2d(%117, %v17_conv_1_weight, %v17_conv_1_bias, %v17_conv_1_zero_x, %v17_conv_1_zero_y, %v17_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %119 = nn.mcutruncate(%118) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %120 = nn.mcuconv2d(%119, %v17_conv_2_weight, %v17_conv_2_bias, %v17_conv_2_zero_x, %v17_conv_2_zero_y, %v17_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 112, 4, 4), int32] */;
  %121 = nn.mcutruncate(%120) /* ty=Tensor[(1, 112, 4, 4), int8] */;
  %122 = mcumean(%121, axis=[2, 3], keepdims=True) /* ty=Tensor[(1, 112, 1, 1), int8] */;
  %123 = nn.mcuconv2d(%122, %v18_weight, %v18_bias, %v18_zero_x, %v18_zero_y, %v18_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %124 = nn.mcutruncate(%123) /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %125 = reshape(%124, newshape=[0, 0]) /* ty=Tensor[(1, 10), int8] */;
  %126 = cast(%125, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %127 = nn.log_softmax(%126) /* ty=Tensor[(1, 10), float32] */;
  %128 = cast(%123, dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %129 = greater_equal(%128, -128f /* ty=float32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %130 = less_equal(%128, 127f /* ty=float32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %131 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %132 = negative(%131) /* ty=float32 */;
  %133 = multiply(%132, %label) /* ty=Tensor[(1, 10), float32] */;
  %134 = sum(%133, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %135 = exp(%127) /* ty=Tensor[(1, 10), float32] */;
  %136 = multiply(%134, %135) /* ty=Tensor[(1, 10), float32] */;
  %137 = subtract(%133, %136) /* ty=Tensor[(1, 10), float32] */;
  %138 = multiply(%129, %130) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %139 = reshape(%137, newshape=[1, 10, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %140 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %141 = where(%138, %139, %140) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %142 = reshape(%v18_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %143 = multiply(%141, %142) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %144 = cast(%122, dtype="float32") /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %145 = tile(%143, reps=[1, 112, 1, 1]) /* ty=Tensor[(1, 1120, 1, 1), float32] */;
  %146 = reshape(%144, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %147 = reshape(%145, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1120, 1, 1, 1), float32] */;
  %148 = nn.conv2d(%146, %147, padding=[0, 0, 0, 0], groups=112) /* ty=Tensor[(1, 1120, 1, 1), float32] */;
  %149 = reshape(%148, newshape=[1, 112, 10, 1, 1]) /* ty=Tensor[(1, 112, 10, 1, 1), float32] */;
  %150 = sum(%149, axis=[0]) /* ty=Tensor[(112, 10, 1, 1), float32] */;
  %151 = cast(%120, dtype="float32") /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %152 = greater_equal(%151, -128f /* ty=float32 */) /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %153 = less_equal(%151, 127f /* ty=float32 */) /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %154 = cast(%v18_weight, dtype="float32") /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %155 = nn.conv2d_transpose(%143, %154, channels=112, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %156 = multiply(%155, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %157 = ones(shape=[1, 112, 4, 4], dtype="float32") /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %158 = multiply(%152, %153) /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %159 = multiply(%156, %157) /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %160 = zeros(shape=[1, 112, 4, 4], dtype="float32") /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %161 = where(%158, %159, %160) /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %162 = reshape(%v17_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %163 = multiply(%161, %162) /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %164 = cast(%119, dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %165 = tile(%163, reps=[1, 336, 1, 1]) /* ty=Tensor[(1, 37632, 4, 4), float32] */;
  %166 = reshape(%164, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %167 = reshape(%165, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(37632, 1, 4, 4), float32] */;
  %168 = nn.conv2d(%166, %167, padding=[0, 0, 0, 0], groups=336) /* ty=Tensor[(1, 37632, 1, 1), float32] */;
  %169 = reshape(%168, newshape=[1, 336, 112, 1, 1]) /* ty=Tensor[(1, 336, 112, 1, 1), float32] */;
  %170 = sum(%169, axis=[0]) /* ty=Tensor[(336, 112, 1, 1), float32] */;
  %171 = cast(%118, dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %172 = greater_equal(%171, -128f /* ty=float32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %173 = less_equal(%171, 127f /* ty=float32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %174 = cast(%v17_conv_2_weight, dtype="float32") /* ty=Tensor[(112, 336, 1, 1), float32] */;
  %175 = multiply(%172, %173) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %176 = nn.conv2d_transpose(%163, %174, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %177 = zeros(shape=[1, 336, 4, 4], dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %178 = where(%175, %176, %177) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %179 = reshape(%v17_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 336, 1, 1), float32] */;
  %180 = multiply(%178, %179) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %181 = cast(%117, dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %182 = tile(%180, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %183 = reshape(%181, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %184 = reshape(%182, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(336, 1, 4, 4), float32] */;
  %185 = nn.conv2d(%183, %184, padding=[1, 1, 1, 1], groups=336) /* ty=Tensor[(1, 336, 3, 3), float32] */;
  %186 = reshape(%185, newshape=[1, 1, 336, 3, 3]) /* ty=Tensor[(1, 1, 336, 3, 3), float32] */;
  %187 = sum(%186, axis=[0]) /* ty=Tensor[(1, 336, 3, 3), float32] */;
  %188 = cast(%116, dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %189 = greater_equal(%188, -128f /* ty=float32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %190 = less_equal(%188, 127f /* ty=float32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %191 = cast(%v17_conv_1_weight, dtype="float32") /* ty=Tensor[(336, 1, 3, 3), float32] */;
  %192 = multiply(%189, %190) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %193 = nn.conv2d_transpose(%180, %191, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %194 = zeros(shape=[1, 336, 4, 4], dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %195 = where(%192, %193, %194) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %196 = reshape(%v17_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 336, 1, 1), float32] */;
  %197 = multiply(%195, %196) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %198 = cast(%115, dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %199 = tile(%197, reps=[1, 56, 1, 1]) /* ty=Tensor[(1, 18816, 4, 4), float32] */;
  %200 = reshape(%198, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %201 = reshape(%199, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(18816, 1, 4, 4), float32] */;
  %202 = nn.conv2d(%200, %201, padding=[0, 0, 0, 0], groups=56) /* ty=Tensor[(1, 18816, 1, 1), float32] */;
  %203 = reshape(%202, newshape=[1, 56, 336, 1, 1]) /* ty=Tensor[(1, 56, 336, 1, 1), float32] */;
  %204 = sum(%203, axis=[0]) /* ty=Tensor[(56, 336, 1, 1), float32] */;
  %205 = cast(%112, dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %206 = greater_equal(%205, -128f /* ty=float32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %207 = less_equal(%205, 127f /* ty=float32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %208 = cast(%114, dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %209 = greater_equal(%208, -128f /* ty=float32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %210 = less_equal(%208, 127f /* ty=float32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %211 = cast(%v17_conv_0_weight, dtype="float32") /* ty=Tensor[(336, 56, 1, 1), float32] */;
  %212 = multiply(%209, %210) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %213 = nn.conv2d_transpose(%197, %211, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %214 = zeros(shape=[1, 56, 4, 4], dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %215 = where(%212, %213, %214) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %216 = reshape(%v16_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %217 = divide(%215, %216) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %218 = reshape(%v16_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %219 = multiply(%206, %207) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %220 = multiply(%217, %218) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %221 = zeros(shape=[1, 56, 4, 4], dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %222 = where(%219, %220, %221) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %223 = reshape(%v16_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 56, 1, 1), float32] */;
  %224 = multiply(%222, %223) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %225 = cast(%111, dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %226 = tile(%224, reps=[1, 336, 1, 1]) /* ty=Tensor[(1, 18816, 4, 4), float32] */;
  %227 = reshape(%225, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %228 = reshape(%226, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(18816, 1, 4, 4), float32] */;
  %229 = nn.conv2d(%227, %228, padding=[0, 0, 0, 0], groups=336) /* ty=Tensor[(1, 18816, 1, 1), float32] */;
  %230 = reshape(%229, newshape=[1, 336, 56, 1, 1]) /* ty=Tensor[(1, 336, 56, 1, 1), float32] */;
  %231 = sum(%230, axis=[0]) /* ty=Tensor[(336, 56, 1, 1), float32] */;
  %232 = cast(%110, dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %233 = greater_equal(%232, -128f /* ty=float32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %234 = less_equal(%232, 127f /* ty=float32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %235 = cast(%v16_conv_2_weight, dtype="float32") /* ty=Tensor[(56, 336, 1, 1), float32] */;
  %236 = multiply(%233, %234) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %237 = nn.conv2d_transpose(%224, %235, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %238 = zeros(shape=[1, 336, 4, 4], dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %239 = where(%236, %237, %238) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %240 = reshape(%v16_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 336, 1, 1), float32] */;
  %241 = multiply(%239, %240) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %242 = cast(%109, dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %243 = tile(%241, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %244 = reshape(%242, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %245 = reshape(%243, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(336, 1, 4, 4), float32] */;
  %246 = nn.conv2d(%244, %245, padding=[1, 1, 1, 1], groups=336) /* ty=Tensor[(1, 336, 3, 3), float32] */;
  %247 = reshape(%246, newshape=[1, 1, 336, 3, 3]) /* ty=Tensor[(1, 1, 336, 3, 3), float32] */;
  %248 = sum(%247, axis=[0]) /* ty=Tensor[(1, 336, 3, 3), float32] */;
  %249 = cast(%108, dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %250 = greater_equal(%249, -128f /* ty=float32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %251 = less_equal(%249, 127f /* ty=float32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %252 = cast(%v16_conv_1_weight, dtype="float32") /* ty=Tensor[(336, 1, 3, 3), float32] */;
  %253 = multiply(%250, %251) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %254 = nn.conv2d_transpose(%241, %252, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %255 = zeros(shape=[1, 336, 4, 4], dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %256 = where(%253, %254, %255) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %257 = reshape(%v16_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 336, 1, 1), float32] */;
  %258 = multiply(%256, %257) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %259 = cast(%107, dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %260 = tile(%258, reps=[1, 56, 1, 1]) /* ty=Tensor[(1, 18816, 4, 4), float32] */;
  %261 = reshape(%259, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %262 = reshape(%260, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(18816, 1, 4, 4), float32] */;
  %263 = nn.conv2d(%261, %262, padding=[0, 0, 0, 0], groups=56) /* ty=Tensor[(1, 18816, 1, 1), float32] */;
  %264 = reshape(%263, newshape=[1, 56, 336, 1, 1]) /* ty=Tensor[(1, 56, 336, 1, 1), float32] */;
  %265 = sum(%264, axis=[0]) /* ty=Tensor[(56, 336, 1, 1), float32] */;
  %266 = cast(%104, dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %267 = greater_equal(%266, -128f /* ty=float32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %268 = less_equal(%266, 127f /* ty=float32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %269 = cast(%106, dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %270 = greater_equal(%269, -128f /* ty=float32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %271 = less_equal(%269, 127f /* ty=float32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %272 = cast(%v16_conv_0_weight, dtype="float32") /* ty=Tensor[(336, 56, 1, 1), float32] */;
  %273 = multiply(%270, %271) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %274 = nn.conv2d_transpose(%258, %272, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %275 = zeros(shape=[1, 56, 4, 4], dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %276 = where(%273, %274, %275) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %277 = reshape(%v15_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %278 = divide(%276, %277) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %279 = reshape(%v15_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %280 = multiply(%267, %268) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %281 = multiply(%278, %279) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %282 = zeros(shape=[1, 56, 4, 4], dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %283 = where(%280, %281, %282) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %284 = reshape(%v15_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 56, 1, 1), float32] */;
  %285 = multiply(%283, %284) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %286 = cast(%103, dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %287 = tile(%285, reps=[1, 336, 1, 1]) /* ty=Tensor[(1, 18816, 4, 4), float32] */;
  %288 = reshape(%286, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %289 = reshape(%287, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(18816, 1, 4, 4), float32] */;
  %290 = nn.conv2d(%288, %289, padding=[0, 0, 0, 0], groups=336) /* ty=Tensor[(1, 18816, 1, 1), float32] */;
  %291 = reshape(%290, newshape=[1, 336, 56, 1, 1]) /* ty=Tensor[(1, 336, 56, 1, 1), float32] */;
  %292 = sum(%291, axis=[0]) /* ty=Tensor[(336, 56, 1, 1), float32] */;
  %293 = cast(%102, dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %294 = greater_equal(%293, -128f /* ty=float32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %295 = less_equal(%293, 127f /* ty=float32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %296 = cast(%v15_conv_2_weight, dtype="float32") /* ty=Tensor[(56, 336, 1, 1), float32] */;
  %297 = multiply(%294, %295) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %298 = nn.conv2d_transpose(%285, %296, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %299 = zeros(shape=[1, 336, 4, 4], dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %300 = where(%297, %298, %299) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %301 = reshape(%v15_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 336, 1, 1), float32] */;
  %302 = multiply(%300, %301) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %303 = cast(%101, dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %304 = tile(%302, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %305 = reshape(%303, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %306 = reshape(%304, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(336, 1, 4, 4), float32] */;
  %307 = nn.conv2d(%305, %306, padding=[1, 1, 1, 1], groups=336) /* ty=Tensor[(1, 336, 3, 3), float32] */;
  %308 = reshape(%307, newshape=[1, 1, 336, 3, 3]) /* ty=Tensor[(1, 1, 336, 3, 3), float32] */;
  %309 = sum(%308, axis=[0]) /* ty=Tensor[(1, 336, 3, 3), float32] */;
  %310 = cast(%100, dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %311 = greater_equal(%310, -128f /* ty=float32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %312 = less_equal(%310, 127f /* ty=float32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %313 = cast(%v15_conv_1_weight, dtype="float32") /* ty=Tensor[(336, 1, 3, 3), float32] */;
  %314 = multiply(%311, %312) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %315 = nn.conv2d_transpose(%302, %313, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %316 = zeros(shape=[1, 336, 4, 4], dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %317 = where(%314, %315, %316) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %318 = reshape(%v15_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 336, 1, 1), float32] */;
  %319 = multiply(%317, %318) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %320 = cast(%99, dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %321 = tile(%319, reps=[1, 56, 1, 1]) /* ty=Tensor[(1, 18816, 4, 4), float32] */;
  %322 = reshape(%320, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %323 = reshape(%321, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(18816, 1, 4, 4), float32] */;
  %324 = nn.conv2d(%322, %323, padding=[0, 0, 0, 0], groups=56) /* ty=Tensor[(1, 18816, 1, 1), float32] */;
  %325 = reshape(%324, newshape=[1, 56, 336, 1, 1]) /* ty=Tensor[(1, 56, 336, 1, 1), float32] */;
  %326 = sum(%325, axis=[0]) /* ty=Tensor[(56, 336, 1, 1), float32] */;
  %327 = cast(%98, dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %328 = greater_equal(%327, -128f /* ty=float32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %329 = less_equal(%327, 127f /* ty=float32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %330 = cast(%v15_conv_0_weight, dtype="float32") /* ty=Tensor[(336, 56, 1, 1), float32] */;
  %331 = multiply(%328, %329) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %332 = nn.conv2d_transpose(%319, %330, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %333 = zeros(shape=[1, 56, 4, 4], dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %334 = where(%331, %332, %333) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %335 = reshape(%v14_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 56, 1, 1), float32] */;
  %336 = multiply(%334, %335) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %337 = cast(%97, dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %338 = tile(%336, reps=[1, 192, 1, 1]) /* ty=Tensor[(1, 10752, 4, 4), float32] */;
  %339 = reshape(%337, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %340 = reshape(%338, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(10752, 1, 4, 4), float32] */;
  %341 = nn.conv2d(%339, %340, padding=[0, 0, 0, 0], groups=192) /* ty=Tensor[(1, 10752, 1, 1), float32] */;
  %342 = reshape(%341, newshape=[1, 192, 56, 1, 1]) /* ty=Tensor[(1, 192, 56, 1, 1), float32] */;
  %343 = sum(%342, axis=[0]) /* ty=Tensor[(192, 56, 1, 1), float32] */;
  %344 = cast(%96, dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %345 = greater_equal(%344, -128f /* ty=float32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %346 = less_equal(%344, 127f /* ty=float32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %347 = cast(%v14_conv_2_weight, dtype="float32") /* ty=Tensor[(56, 192, 1, 1), float32] */;
  %348 = multiply(%345, %346) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %349 = nn.conv2d_transpose(%336, %347, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %350 = zeros(shape=[1, 192, 4, 4], dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %351 = where(%348, %349, %350) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %352 = reshape(%v14_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %353 = multiply(%351, %352) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %354 = cast(%95, dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %355 = tile(%353, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %356 = reshape(%354, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %357 = reshape(%355, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(192, 1, 4, 4), float32] */;
  %358 = nn.conv2d(%356, %357, padding=[1, 1, 1, 1], dilation=[2, 2], groups=192) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %359 = reshape(%358, newshape=[1, 1, 192, 4, 4]) /* ty=Tensor[(1, 1, 192, 4, 4), float32] */;
  %360 = sum(%359, axis=[0]) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %361 = transpose(%360, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 1, 4, 4), float32] */;
  %362 = cast(%94, dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %363 = greater_equal(%362, -128f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %364 = less_equal(%362, 127f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %365 = cast(%v14_conv_1_weight, dtype="float32") /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %366 = multiply(%363, %364) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %367 = nn.conv2d_transpose(%353, %365, channels=192, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %368 = zeros(shape=[1, 192, 8, 8], dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %369 = where(%366, %367, %368) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %370 = reshape(%v14_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %371 = multiply(%369, %370) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %372 = cast(%93, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %373 = tile(%371, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 8, 8), float32] */;
  %374 = reshape(%372, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %375 = reshape(%373, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 8, 8), float32] */;
  %376 = nn.conv2d(%374, %375, padding=[0, 0, 0, 0], groups=32) /* ty=Tensor[(1, 6144, 1, 1), float32] */;
  %377 = reshape(%376, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), float32] */;
  %378 = sum(%377, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %379 = cast(%90, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %380 = greater_equal(%379, -128f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %381 = less_equal(%379, 127f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %382 = cast(%92, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %383 = greater_equal(%382, -128f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %384 = less_equal(%382, 127f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %385 = cast(%v14_conv_0_weight, dtype="float32") /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %386 = multiply(%383, %384) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %387 = nn.conv2d_transpose(%371, %385, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %388 = zeros(shape=[1, 32, 8, 8], dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %389 = where(%386, %387, %388) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %390 = reshape(%v13_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %391 = divide(%389, %390) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %392 = reshape(%v13_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %393 = multiply(%380, %381) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %394 = multiply(%391, %392) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %395 = zeros(shape=[1, 32, 8, 8], dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %396 = where(%393, %394, %395) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %397 = reshape(%v13_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %398 = multiply(%396, %397) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %399 = cast(%89, dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %400 = tile(%398, reps=[1, 192, 1, 1]) /* ty=Tensor[(1, 6144, 8, 8), float32] */;
  %401 = reshape(%399, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %402 = reshape(%400, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 8, 8), float32] */;
  %403 = nn.conv2d(%401, %402, padding=[0, 0, 0, 0], groups=192) /* ty=Tensor[(1, 6144, 1, 1), float32] */;
  %404 = reshape(%403, newshape=[1, 192, 32, 1, 1]) /* ty=Tensor[(1, 192, 32, 1, 1), float32] */;
  %405 = sum(%404, axis=[0]) /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %406 = cast(%88, dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %407 = greater_equal(%406, -128f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %408 = less_equal(%406, 127f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %409 = cast(%v13_conv_2_weight, dtype="float32") /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %410 = multiply(%407, %408) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %411 = nn.conv2d_transpose(%398, %409, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %412 = zeros(shape=[1, 192, 8, 8], dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %413 = where(%410, %411, %412) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %414 = reshape(%v13_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %415 = multiply(%413, %414) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %416 = cast(%87, dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %417 = tile(%415, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %418 = reshape(%416, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %419 = reshape(%417, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(192, 1, 8, 8), float32] */;
  %420 = nn.conv2d(%418, %419, padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 3, 3), float32] */;
  %421 = reshape(%420, newshape=[1, 1, 192, 3, 3]) /* ty=Tensor[(1, 1, 192, 3, 3), float32] */;
  %422 = sum(%421, axis=[0]) /* ty=Tensor[(1, 192, 3, 3), float32] */;
  %423 = cast(%86, dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %424 = greater_equal(%423, -128f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %425 = less_equal(%423, 127f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %426 = cast(%v13_conv_1_weight, dtype="float32") /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %427 = multiply(%424, %425) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %428 = nn.conv2d_transpose(%415, %426, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %429 = zeros(shape=[1, 192, 8, 8], dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %430 = where(%427, %428, %429) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %431 = reshape(%v13_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %432 = multiply(%430, %431) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %433 = cast(%85, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %434 = tile(%432, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 8, 8), float32] */;
  %435 = reshape(%433, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %436 = reshape(%434, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 8, 8), float32] */;
  %437 = nn.conv2d(%435, %436, padding=[0, 0, 0, 0], groups=32) /* ty=Tensor[(1, 6144, 1, 1), float32] */;
  %438 = reshape(%437, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), float32] */;
  %439 = sum(%438, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %440 = cast(%82, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %441 = greater_equal(%440, -128f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %442 = less_equal(%440, 127f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %443 = cast(%84, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %444 = greater_equal(%443, -128f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %445 = less_equal(%443, 127f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %446 = cast(%v13_conv_0_weight, dtype="float32") /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %447 = multiply(%444, %445) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %448 = nn.conv2d_transpose(%432, %446, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %449 = zeros(shape=[1, 32, 8, 8], dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %450 = where(%447, %448, %449) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %451 = reshape(%v12_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %452 = divide(%450, %451) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %453 = reshape(%v12_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %454 = multiply(%441, %442) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %455 = multiply(%452, %453) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %456 = zeros(shape=[1, 32, 8, 8], dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %457 = where(%454, %455, %456) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %458 = reshape(%v12_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %459 = multiply(%457, %458) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %460 = cast(%81, dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %461 = tile(%459, reps=[1, 192, 1, 1]) /* ty=Tensor[(1, 6144, 8, 8), float32] */;
  %462 = reshape(%460, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %463 = reshape(%461, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 8, 8), float32] */;
  %464 = nn.conv2d(%462, %463, padding=[0, 0, 0, 0], groups=192) /* ty=Tensor[(1, 6144, 1, 1), float32] */;
  %465 = reshape(%464, newshape=[1, 192, 32, 1, 1]) /* ty=Tensor[(1, 192, 32, 1, 1), float32] */;
  %466 = sum(%465, axis=[0]) /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %467 = cast(%80, dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %468 = greater_equal(%467, -128f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %469 = less_equal(%467, 127f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %470 = cast(%v12_conv_2_weight, dtype="float32") /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %471 = multiply(%468, %469) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %472 = nn.conv2d_transpose(%459, %470, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %473 = zeros(shape=[1, 192, 8, 8], dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %474 = where(%471, %472, %473) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %475 = reshape(%v12_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %476 = multiply(%474, %475) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %477 = cast(%79, dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %478 = tile(%476, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %479 = reshape(%477, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %480 = reshape(%478, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(192, 1, 8, 8), float32] */;
  %481 = nn.conv2d(%479, %480, padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 3, 3), float32] */;
  %482 = reshape(%481, newshape=[1, 1, 192, 3, 3]) /* ty=Tensor[(1, 1, 192, 3, 3), float32] */;
  %483 = sum(%482, axis=[0]) /* ty=Tensor[(1, 192, 3, 3), float32] */;
  %484 = cast(%78, dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %485 = greater_equal(%484, -128f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %486 = less_equal(%484, 127f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %487 = cast(%v12_conv_1_weight, dtype="float32") /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %488 = multiply(%485, %486) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %489 = nn.conv2d_transpose(%476, %487, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %490 = zeros(shape=[1, 192, 8, 8], dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %491 = where(%488, %489, %490) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %492 = reshape(%v12_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %493 = multiply(%491, %492) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %494 = cast(%77, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %495 = tile(%493, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 8, 8), float32] */;
  %496 = reshape(%494, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %497 = reshape(%495, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 8, 8), float32] */;
  %498 = nn.conv2d(%496, %497, padding=[0, 0, 0, 0], groups=32) /* ty=Tensor[(1, 6144, 1, 1), float32] */;
  %499 = reshape(%498, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), float32] */;
  %500 = sum(%499, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %501 = cast(%76, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %502 = greater_equal(%501, -128f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %503 = less_equal(%501, 127f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %504 = cast(%v12_conv_0_weight, dtype="float32") /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %505 = multiply(%502, %503) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %506 = nn.conv2d_transpose(%493, %504, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %507 = zeros(shape=[1, 32, 8, 8], dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %508 = where(%505, %506, %507) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %509 = reshape(%v11_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %510 = multiply(%508, %509) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %511 = cast(%75, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %512 = tile(%510, reps=[1, 144, 1, 1]) /* ty=Tensor[(1, 4608, 8, 8), float32] */;
  %513 = reshape(%511, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %514 = reshape(%512, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(4608, 1, 8, 8), float32] */;
  %515 = nn.conv2d(%513, %514, padding=[0, 0, 0, 0], groups=144) /* ty=Tensor[(1, 4608, 1, 1), float32] */;
  %516 = reshape(%515, newshape=[1, 144, 32, 1, 1]) /* ty=Tensor[(1, 144, 32, 1, 1), float32] */;
  %517 = sum(%516, axis=[0]) /* ty=Tensor[(144, 32, 1, 1), float32] */;
  %518 = cast(%74, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %519 = greater_equal(%518, -128f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %520 = less_equal(%518, 127f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %521 = cast(%v11_conv_2_weight, dtype="float32") /* ty=Tensor[(32, 144, 1, 1), float32] */;
  %522 = multiply(%519, %520) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %523 = nn.conv2d_transpose(%510, %521, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %524 = zeros(shape=[1, 144, 8, 8], dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %525 = where(%522, %523, %524) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %526 = reshape(%v11_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 144, 1, 1), float32] */;
  %527 = multiply(%525, %526) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %528 = cast(%73, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %529 = tile(%527, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %530 = reshape(%528, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %531 = reshape(%529, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(144, 1, 8, 8), float32] */;
  %532 = nn.conv2d(%530, %531, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 3, 3), float32] */;
  %533 = reshape(%532, newshape=[1, 1, 144, 3, 3]) /* ty=Tensor[(1, 1, 144, 3, 3), float32] */;
  %534 = sum(%533, axis=[0]) /* ty=Tensor[(1, 144, 3, 3), float32] */;
  %535 = cast(%72, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %536 = greater_equal(%535, -128f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %537 = less_equal(%535, 127f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %538 = cast(%v11_conv_1_weight, dtype="float32") /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %539 = multiply(%536, %537) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %540 = nn.conv2d_transpose(%527, %538, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %541 = zeros(shape=[1, 144, 8, 8], dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %542 = where(%539, %540, %541) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %543 = reshape(%v11_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 144, 1, 1), float32] */;
  %544 = multiply(%542, %543) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %545 = cast(%71, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %546 = tile(%544, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 3456, 8, 8), float32] */;
  %547 = reshape(%545, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %548 = reshape(%546, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 8, 8), float32] */;
  %549 = nn.conv2d(%547, %548, padding=[0, 0, 0, 0], groups=24) /* ty=Tensor[(1, 3456, 1, 1), float32] */;
  %550 = reshape(%549, newshape=[1, 24, 144, 1, 1]) /* ty=Tensor[(1, 24, 144, 1, 1), float32] */;
  %551 = sum(%550, axis=[0]) /* ty=Tensor[(24, 144, 1, 1), float32] */;
  %552 = cast(%68, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %553 = greater_equal(%552, -128f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %554 = less_equal(%552, 127f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %555 = cast(%70, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %556 = greater_equal(%555, -128f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %557 = less_equal(%555, 127f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %558 = cast(%v11_conv_0_weight, dtype="float32") /* ty=Tensor[(144, 24, 1, 1), float32] */;
  %559 = multiply(%556, %557) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %560 = nn.conv2d_transpose(%544, %558, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %561 = zeros(shape=[1, 24, 8, 8], dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %562 = where(%559, %560, %561) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %563 = reshape(%v10_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %564 = divide(%562, %563) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %565 = reshape(%v10_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %566 = multiply(%553, %554) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %567 = multiply(%564, %565) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %568 = zeros(shape=[1, 24, 8, 8], dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %569 = where(%566, %567, %568) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %570 = reshape(%v10_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 24, 1, 1), float32] */;
  %571 = multiply(%569, %570) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %572 = cast(%67, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %573 = tile(%571, reps=[1, 144, 1, 1]) /* ty=Tensor[(1, 3456, 8, 8), float32] */;
  %574 = reshape(%572, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %575 = reshape(%573, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 8, 8), float32] */;
  %576 = nn.conv2d(%574, %575, padding=[0, 0, 0, 0], groups=144) /* ty=Tensor[(1, 3456, 1, 1), float32] */;
  %577 = reshape(%576, newshape=[1, 144, 24, 1, 1]) /* ty=Tensor[(1, 144, 24, 1, 1), float32] */;
  %578 = sum(%577, axis=[0]) /* ty=Tensor[(144, 24, 1, 1), float32] */;
  %579 = cast(%66, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %580 = greater_equal(%579, -128f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %581 = less_equal(%579, 127f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %582 = cast(%v10_conv_2_weight, dtype="float32") /* ty=Tensor[(24, 144, 1, 1), float32] */;
  %583 = multiply(%580, %581) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %584 = nn.conv2d_transpose(%571, %582, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %585 = zeros(shape=[1, 144, 8, 8], dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %586 = where(%583, %584, %585) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %587 = reshape(%v10_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 144, 1, 1), float32] */;
  %588 = multiply(%586, %587) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %589 = cast(%65, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %590 = tile(%588, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %591 = reshape(%589, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %592 = reshape(%590, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(144, 1, 8, 8), float32] */;
  %593 = nn.conv2d(%591, %592, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 3, 3), float32] */;
  %594 = reshape(%593, newshape=[1, 1, 144, 3, 3]) /* ty=Tensor[(1, 1, 144, 3, 3), float32] */;
  %595 = sum(%594, axis=[0]) /* ty=Tensor[(1, 144, 3, 3), float32] */;
  %596 = cast(%64, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %597 = greater_equal(%596, -128f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %598 = less_equal(%596, 127f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %599 = cast(%v10_conv_1_weight, dtype="float32") /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %600 = multiply(%597, %598) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %601 = nn.conv2d_transpose(%588, %599, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %602 = zeros(shape=[1, 144, 8, 8], dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %603 = where(%600, %601, %602) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %604 = reshape(%v10_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 144, 1, 1), float32] */;
  %605 = multiply(%603, %604) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %606 = cast(%63, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %607 = tile(%605, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 3456, 8, 8), float32] */;
  %608 = reshape(%606, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %609 = reshape(%607, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 8, 8), float32] */;
  %610 = nn.conv2d(%608, %609, padding=[0, 0, 0, 0], groups=24) /* ty=Tensor[(1, 3456, 1, 1), float32] */;
  %611 = reshape(%610, newshape=[1, 24, 144, 1, 1]) /* ty=Tensor[(1, 24, 144, 1, 1), float32] */;
  %612 = sum(%611, axis=[0]) /* ty=Tensor[(24, 144, 1, 1), float32] */;
  %613 = cast(%60, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %614 = greater_equal(%613, -128f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %615 = less_equal(%613, 127f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %616 = cast(%62, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %617 = greater_equal(%616, -128f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %618 = less_equal(%616, 127f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %619 = cast(%v10_conv_0_weight, dtype="float32") /* ty=Tensor[(144, 24, 1, 1), float32] */;
  %620 = multiply(%617, %618) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %621 = nn.conv2d_transpose(%605, %619, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %622 = zeros(shape=[1, 24, 8, 8], dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %623 = where(%620, %621, %622) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %624 = reshape(%v9_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %625 = divide(%623, %624) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %626 = reshape(%v9_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %627 = multiply(%614, %615) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %628 = multiply(%625, %626) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %629 = zeros(shape=[1, 24, 8, 8], dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %630 = where(%627, %628, %629) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %631 = reshape(%v9_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 24, 1, 1), float32] */;
  %632 = multiply(%630, %631) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %633 = cast(%59, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %634 = tile(%632, reps=[1, 144, 1, 1]) /* ty=Tensor[(1, 3456, 8, 8), float32] */;
  %635 = reshape(%633, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %636 = reshape(%634, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 8, 8), float32] */;
  %637 = nn.conv2d(%635, %636, padding=[0, 0, 0, 0], groups=144) /* ty=Tensor[(1, 3456, 1, 1), float32] */;
  %638 = reshape(%637, newshape=[1, 144, 24, 1, 1]) /* ty=Tensor[(1, 144, 24, 1, 1), float32] */;
  %639 = sum(%638, axis=[0]) /* ty=Tensor[(144, 24, 1, 1), float32] */;
  %640 = cast(%58, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %641 = greater_equal(%640, -128f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %642 = less_equal(%640, 127f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %643 = cast(%v9_conv_2_weight, dtype="float32") /* ty=Tensor[(24, 144, 1, 1), float32] */;
  %644 = multiply(%641, %642) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %645 = nn.conv2d_transpose(%632, %643, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %646 = zeros(shape=[1, 144, 8, 8], dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %647 = where(%644, %645, %646) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %648 = reshape(%v9_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 144, 1, 1), float32] */;
  %649 = multiply(%647, %648) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %650 = cast(%57, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %651 = tile(%649, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %652 = reshape(%650, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %653 = reshape(%651, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(144, 1, 8, 8), float32] */;
  %654 = nn.conv2d(%652, %653, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 3, 3), float32] */;
  %655 = reshape(%654, newshape=[1, 1, 144, 3, 3]) /* ty=Tensor[(1, 1, 144, 3, 3), float32] */;
  %656 = sum(%655, axis=[0]) /* ty=Tensor[(1, 144, 3, 3), float32] */;
  %657 = cast(%56, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %658 = greater_equal(%657, -128f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %659 = less_equal(%657, 127f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %660 = cast(%v9_conv_1_weight, dtype="float32") /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %661 = multiply(%658, %659) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %662 = nn.conv2d_transpose(%649, %660, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %663 = zeros(shape=[1, 144, 8, 8], dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %664 = where(%661, %662, %663) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %665 = reshape(%v9_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 144, 1, 1), float32] */;
  %666 = multiply(%664, %665) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %667 = cast(%55, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %668 = tile(%666, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 3456, 8, 8), float32] */;
  %669 = reshape(%667, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %670 = reshape(%668, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 8, 8), float32] */;
  %671 = nn.conv2d(%669, %670, padding=[0, 0, 0, 0], groups=24) /* ty=Tensor[(1, 3456, 1, 1), float32] */;
  %672 = reshape(%671, newshape=[1, 24, 144, 1, 1]) /* ty=Tensor[(1, 24, 144, 1, 1), float32] */;
  %673 = sum(%672, axis=[0]) /* ty=Tensor[(24, 144, 1, 1), float32] */;
  %674 = cast(%52, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %675 = greater_equal(%674, -128f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %676 = less_equal(%674, 127f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %677 = cast(%54, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %678 = greater_equal(%677, -128f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %679 = less_equal(%677, 127f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %680 = cast(%v9_conv_0_weight, dtype="float32") /* ty=Tensor[(144, 24, 1, 1), float32] */;
  %681 = multiply(%678, %679) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %682 = nn.conv2d_transpose(%666, %680, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %683 = zeros(shape=[1, 24, 8, 8], dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %684 = where(%681, %682, %683) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %685 = reshape(%v8_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %686 = divide(%684, %685) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %687 = reshape(%v8_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %688 = multiply(%675, %676) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %689 = multiply(%686, %687) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %690 = zeros(shape=[1, 24, 8, 8], dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %691 = where(%688, %689, %690) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %692 = reshape(%v8_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 24, 1, 1), float32] */;
  %693 = multiply(%691, %692) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %694 = cast(%51, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %695 = tile(%693, reps=[1, 144, 1, 1]) /* ty=Tensor[(1, 3456, 8, 8), float32] */;
  %696 = reshape(%694, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %697 = reshape(%695, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 8, 8), float32] */;
  %698 = nn.conv2d(%696, %697, padding=[0, 0, 0, 0], groups=144) /* ty=Tensor[(1, 3456, 1, 1), float32] */;
  %699 = reshape(%698, newshape=[1, 144, 24, 1, 1]) /* ty=Tensor[(1, 144, 24, 1, 1), float32] */;
  %700 = sum(%699, axis=[0]) /* ty=Tensor[(144, 24, 1, 1), float32] */;
  %701 = cast(%50, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %702 = greater_equal(%701, -128f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %703 = less_equal(%701, 127f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %704 = cast(%v8_conv_2_weight, dtype="float32") /* ty=Tensor[(24, 144, 1, 1), float32] */;
  %705 = multiply(%702, %703) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %706 = nn.conv2d_transpose(%693, %704, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %707 = zeros(shape=[1, 144, 8, 8], dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %708 = where(%705, %706, %707) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %709 = reshape(%v8_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 144, 1, 1), float32] */;
  %710 = multiply(%708, %709) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %711 = cast(%49, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %712 = tile(%710, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %713 = reshape(%711, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %714 = reshape(%712, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(144, 1, 8, 8), float32] */;
  %715 = nn.conv2d(%713, %714, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 3, 3), float32] */;
  %716 = reshape(%715, newshape=[1, 1, 144, 3, 3]) /* ty=Tensor[(1, 1, 144, 3, 3), float32] */;
  %717 = sum(%716, axis=[0]) /* ty=Tensor[(1, 144, 3, 3), float32] */;
  %718 = cast(%48, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %719 = greater_equal(%718, -128f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %720 = less_equal(%718, 127f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %721 = cast(%v8_conv_1_weight, dtype="float32") /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %722 = multiply(%719, %720) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %723 = nn.conv2d_transpose(%710, %721, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %724 = zeros(shape=[1, 144, 8, 8], dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %725 = where(%722, %723, %724) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %726 = reshape(%v8_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 144, 1, 1), float32] */;
  %727 = multiply(%725, %726) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %728 = cast(%47, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %729 = tile(%727, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 3456, 8, 8), float32] */;
  %730 = reshape(%728, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %731 = reshape(%729, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 8, 8), float32] */;
  %732 = nn.conv2d(%730, %731, padding=[0, 0, 0, 0], groups=24) /* ty=Tensor[(1, 3456, 1, 1), float32] */;
  %733 = reshape(%732, newshape=[1, 24, 144, 1, 1]) /* ty=Tensor[(1, 24, 144, 1, 1), float32] */;
  %734 = sum(%733, axis=[0]) /* ty=Tensor[(24, 144, 1, 1), float32] */;
  %735 = cast(%46, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %736 = greater_equal(%735, -128f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %737 = less_equal(%735, 127f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %738 = cast(%v8_conv_0_weight, dtype="float32") /* ty=Tensor[(144, 24, 1, 1), float32] */;
  %739 = multiply(%736, %737) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %740 = nn.conv2d_transpose(%727, %738, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %741 = zeros(shape=[1, 24, 8, 8], dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %742 = where(%739, %740, %741) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %743 = reshape(%v7_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 24, 1, 1), float32] */;
  %744 = multiply(%742, %743) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %745 = cast(%45, dtype="float32") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %746 = tile(%744, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 2304, 8, 8), float32] */;
  %747 = reshape(%745, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %748 = reshape(%746, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(2304, 1, 8, 8), float32] */;
  %749 = nn.conv2d(%747, %748, padding=[0, 0, 0, 0], groups=96) /* ty=Tensor[(1, 2304, 1, 1), float32] */;
  %750 = reshape(%749, newshape=[1, 96, 24, 1, 1]) /* ty=Tensor[(1, 96, 24, 1, 1), float32] */;
  %751 = sum(%750, axis=[0]) /* ty=Tensor[(96, 24, 1, 1), float32] */;
  %752 = cast(%44, dtype="float32") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %753 = greater_equal(%752, -128f /* ty=float32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %754 = less_equal(%752, 127f /* ty=float32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %755 = cast(%v7_conv_2_weight, dtype="float32") /* ty=Tensor[(24, 96, 1, 1), float32] */;
  %756 = multiply(%753, %754) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %757 = nn.conv2d_transpose(%744, %755, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %758 = zeros(shape=[1, 96, 8, 8], dtype="float32") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %759 = where(%756, %757, %758) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %760 = reshape(%v7_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %761 = multiply(%759, %760) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %762 = cast(%43, dtype="float32") /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %763 = tile(%761, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %764 = reshape(%762, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %765 = reshape(%763, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(96, 1, 8, 8), float32] */;
  %766 = nn.conv2d(%764, %765, padding=[1, 1, 1, 1], dilation=[2, 2], groups=96) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %767 = reshape(%766, newshape=[1, 1, 96, 4, 4]) /* ty=Tensor[(1, 1, 96, 4, 4), float32] */;
  %768 = sum(%767, axis=[0]) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %769 = transpose(%768, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 1, 4, 4), float32] */;
  %770 = cast(%42, dtype="float32") /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %771 = greater_equal(%770, -128f /* ty=float32 */) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %772 = less_equal(%770, 127f /* ty=float32 */) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %773 = cast(%v7_conv_1_weight, dtype="float32") /* ty=Tensor[(96, 1, 3, 3), float32] */;
  %774 = multiply(%771, %772) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %775 = nn.conv2d_transpose(%761, %773, channels=96, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=96, kernel_layout="IOHW") /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %776 = zeros(shape=[1, 96, 16, 16], dtype="float32") /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %777 = where(%774, %775, %776) /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %778 = reshape(%v7_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %779 = multiply(%777, %778) /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %780 = cast(%41, dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %781 = tile(%779, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 1536, 16, 16), float32] */;
  %782 = reshape(%780, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %783 = reshape(%781, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1536, 1, 16, 16), float32] */;
  %784 = nn.conv2d(%782, %783, padding=[0, 0, 0, 0], groups=16) /* ty=Tensor[(1, 1536, 1, 1), float32] */;
  %785 = reshape(%784, newshape=[1, 16, 96, 1, 1]) /* ty=Tensor[(1, 16, 96, 1, 1), float32] */;
  %786 = sum(%785, axis=[0]) /* ty=Tensor[(16, 96, 1, 1), float32] */;
  %787 = cast(%38, dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %788 = greater_equal(%787, -128f /* ty=float32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %789 = less_equal(%787, 127f /* ty=float32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %790 = cast(%40, dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %791 = greater_equal(%790, -128f /* ty=float32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %792 = less_equal(%790, 127f /* ty=float32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %793 = cast(%v7_conv_0_weight, dtype="float32") /* ty=Tensor[(96, 16, 1, 1), float32] */;
  %794 = multiply(%791, %792) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %795 = nn.conv2d_transpose(%779, %793, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %796 = zeros(shape=[1, 16, 16, 16], dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %797 = where(%794, %795, %796) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %798 = reshape(%v6_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %799 = divide(%797, %798) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %800 = reshape(%v6_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %801 = multiply(%788, %789) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %802 = multiply(%799, %800) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %803 = zeros(shape=[1, 16, 16, 16], dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %804 = where(%801, %802, %803) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %805 = reshape(%v6_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 16, 1, 1), float32] */;
  %806 = multiply(%804, %805) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %807 = cast(%37, dtype="float32") /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %808 = tile(%806, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 1536, 16, 16), float32] */;
  %809 = reshape(%807, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %810 = reshape(%808, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1536, 1, 16, 16), float32] */;
  %811 = nn.conv2d(%809, %810, padding=[0, 0, 0, 0], groups=96) /* ty=Tensor[(1, 1536, 1, 1), float32] */;
  %812 = reshape(%811, newshape=[1, 96, 16, 1, 1]) /* ty=Tensor[(1, 96, 16, 1, 1), float32] */;
  %813 = sum(%812, axis=[0]) /* ty=Tensor[(96, 16, 1, 1), float32] */;
  %814 = cast(%36, dtype="float32") /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %815 = greater_equal(%814, -128f /* ty=float32 */) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %816 = less_equal(%814, 127f /* ty=float32 */) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %817 = cast(%v6_conv_2_weight, dtype="float32") /* ty=Tensor[(16, 96, 1, 1), float32] */;
  %818 = multiply(%815, %816) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %819 = nn.conv2d_transpose(%806, %817, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %820 = zeros(shape=[1, 96, 16, 16], dtype="float32") /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %821 = where(%818, %819, %820) /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %822 = reshape(%v6_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %823 = multiply(%821, %822) /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %824 = cast(%35, dtype="float32") /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %825 = tile(%823, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %826 = reshape(%824, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %827 = reshape(%825, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(96, 1, 16, 16), float32] */;
  %828 = nn.conv2d(%826, %827, padding=[1, 1, 1, 1], groups=96) /* ty=Tensor[(1, 96, 3, 3), float32] */;
  %829 = reshape(%828, newshape=[1, 1, 96, 3, 3]) /* ty=Tensor[(1, 1, 96, 3, 3), float32] */;
  %830 = sum(%829, axis=[0]) /* ty=Tensor[(1, 96, 3, 3), float32] */;
  %831 = cast(%34, dtype="float32") /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %832 = greater_equal(%831, -128f /* ty=float32 */) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %833 = less_equal(%831, 127f /* ty=float32 */) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %834 = cast(%v6_conv_1_weight, dtype="float32") /* ty=Tensor[(96, 1, 3, 3), float32] */;
  %835 = multiply(%832, %833) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %836 = nn.conv2d_transpose(%823, %834, channels=96, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=96, kernel_layout="IOHW") /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %837 = zeros(shape=[1, 96, 16, 16], dtype="float32") /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %838 = where(%835, %836, %837) /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %839 = reshape(%v6_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %840 = multiply(%838, %839) /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %841 = cast(%33, dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %842 = tile(%840, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 1536, 16, 16), float32] */;
  %843 = reshape(%841, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %844 = reshape(%842, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1536, 1, 16, 16), float32] */;
  %845 = nn.conv2d(%843, %844, padding=[0, 0, 0, 0], groups=16) /* ty=Tensor[(1, 1536, 1, 1), float32] */;
  %846 = reshape(%845, newshape=[1, 16, 96, 1, 1]) /* ty=Tensor[(1, 16, 96, 1, 1), float32] */;
  %847 = sum(%846, axis=[0]) /* ty=Tensor[(16, 96, 1, 1), float32] */;
  %848 = cast(%30, dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %849 = greater_equal(%848, -128f /* ty=float32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %850 = less_equal(%848, 127f /* ty=float32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %851 = cast(%32, dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %852 = greater_equal(%851, -128f /* ty=float32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %853 = less_equal(%851, 127f /* ty=float32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %854 = cast(%v6_conv_0_weight, dtype="float32") /* ty=Tensor[(96, 16, 1, 1), float32] */;
  %855 = multiply(%852, %853) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %856 = nn.conv2d_transpose(%840, %854, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %857 = zeros(shape=[1, 16, 16, 16], dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %858 = where(%855, %856, %857) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %859 = reshape(%v5_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %860 = divide(%858, %859) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %861 = reshape(%v5_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %862 = multiply(%849, %850) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %863 = multiply(%860, %861) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %864 = zeros(shape=[1, 16, 16, 16], dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %865 = where(%862, %863, %864) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %866 = reshape(%v5_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 16, 1, 1), float32] */;
  %867 = multiply(%865, %866) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %868 = cast(%29, dtype="float32") /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %869 = tile(%867, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 1536, 16, 16), float32] */;
  %870 = reshape(%868, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %871 = reshape(%869, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1536, 1, 16, 16), float32] */;
  %872 = nn.conv2d(%870, %871, padding=[0, 0, 0, 0], groups=96) /* ty=Tensor[(1, 1536, 1, 1), float32] */;
  %873 = reshape(%872, newshape=[1, 96, 16, 1, 1]) /* ty=Tensor[(1, 96, 16, 1, 1), float32] */;
  %874 = sum(%873, axis=[0]) /* ty=Tensor[(96, 16, 1, 1), float32] */;
  %875 = cast(%28, dtype="float32") /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %876 = greater_equal(%875, -128f /* ty=float32 */) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %877 = less_equal(%875, 127f /* ty=float32 */) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %878 = cast(%v5_conv_2_weight, dtype="float32") /* ty=Tensor[(16, 96, 1, 1), float32] */;
  %879 = multiply(%876, %877) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %880 = nn.conv2d_transpose(%867, %878, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %881 = zeros(shape=[1, 96, 16, 16], dtype="float32") /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %882 = where(%879, %880, %881) /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %883 = reshape(%v5_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %884 = multiply(%882, %883) /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %885 = cast(%27, dtype="float32") /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %886 = tile(%884, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %887 = reshape(%885, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %888 = reshape(%886, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(96, 1, 16, 16), float32] */;
  %889 = nn.conv2d(%887, %888, padding=[1, 1, 1, 1], groups=96) /* ty=Tensor[(1, 96, 3, 3), float32] */;
  %890 = reshape(%889, newshape=[1, 1, 96, 3, 3]) /* ty=Tensor[(1, 1, 96, 3, 3), float32] */;
  %891 = sum(%890, axis=[0]) /* ty=Tensor[(1, 96, 3, 3), float32] */;
  %892 = cast(%26, dtype="float32") /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %893 = greater_equal(%892, -128f /* ty=float32 */) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %894 = less_equal(%892, 127f /* ty=float32 */) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %895 = cast(%v5_conv_1_weight, dtype="float32") /* ty=Tensor[(96, 1, 3, 3), float32] */;
  %896 = multiply(%893, %894) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %897 = nn.conv2d_transpose(%884, %895, channels=96, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=96, kernel_layout="IOHW") /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %898 = zeros(shape=[1, 96, 16, 16], dtype="float32") /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %899 = where(%896, %897, %898) /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %900 = reshape(%v5_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %901 = multiply(%899, %900) /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %902 = cast(%25, dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %903 = tile(%901, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 1536, 16, 16), float32] */;
  %904 = reshape(%902, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %905 = reshape(%903, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1536, 1, 16, 16), float32] */;
  %906 = nn.conv2d(%904, %905, padding=[0, 0, 0, 0], groups=16) /* ty=Tensor[(1, 1536, 1, 1), float32] */;
  %907 = reshape(%906, newshape=[1, 16, 96, 1, 1]) /* ty=Tensor[(1, 16, 96, 1, 1), float32] */;
  %908 = sum(%907, axis=[0]) /* ty=Tensor[(16, 96, 1, 1), float32] */;
  %909 = cast(%24, dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %910 = greater_equal(%909, -128f /* ty=float32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %911 = less_equal(%909, 127f /* ty=float32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %912 = cast(%v5_conv_0_weight, dtype="float32") /* ty=Tensor[(96, 16, 1, 1), float32] */;
  %913 = multiply(%910, %911) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %914 = nn.conv2d_transpose(%901, %912, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %915 = zeros(shape=[1, 16, 16, 16], dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %916 = where(%913, %914, %915) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %917 = reshape(%v4_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 16, 1, 1), float32] */;
  %918 = multiply(%916, %917) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %919 = cast(%23, dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %920 = tile(%918, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 768, 16, 16), float32] */;
  %921 = reshape(%919, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %922 = reshape(%920, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 16, 16), float32] */;
  %923 = nn.conv2d(%921, %922, padding=[0, 0, 0, 0], groups=48) /* ty=Tensor[(1, 768, 1, 1), float32] */;
  %924 = reshape(%923, newshape=[1, 48, 16, 1, 1]) /* ty=Tensor[(1, 48, 16, 1, 1), float32] */;
  %925 = sum(%924, axis=[0]) /* ty=Tensor[(48, 16, 1, 1), float32] */;
  %926 = cast(%22, dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %927 = greater_equal(%926, -128f /* ty=float32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %928 = less_equal(%926, 127f /* ty=float32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %929 = cast(%v4_conv_2_weight, dtype="float32") /* ty=Tensor[(16, 48, 1, 1), float32] */;
  %930 = multiply(%927, %928) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %931 = nn.conv2d_transpose(%918, %929, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %932 = zeros(shape=[1, 48, 16, 16], dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %933 = where(%930, %931, %932) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %934 = reshape(%v4_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %935 = multiply(%933, %934) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %936 = cast(%21, dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %937 = tile(%935, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %938 = reshape(%936, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %939 = reshape(%937, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(48, 1, 16, 16), float32] */;
  %940 = nn.conv2d(%938, %939, padding=[1, 1, 1, 1], dilation=[2, 2], groups=48) /* ty=Tensor[(1, 48, 4, 4), float32] */;
  %941 = reshape(%940, newshape=[1, 1, 48, 4, 4]) /* ty=Tensor[(1, 1, 48, 4, 4), float32] */;
  %942 = sum(%941, axis=[0]) /* ty=Tensor[(1, 48, 4, 4), float32] */;
  %943 = transpose(%942, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 1, 4, 4), float32] */;
  %944 = cast(%20, dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %945 = greater_equal(%944, -128f /* ty=float32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %946 = less_equal(%944, 127f /* ty=float32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %947 = cast(%v4_conv_1_weight, dtype="float32") /* ty=Tensor[(48, 1, 3, 3), float32] */;
  %948 = multiply(%945, %946) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %949 = nn.conv2d_transpose(%935, %947, channels=48, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=48, kernel_layout="IOHW") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %950 = zeros(shape=[1, 48, 32, 32], dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %951 = where(%948, %949, %950) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %952 = reshape(%v4_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %953 = multiply(%951, %952) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %954 = cast(%19, dtype="float32") /* ty=Tensor[(1, 8, 32, 32), float32] */;
  %955 = tile(%953, reps=[1, 8, 1, 1]) /* ty=Tensor[(1, 384, 32, 32), float32] */;
  %956 = reshape(%954, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 8, 32, 32), float32] */;
  %957 = reshape(%955, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 32, 32), float32] */;
  %958 = nn.conv2d(%956, %957, padding=[0, 0, 0, 0], groups=8) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %959 = reshape(%958, newshape=[1, 8, 48, 1, 1]) /* ty=Tensor[(1, 8, 48, 1, 1), float32] */;
  %960 = sum(%959, axis=[0]) /* ty=Tensor[(8, 48, 1, 1), float32] */;
  %961 = cast(%16, dtype="float32") /* ty=Tensor[(1, 8, 32, 32), float32] */;
  %962 = greater_equal(%961, -128f /* ty=float32 */) /* ty=Tensor[(1, 8, 32, 32), bool] */;
  %963 = less_equal(%961, 127f /* ty=float32 */) /* ty=Tensor[(1, 8, 32, 32), bool] */;
  %964 = cast(%18, dtype="float32") /* ty=Tensor[(1, 8, 32, 32), float32] */;
  %965 = greater_equal(%964, -128f /* ty=float32 */) /* ty=Tensor[(1, 8, 32, 32), bool] */;
  %966 = less_equal(%964, 127f /* ty=float32 */) /* ty=Tensor[(1, 8, 32, 32), bool] */;
  %967 = cast(%v4_conv_0_weight, dtype="float32") /* ty=Tensor[(48, 8, 1, 1), float32] */;
  %968 = multiply(%965, %966) /* ty=Tensor[(1, 8, 32, 32), bool] */;
  %969 = nn.conv2d_transpose(%953, %967, channels=8, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 8, 32, 32), float32] */;
  %970 = zeros(shape=[1, 8, 32, 32], dtype="float32") /* ty=Tensor[(1, 8, 32, 32), float32] */;
  %971 = where(%968, %969, %970) /* ty=Tensor[(1, 8, 32, 32), float32] */;
  %972 = reshape(%v3_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %973 = divide(%971, %972) /* ty=Tensor[(1, 8, 32, 32), float32] */;
  %974 = reshape(%v3_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %975 = multiply(%962, %963) /* ty=Tensor[(1, 8, 32, 32), bool] */;
  %976 = multiply(%973, %974) /* ty=Tensor[(1, 8, 32, 32), float32] */;
  %977 = zeros(shape=[1, 8, 32, 32], dtype="float32") /* ty=Tensor[(1, 8, 32, 32), float32] */;
  %978 = where(%975, %976, %977) /* ty=Tensor[(1, 8, 32, 32), float32] */;
  %979 = reshape(%v3_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 8, 1, 1), float32] */;
  %980 = multiply(%978, %979) /* ty=Tensor[(1, 8, 32, 32), float32] */;
  %981 = cast(%15, dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %982 = tile(%980, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 384, 32, 32), float32] */;
  %983 = reshape(%981, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %984 = reshape(%982, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 32, 32), float32] */;
  %985 = nn.conv2d(%983, %984, padding=[0, 0, 0, 0], groups=48) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %986 = reshape(%985, newshape=[1, 48, 8, 1, 1]) /* ty=Tensor[(1, 48, 8, 1, 1), float32] */;
  %987 = sum(%986, axis=[0]) /* ty=Tensor[(48, 8, 1, 1), float32] */;
  %988 = cast(%14, dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %989 = greater_equal(%988, -128f /* ty=float32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %990 = less_equal(%988, 127f /* ty=float32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %991 = cast(%v3_conv_2_weight, dtype="float32") /* ty=Tensor[(8, 48, 1, 1), float32] */;
  %992 = multiply(%989, %990) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %993 = nn.conv2d_transpose(%980, %991, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %994 = zeros(shape=[1, 48, 32, 32], dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %995 = where(%992, %993, %994) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %996 = reshape(%v3_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %997 = multiply(%995, %996) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %998 = cast(%13, dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %999 = tile(%997, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1000 = reshape(%998, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1001 = reshape(%999, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(48, 1, 32, 32), float32] */;
  %1002 = nn.conv2d(%1000, %1001, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 3, 3), float32] */;
  %1003 = reshape(%1002, newshape=[1, 1, 48, 3, 3]) /* ty=Tensor[(1, 1, 48, 3, 3), float32] */;
  %1004 = sum(%1003, axis=[0]) /* ty=Tensor[(1, 48, 3, 3), float32] */;
  %1005 = cast(%12, dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1006 = greater_equal(%1005, -128f /* ty=float32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1007 = less_equal(%1005, 127f /* ty=float32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1008 = cast(%v3_conv_1_weight, dtype="float32") /* ty=Tensor[(48, 1, 3, 3), float32] */;
  %1009 = multiply(%1006, %1007) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1010 = nn.conv2d_transpose(%997, %1008, channels=48, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=48, kernel_layout="IOHW") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1011 = zeros(shape=[1, 48, 32, 32], dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1012 = where(%1009, %1010, %1011) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1013 = reshape(%v3_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %1014 = multiply(%1012, %1013) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1015 = cast(%11, dtype="float32") /* ty=Tensor[(1, 8, 32, 32), float32] */;
  %1016 = tile(%1014, reps=[1, 8, 1, 1]) /* ty=Tensor[(1, 384, 32, 32), float32] */;
  %1017 = reshape(%1015, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 8, 32, 32), float32] */;
  %1018 = reshape(%1016, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 32, 32), float32] */;
  %1019 = nn.conv2d(%1017, %1018, padding=[0, 0, 0, 0], groups=8) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %1020 = reshape(%1019, newshape=[1, 8, 48, 1, 1]) /* ty=Tensor[(1, 8, 48, 1, 1), float32] */;
  %1021 = sum(%1020, axis=[0]) /* ty=Tensor[(8, 48, 1, 1), float32] */;
  %1022 = cast(%10, dtype="float32") /* ty=Tensor[(1, 8, 32, 32), float32] */;
  %1023 = greater_equal(%1022, -128f /* ty=float32 */) /* ty=Tensor[(1, 8, 32, 32), bool] */;
  %1024 = less_equal(%1022, 127f /* ty=float32 */) /* ty=Tensor[(1, 8, 32, 32), bool] */;
  %1025 = cast(%v3_conv_0_weight, dtype="float32") /* ty=Tensor[(48, 8, 1, 1), float32] */;
  %1026 = multiply(%1023, %1024) /* ty=Tensor[(1, 8, 32, 32), bool] */;
  %1027 = nn.conv2d_transpose(%1014, %1025, channels=8, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 8, 32, 32), float32] */;
  %1028 = zeros(shape=[1, 8, 32, 32], dtype="float32") /* ty=Tensor[(1, 8, 32, 32), float32] */;
  %1029 = where(%1026, %1027, %1028) /* ty=Tensor[(1, 8, 32, 32), float32] */;
  %1030 = reshape(%v2_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 8, 1, 1), float32] */;
  %1031 = multiply(%1029, %1030) /* ty=Tensor[(1, 8, 32, 32), float32] */;
  %1032 = cast(%9, dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1033 = tile(%1031, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 384, 32, 32), float32] */;
  %1034 = reshape(%1032, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1035 = reshape(%1033, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 32, 32), float32] */;
  %1036 = nn.conv2d(%1034, %1035, padding=[0, 0, 0, 0], groups=48) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %1037 = reshape(%1036, newshape=[1, 48, 8, 1, 1]) /* ty=Tensor[(1, 48, 8, 1, 1), float32] */;
  %1038 = sum(%1037, axis=[0]) /* ty=Tensor[(48, 8, 1, 1), float32] */;
  %1039 = cast(%8, dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1040 = greater_equal(%1039, -128f /* ty=float32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1041 = less_equal(%1039, 127f /* ty=float32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1042 = cast(%v2_conv_2_weight, dtype="float32") /* ty=Tensor[(8, 48, 1, 1), float32] */;
  %1043 = multiply(%1040, %1041) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1044 = nn.conv2d_transpose(%1031, %1042, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1045 = zeros(shape=[1, 48, 32, 32], dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1046 = where(%1043, %1044, %1045) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1047 = reshape(%v2_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %1048 = multiply(%1046, %1047) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1049 = cast(%7, dtype="float32") /* ty=Tensor[(1, 48, 64, 64), float32] */;
  %1050 = tile(%1048, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1051 = reshape(%1049, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 64, 64), float32] */;
  %1052 = reshape(%1050, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(48, 1, 32, 32), float32] */;
  %1053 = nn.conv2d(%1051, %1052, padding=[1, 1, 1, 1], dilation=[2, 2], groups=48) /* ty=Tensor[(1, 48, 4, 4), float32] */;
  %1054 = reshape(%1053, newshape=[1, 1, 48, 4, 4]) /* ty=Tensor[(1, 1, 48, 4, 4), float32] */;
  %1055 = sum(%1054, axis=[0]) /* ty=Tensor[(1, 48, 4, 4), float32] */;
  %1056 = transpose(%1055, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 1, 4, 4), float32] */;
  %1057 = cast(%6, dtype="float32") /* ty=Tensor[(1, 48, 64, 64), float32] */;
  %1058 = greater_equal(%1057, -128f /* ty=float32 */) /* ty=Tensor[(1, 48, 64, 64), bool] */;
  %1059 = less_equal(%1057, 127f /* ty=float32 */) /* ty=Tensor[(1, 48, 64, 64), bool] */;
  %1060 = cast(%v2_conv_1_weight, dtype="float32") /* ty=Tensor[(48, 1, 3, 3), float32] */;
  %1061 = multiply(%1058, %1059) /* ty=Tensor[(1, 48, 64, 64), bool] */;
  %1062 = nn.conv2d_transpose(%1048, %1060, channels=48, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=48, kernel_layout="IOHW") /* ty=Tensor[(1, 48, 64, 64), float32] */;
  %1063 = zeros(shape=[1, 48, 64, 64], dtype="float32") /* ty=Tensor[(1, 48, 64, 64), float32] */;
  %1064 = where(%1061, %1062, %1063) /* ty=Tensor[(1, 48, 64, 64), float32] */;
  %1065 = reshape(%v2_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %1066 = multiply(%1064, %1065) /* ty=Tensor[(1, 48, 64, 64), float32] */;
  %1067 = cast(%5, dtype="float32") /* ty=Tensor[(1, 8, 64, 64), float32] */;
  %1068 = tile(%1066, reps=[1, 8, 1, 1]) /* ty=Tensor[(1, 384, 64, 64), float32] */;
  %1069 = reshape(%1067, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 8, 64, 64), float32] */;
  %1070 = reshape(%1068, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 64, 64), float32] */;
  %1071 = nn.conv2d(%1069, %1070, padding=[0, 0, 0, 0], groups=8) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %1072 = reshape(%1071, newshape=[1, 8, 48, 1, 1]) /* ty=Tensor[(1, 8, 48, 1, 1), float32] */;
  %1073 = sum(%1072, axis=[0]) /* ty=Tensor[(8, 48, 1, 1), float32] */;
  %1074 = cast(%4, dtype="float32") /* ty=Tensor[(1, 8, 64, 64), float32] */;
  %1075 = greater_equal(%1074, -128f /* ty=float32 */) /* ty=Tensor[(1, 8, 64, 64), bool] */;
  %1076 = less_equal(%1074, 127f /* ty=float32 */) /* ty=Tensor[(1, 8, 64, 64), bool] */;
  %1077 = cast(%v2_conv_0_weight, dtype="float32") /* ty=Tensor[(48, 8, 1, 1), float32] */;
  %1078 = multiply(%1075, %1076) /* ty=Tensor[(1, 8, 64, 64), bool] */;
  %1079 = nn.conv2d_transpose(%1066, %1077, channels=8, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 8, 64, 64), float32] */;
  %1080 = zeros(shape=[1, 8, 64, 64], dtype="float32") /* ty=Tensor[(1, 8, 64, 64), float32] */;
  %1081 = where(%1078, %1079, %1080) /* ty=Tensor[(1, 8, 64, 64), float32] */;
  %1082 = reshape(%v1_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 8, 1, 1), float32] */;
  %1083 = multiply(%1081, %1082) /* ty=Tensor[(1, 8, 64, 64), float32] */;
  %1084 = cast(%3, dtype="float32") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1085 = tile(%1083, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 128, 64, 64), float32] */;
  %1086 = reshape(%1084, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1087 = reshape(%1085, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(128, 1, 64, 64), float32] */;
  %1088 = nn.conv2d(%1086, %1087, padding=[0, 0, 0, 0], groups=16) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %1089 = reshape(%1088, newshape=[1, 16, 8, 1, 1]) /* ty=Tensor[(1, 16, 8, 1, 1), float32] */;
  %1090 = sum(%1089, axis=[0]) /* ty=Tensor[(16, 8, 1, 1), float32] */;
  %1091 = cast(%2, dtype="float32") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1092 = greater_equal(%1091, -128f /* ty=float32 */) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1093 = less_equal(%1091, 127f /* ty=float32 */) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1094 = cast(%v1_conv_1_weight, dtype="float32") /* ty=Tensor[(8, 16, 1, 1), float32] */;
  %1095 = multiply(%1092, %1093) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1096 = nn.conv2d_transpose(%1083, %1094, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1097 = zeros(shape=[1, 16, 64, 64], dtype="float32") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1098 = where(%1095, %1096, %1097) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1099 = reshape(%v1_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 16, 1, 1), float32] */;
  %1100 = multiply(%1098, %1099) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1101 = cast(%1, dtype="float32") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1102 = tile(%1100, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1103 = reshape(%1101, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1104 = reshape(%1102, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(16, 1, 64, 64), float32] */;
  %1105 = nn.conv2d(%1103, %1104, padding=[1, 1, 1, 1], groups=16) /* ty=Tensor[(1, 16, 3, 3), float32] */;
  %1106 = reshape(%1105, newshape=[1, 1, 16, 3, 3]) /* ty=Tensor[(1, 1, 16, 3, 3), float32] */;
  %1107 = sum(%1106, axis=[0]) /* ty=Tensor[(1, 16, 3, 3), float32] */;
  %1108 = cast(%0, dtype="float32") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1109 = greater_equal(%1108, -128f /* ty=float32 */) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1110 = less_equal(%1108, 127f /* ty=float32 */) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1111 = cast(%v1_conv_0_weight, dtype="float32") /* ty=Tensor[(16, 1, 3, 3), float32] */;
  %1112 = multiply(%1109, %1110) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1113 = nn.conv2d_transpose(%1100, %1111, channels=16, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=16, kernel_layout="IOHW") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1114 = zeros(shape=[1, 16, 64, 64], dtype="float32") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1115 = where(%1112, %1113, %1114) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1116 = reshape(%v0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 16, 1, 1), float32] */;
  %1117 = multiply(%1115, %1116) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1118 = cast(%input, dtype="float32") /* ty=Tensor[(1, 3, 128, 128), float32] */;
  %1119 = tile(%1117, reps=[1, 3, 1, 1]) /* ty=Tensor[(1, 48, 64, 64), float32] */;
  %1120 = reshape(%1118, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 3, 128, 128), float32] */;
  %1121 = reshape(%1119, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(48, 1, 64, 64), float32] */;
  %1122 = nn.conv2d(%1120, %1121, padding=[1, 1, 1, 1], dilation=[2, 2], groups=3) /* ty=Tensor[(1, 48, 4, 4), float32] */;
  %1123 = reshape(%1122, newshape=[1, 3, 16, 4, 4]) /* ty=Tensor[(1, 3, 16, 4, 4), float32] */;
  %1124 = sum(%1123, axis=[0]) /* ty=Tensor[(3, 16, 4, 4), float32] */;
  %1125 = transpose(%1124, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 3, 4, 4), float32] */;
  %1126 = nn.cross_entropy_with_logits(%127, %label) /* ty=float32 */;
  %1127 = sum(%143, axis=[1], exclude=True) /* ty=Tensor[(10), float32] */;
  %1128 = transpose(%150, axes=[1, 0, 2, 3]) /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %1129 = sum(%163, axis=[1], exclude=True) /* ty=Tensor[(112), float32] */;
  %1130 = transpose(%170, axes=[1, 0, 2, 3]) /* ty=Tensor[(112, 336, 1, 1), float32] */;
  %1131 = sum(%180, axis=[1], exclude=True) /* ty=Tensor[(336), float32] */;
  %1132 = transpose(%187, axes=[1, 0, 2, 3]) /* ty=Tensor[(336, 1, 3, 3), float32] */;
  %1133 = sum(%197, axis=[1], exclude=True) /* ty=Tensor[(336), float32] */;
  %1134 = transpose(%204, axes=[1, 0, 2, 3]) /* ty=Tensor[(336, 56, 1, 1), float32] */;
  %1135 = sum(%224, axis=[1], exclude=True) /* ty=Tensor[(56), float32] */;
  %1136 = transpose(%231, axes=[1, 0, 2, 3]) /* ty=Tensor[(56, 336, 1, 1), float32] */;
  %1137 = sum(%241, axis=[1], exclude=True) /* ty=Tensor[(336), float32] */;
  %1138 = transpose(%248, axes=[1, 0, 2, 3]) /* ty=Tensor[(336, 1, 3, 3), float32] */;
  %1139 = sum(%258, axis=[1], exclude=True) /* ty=Tensor[(336), float32] */;
  %1140 = transpose(%265, axes=[1, 0, 2, 3]) /* ty=Tensor[(336, 56, 1, 1), float32] */;
  %1141 = sum(%285, axis=[1], exclude=True) /* ty=Tensor[(56), float32] */;
  %1142 = transpose(%292, axes=[1, 0, 2, 3]) /* ty=Tensor[(56, 336, 1, 1), float32] */;
  %1143 = sum(%302, axis=[1], exclude=True) /* ty=Tensor[(336), float32] */;
  %1144 = transpose(%309, axes=[1, 0, 2, 3]) /* ty=Tensor[(336, 1, 3, 3), float32] */;
  %1145 = sum(%319, axis=[1], exclude=True) /* ty=Tensor[(336), float32] */;
  %1146 = transpose(%326, axes=[1, 0, 2, 3]) /* ty=Tensor[(336, 56, 1, 1), float32] */;
  %1147 = sum(%336, axis=[1], exclude=True) /* ty=Tensor[(56), float32] */;
  %1148 = transpose(%343, axes=[1, 0, 2, 3]) /* ty=Tensor[(56, 192, 1, 1), float32] */;
  %1149 = sum(%353, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %1150 = strided_slice(%361, begin=[0, 0, 0, 0], end=[192, 1, 3, 3], strides=[1], axes=None) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %1151 = sum(%371, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %1152 = transpose(%378, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %1153 = sum(%398, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %1154 = transpose(%405, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %1155 = sum(%415, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %1156 = transpose(%422, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %1157 = sum(%432, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %1158 = transpose(%439, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %1159 = sum(%459, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %1160 = transpose(%466, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %1161 = sum(%476, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %1162 = transpose(%483, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %1163 = sum(%493, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %1164 = transpose(%500, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %1165 = sum(%510, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %1166 = transpose(%517, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 144, 1, 1), float32] */;
  %1167 = sum(%527, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %1168 = transpose(%534, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %1169 = sum(%544, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %1170 = transpose(%551, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 24, 1, 1), float32] */;
  %1171 = sum(%571, axis=[1], exclude=True) /* ty=Tensor[(24), float32] */;
  %1172 = transpose(%578, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 144, 1, 1), float32] */;
  %1173 = sum(%588, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %1174 = transpose(%595, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %1175 = sum(%605, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %1176 = transpose(%612, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 24, 1, 1), float32] */;
  %1177 = sum(%632, axis=[1], exclude=True) /* ty=Tensor[(24), float32] */;
  %1178 = transpose(%639, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 144, 1, 1), float32] */;
  %1179 = sum(%649, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %1180 = transpose(%656, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %1181 = sum(%666, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %1182 = transpose(%673, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 24, 1, 1), float32] */;
  %1183 = sum(%693, axis=[1], exclude=True) /* ty=Tensor[(24), float32] */;
  %1184 = transpose(%700, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 144, 1, 1), float32] */;
  %1185 = sum(%710, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %1186 = transpose(%717, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %1187 = sum(%727, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %1188 = transpose(%734, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 24, 1, 1), float32] */;
  %1189 = sum(%744, axis=[1], exclude=True) /* ty=Tensor[(24), float32] */;
  %1190 = transpose(%751, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 96, 1, 1), float32] */;
  %1191 = sum(%761, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %1192 = strided_slice(%769, begin=[0, 0, 0, 0], end=[96, 1, 3, 3], strides=[1], axes=None) /* ty=Tensor[(96, 1, 3, 3), float32] */;
  %1193 = sum(%779, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %1194 = transpose(%786, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 16, 1, 1), float32] */;
  %1195 = sum(%806, axis=[1], exclude=True) /* ty=Tensor[(16), float32] */;
  %1196 = transpose(%813, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 96, 1, 1), float32] */;
  %1197 = sum(%823, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %1198 = transpose(%830, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 1, 3, 3), float32] */;
  %1199 = sum(%840, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %1200 = transpose(%847, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 16, 1, 1), float32] */;
  %1201 = sum(%867, axis=[1], exclude=True) /* ty=Tensor[(16), float32] */;
  %1202 = transpose(%874, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 96, 1, 1), float32] */;
  %1203 = sum(%884, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %1204 = transpose(%891, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 1, 3, 3), float32] */;
  %1205 = sum(%901, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %1206 = transpose(%908, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 16, 1, 1), float32] */;
  %1207 = sum(%918, axis=[1], exclude=True) /* ty=Tensor[(16), float32] */;
  %1208 = transpose(%925, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 48, 1, 1), float32] */;
  %1209 = sum(%935, axis=[1], exclude=True) /* ty=Tensor[(48), float32] */;
  %1210 = strided_slice(%943, begin=[0, 0, 0, 0], end=[48, 1, 3, 3], strides=[1], axes=None) /* ty=Tensor[(48, 1, 3, 3), float32] */;
  %1211 = sum(%953, axis=[1], exclude=True) /* ty=Tensor[(48), float32] */;
  %1212 = transpose(%960, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 8, 1, 1), float32] */;
  %1213 = sum(%980, axis=[1], exclude=True) /* ty=Tensor[(8), float32] */;
  %1214 = transpose(%987, axes=[1, 0, 2, 3]) /* ty=Tensor[(8, 48, 1, 1), float32] */;
  %1215 = sum(%997, axis=[1], exclude=True) /* ty=Tensor[(48), float32] */;
  %1216 = transpose(%1004, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 1, 3, 3), float32] */;
  %1217 = sum(%1014, axis=[1], exclude=True) /* ty=Tensor[(48), float32] */;
  %1218 = transpose(%1021, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 8, 1, 1), float32] */;
  %1219 = sum(%1031, axis=[1], exclude=True) /* ty=Tensor[(8), float32] */;
  %1220 = transpose(%1038, axes=[1, 0, 2, 3]) /* ty=Tensor[(8, 48, 1, 1), float32] */;
  %1221 = sum(%1048, axis=[1], exclude=True) /* ty=Tensor[(48), float32] */;
  %1222 = strided_slice(%1056, begin=[0, 0, 0, 0], end=[48, 1, 3, 3], strides=[1], axes=None) /* ty=Tensor[(48, 1, 3, 3), float32] */;
  %1223 = sum(%1066, axis=[1], exclude=True) /* ty=Tensor[(48), float32] */;
  %1224 = transpose(%1073, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 8, 1, 1), float32] */;
  %1225 = sum(%1083, axis=[1], exclude=True) /* ty=Tensor[(8), float32] */;
  %1226 = transpose(%1090, axes=[1, 0, 2, 3]) /* ty=Tensor[(8, 16, 1, 1), float32] */;
  %1227 = sum(%1100, axis=[1], exclude=True) /* ty=Tensor[(16), float32] */;
  %1228 = transpose(%1107, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 1, 3, 3), float32] */;
  %1229 = sum(%1117, axis=[1], exclude=True) /* ty=Tensor[(16), float32] */;
  %1230 = strided_slice(%1125, begin=[0, 0, 0, 0], end=[16, 3, 3, 3], strides=[1], axes=None) /* ty=Tensor[(16, 3, 3, 3), float32] */;
  (%1126, %1127, %1128, %1129, %1130, %1131, %1132, %1133, %1134, %1135, %1136, %1137, %1138, %1139, %1140, %1141, %1142, %1143, %1144, %1145, %1146, %1147, %1148, %1149, %1150, %1151, %1152, %1153, %1154, %1155, %1156, %1157, %1158, %1159, %1160, %1161, %1162, %1163, %1164, %1165, %1166, %1167, %1168, %1169, %1170, %1171, %1172, %1173, %1174, %1175, %1176, %1177, %1178, %1179, %1180, %1181, %1182, %1183, %1184, %1185, %1186, %1187, %1188, %1189, %1190, %1191, %1192, %1193, %1194, %1195, %1196, %1197, %1198, %1199, %1200, %1201, %1202, %1203, %1204, %1205, %1206, %1207, %1208, %1209, %1210, %1211, %1212, %1213, %1214, %1215, %1216, %1217, %1218, %1219, %1220, %1221, %1222, %1223, %1224, %1225, %1226, %1227, %1228, %1229, %1230)
}
