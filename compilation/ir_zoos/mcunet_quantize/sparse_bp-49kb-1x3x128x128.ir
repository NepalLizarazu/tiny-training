def @main(%input: Tensor[(1, 3, 128, 128), int8], %v0_weight: Tensor[(16, 3, 3, 3), int8], %v0_bias: Tensor[(16), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(16), float32], %v1_conv_0_weight: Tensor[(16, 1, 3, 3), int8], %v1_conv_0_bias: Tensor[(16), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(16), float32], %v1_conv_1_weight: Tensor[(8, 16, 1, 1), int8], %v1_conv_1_bias: Tensor[(8), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(8), float32], %v2_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v2_conv_0_bias: Tensor[(48), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(48), float32], %v2_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v2_conv_1_bias: Tensor[(48), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(48), float32], %v2_conv_2_weight: Tensor[(8, 48, 1, 1), int8], %v2_conv_2_bias: Tensor[(8), int32], %v2_conv_2_zero_x: Tensor[(1), int8], %v2_conv_2_zero_y: Tensor[(1), int8], %v2_conv_2_scale: Tensor[(8), float32], %v3_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v3_conv_0_bias: Tensor[(48), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(48), float32], %v3_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v3_conv_1_bias: Tensor[(48), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(48), float32], %v3_conv_2_weight: Tensor[(8, 48, 1, 1), int8], %v3_conv_2_bias: Tensor[(8), int32], %v3_conv_2_zero_x: Tensor[(1), int8], %v3_conv_2_zero_y: Tensor[(1), int8], %v3_conv_2_scale: Tensor[(8), float32], %v3_qadd_zero_x1: Tensor[(1), int8], %v3_qadd_zero_x2: Tensor[(1), int8], %v3_qadd_scale_x1: Tensor[(1), float32], %v3_qadd_scale_x2: Tensor[(1), float32], %v3_qadd_zero_y: Tensor[(1), int8], %v3_qadd_scale_y: Tensor[(1), float32], %v4_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v4_conv_0_bias: Tensor[(48), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(48), float32], %v4_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v4_conv_1_bias: Tensor[(48), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(48), float32], %v4_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v4_conv_2_bias: Tensor[(16), int32], %v4_conv_2_zero_x: Tensor[(1), int8], %v4_conv_2_zero_y: Tensor[(1), int8], %v4_conv_2_scale: Tensor[(16), float32], %v5_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v5_conv_0_bias: Tensor[(96), int32], %v5_conv_0_zero_x: Tensor[(1), int8], %v5_conv_0_zero_y: Tensor[(1), int8], %v5_conv_0_scale: Tensor[(96), float32], %v5_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v5_conv_1_bias: Tensor[(96), int32], %v5_conv_1_zero_x: Tensor[(1), int8], %v5_conv_1_zero_y: Tensor[(1), int8], %v5_conv_1_scale: Tensor[(96), float32], %v5_conv_2_weight: Tensor[(16, 96, 1, 1), int8], %v5_conv_2_bias: Tensor[(16), int32], %v5_conv_2_zero_x: Tensor[(1), int8], %v5_conv_2_zero_y: Tensor[(1), int8], %v5_conv_2_scale: Tensor[(16), float32], %v5_qadd_zero_x1: Tensor[(1), int8], %v5_qadd_zero_x2: Tensor[(1), int8], %v5_qadd_scale_x1: Tensor[(1), float32], %v5_qadd_scale_x2: Tensor[(1), float32], %v5_qadd_zero_y: Tensor[(1), int8], %v5_qadd_scale_y: Tensor[(1), float32], %v6_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v6_conv_0_bias: Tensor[(96), int32], %v6_conv_0_zero_x: Tensor[(1), int8], %v6_conv_0_zero_y: Tensor[(1), int8], %v6_conv_0_scale: Tensor[(96), float32], %v6_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v6_conv_1_bias: Tensor[(96), int32], %v6_conv_1_zero_x: Tensor[(1), int8], %v6_conv_1_zero_y: Tensor[(1), int8], %v6_conv_1_scale: Tensor[(96), float32], %v6_conv_2_weight: Tensor[(16, 96, 1, 1), int8], %v6_conv_2_bias: Tensor[(16), int32], %v6_conv_2_zero_x: Tensor[(1), int8], %v6_conv_2_zero_y: Tensor[(1), int8], %v6_conv_2_scale: Tensor[(16), float32], %v6_qadd_zero_x1: Tensor[(1), int8], %v6_qadd_zero_x2: Tensor[(1), int8], %v6_qadd_scale_x1: Tensor[(1), float32], %v6_qadd_scale_x2: Tensor[(1), float32], %v6_qadd_zero_y: Tensor[(1), int8], %v6_qadd_scale_y: Tensor[(1), float32], %v7_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v7_conv_0_bias: Tensor[(96), int32], %v7_conv_0_zero_x: Tensor[(1), int8], %v7_conv_0_zero_y: Tensor[(1), int8], %v7_conv_0_scale: Tensor[(96), float32], %v7_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v7_conv_1_bias: Tensor[(96), int32], %v7_conv_1_zero_x: Tensor[(1), int8], %v7_conv_1_zero_y: Tensor[(1), int8], %v7_conv_1_scale: Tensor[(96), float32], %v7_conv_2_weight: Tensor[(24, 96, 1, 1), int8], %v7_conv_2_bias: Tensor[(24), int32], %v7_conv_2_zero_x: Tensor[(1), int8], %v7_conv_2_zero_y: Tensor[(1), int8], %v7_conv_2_scale: Tensor[(24), float32], %v8_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v8_conv_0_bias: Tensor[(144), int32], %v8_conv_0_zero_x: Tensor[(1), int8], %v8_conv_0_zero_y: Tensor[(1), int8], %v8_conv_0_scale: Tensor[(144), float32], %v8_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v8_conv_1_bias: Tensor[(144), int32], %v8_conv_1_zero_x: Tensor[(1), int8], %v8_conv_1_zero_y: Tensor[(1), int8], %v8_conv_1_scale: Tensor[(144), float32], %v8_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v8_conv_2_bias: Tensor[(24), int32], %v8_conv_2_zero_x: Tensor[(1), int8], %v8_conv_2_zero_y: Tensor[(1), int8], %v8_conv_2_scale: Tensor[(24), float32], %v8_qadd_zero_x1: Tensor[(1), int8], %v8_qadd_zero_x2: Tensor[(1), int8], %v8_qadd_scale_x1: Tensor[(1), float32], %v8_qadd_scale_x2: Tensor[(1), float32], %v8_qadd_zero_y: Tensor[(1), int8], %v8_qadd_scale_y: Tensor[(1), float32], %v9_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v9_conv_0_bias: Tensor[(144), int32], %v9_conv_0_zero_x: Tensor[(1), int8], %v9_conv_0_zero_y: Tensor[(1), int8], %v9_conv_0_scale: Tensor[(144), float32], %v9_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v9_conv_1_bias: Tensor[(144), int32], %v9_conv_1_zero_x: Tensor[(1), int8], %v9_conv_1_zero_y: Tensor[(1), int8], %v9_conv_1_scale: Tensor[(144), float32], %v9_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v9_conv_2_bias: Tensor[(24), int32], %v9_conv_2_zero_x: Tensor[(1), int8], %v9_conv_2_zero_y: Tensor[(1), int8], %v9_conv_2_scale: Tensor[(24), float32], %v9_qadd_zero_x1: Tensor[(1), int8], %v9_qadd_zero_x2: Tensor[(1), int8], %v9_qadd_scale_x1: Tensor[(1), float32], %v9_qadd_scale_x2: Tensor[(1), float32], %v9_qadd_zero_y: Tensor[(1), int8], %v9_qadd_scale_y: Tensor[(1), float32], %v10_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v10_conv_0_bias: Tensor[(144), int32], %v10_conv_0_zero_x: Tensor[(1), int8], %v10_conv_0_zero_y: Tensor[(1), int8], %v10_conv_0_scale: Tensor[(144), float32], %v10_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v10_conv_1_bias: Tensor[(144), int32], %v10_conv_1_zero_x: Tensor[(1), int8], %v10_conv_1_zero_y: Tensor[(1), int8], %v10_conv_1_scale: Tensor[(144), float32], %v10_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v10_conv_2_bias: Tensor[(24), int32], %v10_conv_2_zero_x: Tensor[(1), int8], %v10_conv_2_zero_y: Tensor[(1), int8], %v10_conv_2_scale: Tensor[(24), float32], %v10_qadd_zero_x1: Tensor[(1), int8], %v10_qadd_zero_x2: Tensor[(1), int8], %v10_qadd_scale_x1: Tensor[(1), float32], %v10_qadd_scale_x2: Tensor[(1), float32], %v10_qadd_zero_y: Tensor[(1), int8], %v10_qadd_scale_y: Tensor[(1), float32], %v11_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v11_conv_0_bias: Tensor[(144), int32], %v11_conv_0_zero_x: Tensor[(1), int8], %v11_conv_0_zero_y: Tensor[(1), int8], %v11_conv_0_scale: Tensor[(144), float32], %v11_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v11_conv_1_bias: Tensor[(144), int32], %v11_conv_1_zero_x: Tensor[(1), int8], %v11_conv_1_zero_y: Tensor[(1), int8], %v11_conv_1_scale: Tensor[(144), float32], %v11_conv_2_weight: Tensor[(32, 144, 1, 1), int8], %v11_conv_2_bias: Tensor[(32), int32], %v11_conv_2_zero_x: Tensor[(1), int8], %v11_conv_2_zero_y: Tensor[(1), int8], %v11_conv_2_scale: Tensor[(32), float32], %v12_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v12_conv_0_bias: Tensor[(192), int32], %v12_conv_0_zero_x: Tensor[(1), int8], %v12_conv_0_zero_y: Tensor[(1), int8], %v12_conv_0_scale: Tensor[(192), float32], %v12_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v12_conv_1_bias: Tensor[(192), int32], %v12_conv_1_zero_x: Tensor[(1), int8], %v12_conv_1_zero_y: Tensor[(1), int8], %v12_conv_1_scale: Tensor[(192), float32], %v12_conv_2_weight: Tensor[(32, 192, 1, 1), int8], %v12_conv_2_bias: Tensor[(32), int32], %v12_conv_2_zero_x: Tensor[(1), int8], %v12_conv_2_zero_y: Tensor[(1), int8], %v12_conv_2_scale: Tensor[(32), float32], %v12_qadd_zero_x1: Tensor[(1), int8], %v12_qadd_zero_x2: Tensor[(1), int8], %v12_qadd_scale_x1: Tensor[(1), float32], %v12_qadd_scale_x2: Tensor[(1), float32], %v12_qadd_zero_y: Tensor[(1), int8], %v12_qadd_scale_y: Tensor[(1), float32], %v13_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v13_conv_0_bias: Tensor[(192), int32], %v13_conv_0_zero_x: Tensor[(1), int8], %v13_conv_0_zero_y: Tensor[(1), int8], %v13_conv_0_scale: Tensor[(192), float32], %v13_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v13_conv_1_bias: Tensor[(192), int32], %v13_conv_1_zero_x: Tensor[(1), int8], %v13_conv_1_zero_y: Tensor[(1), int8], %v13_conv_1_scale: Tensor[(192), float32], %v13_conv_2_weight: Tensor[(32, 192, 1, 1), int8], %v13_conv_2_bias: Tensor[(32), int32], %v13_conv_2_zero_x: Tensor[(1), int8], %v13_conv_2_zero_y: Tensor[(1), int8], %v13_conv_2_scale: Tensor[(32), float32], %v13_qadd_zero_x1: Tensor[(1), int8], %v13_qadd_zero_x2: Tensor[(1), int8], %v13_qadd_scale_x1: Tensor[(1), float32], %v13_qadd_scale_x2: Tensor[(1), float32], %v13_qadd_zero_y: Tensor[(1), int8], %v13_qadd_scale_y: Tensor[(1), float32], %v14_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v14_conv_0_bias: Tensor[(192), int32], %v14_conv_0_zero_x: Tensor[(1), int8], %v14_conv_0_zero_y: Tensor[(1), int8], %v14_conv_0_scale: Tensor[(192), float32], %v14_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v14_conv_1_bias: Tensor[(192), int32], %v14_conv_1_zero_x: Tensor[(1), int8], %v14_conv_1_zero_y: Tensor[(1), int8], %v14_conv_1_scale: Tensor[(192), float32], %v14_conv_2_weight: Tensor[(56, 192, 1, 1), int8], %v14_conv_2_bias: Tensor[(56), int32], %v14_conv_2_zero_x: Tensor[(1), int8], %v14_conv_2_zero_y: Tensor[(1), int8], %v14_conv_2_scale: Tensor[(56), float32], %v15_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v15_conv_0_bias: Tensor[(336), int32], %v15_conv_0_zero_x: Tensor[(1), int8], %v15_conv_0_zero_y: Tensor[(1), int8], %v15_conv_0_scale: Tensor[(336), float32], %v15_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v15_conv_1_bias: Tensor[(336), int32], %v15_conv_1_zero_x: Tensor[(1), int8], %v15_conv_1_zero_y: Tensor[(1), int8], %v15_conv_1_scale: Tensor[(336), float32], %v15_conv_2_weight: Tensor[(56, 336, 1, 1), int8], %v15_conv_2_bias: Tensor[(56), int32], %v15_conv_2_zero_x: Tensor[(1), int8], %v15_conv_2_zero_y: Tensor[(1), int8], %v15_conv_2_scale: Tensor[(56), float32], %v15_qadd_zero_x1: Tensor[(1), int8], %v15_qadd_zero_x2: Tensor[(1), int8], %v15_qadd_scale_x1: Tensor[(1), float32], %v15_qadd_scale_x2: Tensor[(1), float32], %v15_qadd_zero_y: Tensor[(1), int8], %v15_qadd_scale_y: Tensor[(1), float32], %v16_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v16_conv_0_bias: Tensor[(336), int32], %v16_conv_0_zero_x: Tensor[(1), int8], %v16_conv_0_zero_y: Tensor[(1), int8], %v16_conv_0_scale: Tensor[(336), float32], %v16_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v16_conv_1_bias: Tensor[(336), int32], %v16_conv_1_zero_x: Tensor[(1), int8], %v16_conv_1_zero_y: Tensor[(1), int8], %v16_conv_1_scale: Tensor[(336), float32], %v16_conv_2_weight: Tensor[(56, 336, 1, 1), int8], %v16_conv_2_bias: Tensor[(56), int32], %v16_conv_2_zero_x: Tensor[(1), int8], %v16_conv_2_zero_y: Tensor[(1), int8], %v16_conv_2_scale: Tensor[(56), float32], %v16_qadd_zero_x1: Tensor[(1), int8], %v16_qadd_zero_x2: Tensor[(1), int8], %v16_qadd_scale_x1: Tensor[(1), float32], %v16_qadd_scale_x2: Tensor[(1), float32], %v16_qadd_zero_y: Tensor[(1), int8], %v16_qadd_scale_y: Tensor[(1), float32], %v17_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v17_conv_0_bias: Tensor[(336), int32], %v17_conv_0_zero_x: Tensor[(1), int8], %v17_conv_0_zero_y: Tensor[(1), int8], %v17_conv_0_scale: Tensor[(336), float32], %v17_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v17_conv_1_bias: Tensor[(336), int32], %v17_conv_1_zero_x: Tensor[(1), int8], %v17_conv_1_zero_y: Tensor[(1), int8], %v17_conv_1_scale: Tensor[(336), float32], %v17_conv_2_weight: Tensor[(112, 336, 1, 1), int8], %v17_conv_2_bias: Tensor[(112), int32], %v17_conv_2_zero_x: Tensor[(1), int8], %v17_conv_2_zero_y: Tensor[(1), int8], %v17_conv_2_scale: Tensor[(112), float32], %v18_weight: Tensor[(10, 112, 1, 1), int8], %v18_bias: Tensor[(10), int32], %v18_zero_x: Tensor[(1), int8], %v18_zero_y: Tensor[(1), int8], %v18_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), float32], Tensor[(10, 112, 1, 1), float32], Tensor[(112), float32], Tensor[(336), float32], Tensor[(336), float32], Tensor[(56), float32], Tensor[(336), float32], Tensor[(336), float32], Tensor[(56), float32], Tensor[(336), float32], Tensor[(336), float32], Tensor[(56), float32], Tensor[(192), float32], Tensor[(192), float32], Tensor[(32), float32], Tensor[(192), float32], Tensor[(192), float32], Tensor[(32), float32], Tensor[(192), float32], Tensor[(192), float32], Tensor[(32), float32], Tensor[(144), float32], Tensor[(144, 12, 1, 1), float32], Tensor[(144, 12, 1, 1), float32], Tensor[(144, 6, 1, 1), float32]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1 = nn.mcutruncate(%0) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[1, 1, 1, 1], groups=16) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %3 = nn.mcutruncate(%2) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %5 = nn.mcutruncate(%4) /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 64, 64), int32] */;
  %7 = nn.mcutruncate(%6) /* ty=Tensor[(1, 48, 64, 64), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %9 = nn.mcutruncate(%8) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %10 = nn.mcuconv2d(%9, %v2_conv_2_weight, %v2_conv_2_bias, %v2_conv_2_zero_x, %v2_conv_2_zero_y, %v2_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %11 = nn.mcutruncate(%10) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %13 = nn.mcutruncate(%12) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %14 = nn.mcuconv2d(%13, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %15 = nn.mcutruncate(%14) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %16 = nn.mcuconv2d(%15, %v3_conv_2_weight, %v3_conv_2_bias, %v3_conv_2_zero_x, %v3_conv_2_zero_y, %v3_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %17 = nn.mcutruncate(%16) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %18 = nn.mcuadd(%11, %17, %v3_qadd_zero_x1, %v3_qadd_zero_x2, %v3_qadd_scale_x1, %v3_qadd_scale_x2, %v3_qadd_zero_y, %v3_qadd_scale_y, axis=0) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %19 = nn.mcutruncate(%18) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %20 = nn.mcuconv2d(%19, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %21 = nn.mcutruncate(%20) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %22 = nn.mcuconv2d(%21, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %23 = nn.mcutruncate(%22) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %24 = nn.mcuconv2d(%23, %v4_conv_2_weight, %v4_conv_2_bias, %v4_conv_2_zero_x, %v4_conv_2_zero_y, %v4_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %25 = nn.mcutruncate(%24) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %26 = nn.mcuconv2d(%25, %v5_conv_0_weight, %v5_conv_0_bias, %v5_conv_0_zero_x, %v5_conv_0_zero_y, %v5_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %27 = nn.mcutruncate(%26) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %28 = nn.mcuconv2d(%27, %v5_conv_1_weight, %v5_conv_1_bias, %v5_conv_1_zero_x, %v5_conv_1_zero_y, %v5_conv_1_scale, padding=[1, 1, 1, 1], groups=96) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %29 = nn.mcutruncate(%28) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %30 = nn.mcuconv2d(%29, %v5_conv_2_weight, %v5_conv_2_bias, %v5_conv_2_zero_x, %v5_conv_2_zero_y, %v5_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %31 = nn.mcutruncate(%30) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %32 = nn.mcuadd(%25, %31, %v5_qadd_zero_x1, %v5_qadd_zero_x2, %v5_qadd_scale_x1, %v5_qadd_scale_x2, %v5_qadd_zero_y, %v5_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %33 = nn.mcutruncate(%32) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %34 = nn.mcuconv2d(%33, %v6_conv_0_weight, %v6_conv_0_bias, %v6_conv_0_zero_x, %v6_conv_0_zero_y, %v6_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %35 = nn.mcutruncate(%34) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %36 = nn.mcuconv2d(%35, %v6_conv_1_weight, %v6_conv_1_bias, %v6_conv_1_zero_x, %v6_conv_1_zero_y, %v6_conv_1_scale, padding=[1, 1, 1, 1], groups=96) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %37 = nn.mcutruncate(%36) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %38 = nn.mcuconv2d(%37, %v6_conv_2_weight, %v6_conv_2_bias, %v6_conv_2_zero_x, %v6_conv_2_zero_y, %v6_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %39 = nn.mcutruncate(%38) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %40 = nn.mcuadd(%33, %39, %v6_qadd_zero_x1, %v6_qadd_zero_x2, %v6_qadd_scale_x1, %v6_qadd_scale_x2, %v6_qadd_zero_y, %v6_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %41 = nn.mcutruncate(%40) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %42 = nn.mcuconv2d(%41, %v7_conv_0_weight, %v7_conv_0_bias, %v7_conv_0_zero_x, %v7_conv_0_zero_y, %v7_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %43 = nn.mcutruncate(%42) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %44 = nn.mcuconv2d(%43, %v7_conv_1_weight, %v7_conv_1_bias, %v7_conv_1_zero_x, %v7_conv_1_zero_y, %v7_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %45 = nn.mcutruncate(%44) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %46 = nn.mcuconv2d(%45, %v7_conv_2_weight, %v7_conv_2_bias, %v7_conv_2_zero_x, %v7_conv_2_zero_y, %v7_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %47 = nn.mcutruncate(%46) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %48 = nn.mcuconv2d(%47, %v8_conv_0_weight, %v8_conv_0_bias, %v8_conv_0_zero_x, %v8_conv_0_zero_y, %v8_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %49 = nn.mcutruncate(%48) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %50 = nn.mcuconv2d(%49, %v8_conv_1_weight, %v8_conv_1_bias, %v8_conv_1_zero_x, %v8_conv_1_zero_y, %v8_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %51 = nn.mcutruncate(%50) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %52 = nn.mcuconv2d(%51, %v8_conv_2_weight, %v8_conv_2_bias, %v8_conv_2_zero_x, %v8_conv_2_zero_y, %v8_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %53 = nn.mcutruncate(%52) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %54 = nn.mcuadd(%47, %53, %v8_qadd_zero_x1, %v8_qadd_zero_x2, %v8_qadd_scale_x1, %v8_qadd_scale_x2, %v8_qadd_zero_y, %v8_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %55 = nn.mcutruncate(%54) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %56 = nn.mcuconv2d(%55, %v9_conv_0_weight, %v9_conv_0_bias, %v9_conv_0_zero_x, %v9_conv_0_zero_y, %v9_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %57 = nn.mcutruncate(%56) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %58 = nn.mcuconv2d(%57, %v9_conv_1_weight, %v9_conv_1_bias, %v9_conv_1_zero_x, %v9_conv_1_zero_y, %v9_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %59 = nn.mcutruncate(%58) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %60 = nn.mcuconv2d(%59, %v9_conv_2_weight, %v9_conv_2_bias, %v9_conv_2_zero_x, %v9_conv_2_zero_y, %v9_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %61 = nn.mcutruncate(%60) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %62 = nn.mcuadd(%55, %61, %v9_qadd_zero_x1, %v9_qadd_zero_x2, %v9_qadd_scale_x1, %v9_qadd_scale_x2, %v9_qadd_zero_y, %v9_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %63 = nn.mcutruncate(%62) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %64 = nn.mcuconv2d(%63, %v10_conv_0_weight, %v10_conv_0_bias, %v10_conv_0_zero_x, %v10_conv_0_zero_y, %v10_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %65 = nn.mcutruncate(%64) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %66 = nn.mcuconv2d(%65, %v10_conv_1_weight, %v10_conv_1_bias, %v10_conv_1_zero_x, %v10_conv_1_zero_y, %v10_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %67 = nn.mcutruncate(%66) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %68 = nn.mcuconv2d(%67, %v10_conv_2_weight, %v10_conv_2_bias, %v10_conv_2_zero_x, %v10_conv_2_zero_y, %v10_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %69 = nn.mcutruncate(%68) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %70 = nn.mcuadd(%63, %69, %v10_qadd_zero_x1, %v10_qadd_zero_x2, %v10_qadd_scale_x1, %v10_qadd_scale_x2, %v10_qadd_zero_y, %v10_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %71 = nn.mcutruncate(%70) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %72 = nn.mcuconv2d(%71, %v11_conv_0_weight, %v11_conv_0_bias, %v11_conv_0_zero_x, %v11_conv_0_zero_y, %v11_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %73 = nn.mcutruncate(%72) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %74 = nn.mcuconv2d(%73, %v11_conv_1_weight, %v11_conv_1_bias, %v11_conv_1_zero_x, %v11_conv_1_zero_y, %v11_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %75 = nn.mcutruncate(%74) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %76 = nn.mcuconv2d(%75, %v11_conv_2_weight, %v11_conv_2_bias, %v11_conv_2_zero_x, %v11_conv_2_zero_y, %v11_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %77 = nn.mcutruncate(%76) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %78 = nn.mcuconv2d(%77, %v12_conv_0_weight, %v12_conv_0_bias, %v12_conv_0_zero_x, %v12_conv_0_zero_y, %v12_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %79 = nn.mcutruncate(%78) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %80 = nn.mcuconv2d(%79, %v12_conv_1_weight, %v12_conv_1_bias, %v12_conv_1_zero_x, %v12_conv_1_zero_y, %v12_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %81 = nn.mcutruncate(%80) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %82 = nn.mcuconv2d(%81, %v12_conv_2_weight, %v12_conv_2_bias, %v12_conv_2_zero_x, %v12_conv_2_zero_y, %v12_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %83 = nn.mcutruncate(%82) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %84 = nn.mcuadd(%77, %83, %v12_qadd_zero_x1, %v12_qadd_zero_x2, %v12_qadd_scale_x1, %v12_qadd_scale_x2, %v12_qadd_zero_y, %v12_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %85 = nn.mcutruncate(%84) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %86 = nn.mcuconv2d(%85, %v13_conv_0_weight, %v13_conv_0_bias, %v13_conv_0_zero_x, %v13_conv_0_zero_y, %v13_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %87 = nn.mcutruncate(%86) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %88 = nn.mcuconv2d(%87, %v13_conv_1_weight, %v13_conv_1_bias, %v13_conv_1_zero_x, %v13_conv_1_zero_y, %v13_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %89 = nn.mcutruncate(%88) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %90 = nn.mcuconv2d(%89, %v13_conv_2_weight, %v13_conv_2_bias, %v13_conv_2_zero_x, %v13_conv_2_zero_y, %v13_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %91 = nn.mcutruncate(%90) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %92 = nn.mcuadd(%85, %91, %v13_qadd_zero_x1, %v13_qadd_zero_x2, %v13_qadd_scale_x1, %v13_qadd_scale_x2, %v13_qadd_zero_y, %v13_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %93 = nn.mcutruncate(%92) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %94 = nn.mcuconv2d(%93, %v14_conv_0_weight, %v14_conv_0_bias, %v14_conv_0_zero_x, %v14_conv_0_zero_y, %v14_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %95 = nn.mcutruncate(%94) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %96 = nn.mcuconv2d(%95, %v14_conv_1_weight, %v14_conv_1_bias, %v14_conv_1_zero_x, %v14_conv_1_zero_y, %v14_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %97 = nn.mcutruncate(%96) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %98 = nn.mcuconv2d(%97, %v14_conv_2_weight, %v14_conv_2_bias, %v14_conv_2_zero_x, %v14_conv_2_zero_y, %v14_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %99 = nn.mcutruncate(%98) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %100 = nn.mcuconv2d(%99, %v15_conv_0_weight, %v15_conv_0_bias, %v15_conv_0_zero_x, %v15_conv_0_zero_y, %v15_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %101 = nn.mcutruncate(%100) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %102 = nn.mcuconv2d(%101, %v15_conv_1_weight, %v15_conv_1_bias, %v15_conv_1_zero_x, %v15_conv_1_zero_y, %v15_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %103 = nn.mcutruncate(%102) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %104 = nn.mcuconv2d(%103, %v15_conv_2_weight, %v15_conv_2_bias, %v15_conv_2_zero_x, %v15_conv_2_zero_y, %v15_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %105 = nn.mcutruncate(%104) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %106 = nn.mcuadd(%99, %105, %v15_qadd_zero_x1, %v15_qadd_zero_x2, %v15_qadd_scale_x1, %v15_qadd_scale_x2, %v15_qadd_zero_y, %v15_qadd_scale_y, axis=0) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %107 = nn.mcutruncate(%106) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %108 = nn.mcuconv2d(%107, %v16_conv_0_weight, %v16_conv_0_bias, %v16_conv_0_zero_x, %v16_conv_0_zero_y, %v16_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %109 = nn.mcutruncate(%108) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %110 = nn.mcuconv2d(%109, %v16_conv_1_weight, %v16_conv_1_bias, %v16_conv_1_zero_x, %v16_conv_1_zero_y, %v16_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %111 = nn.mcutruncate(%110) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %112 = nn.mcuconv2d(%111, %v16_conv_2_weight, %v16_conv_2_bias, %v16_conv_2_zero_x, %v16_conv_2_zero_y, %v16_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %113 = nn.mcutruncate(%112) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %114 = nn.mcuadd(%107, %113, %v16_qadd_zero_x1, %v16_qadd_zero_x2, %v16_qadd_scale_x1, %v16_qadd_scale_x2, %v16_qadd_zero_y, %v16_qadd_scale_y, axis=0) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %115 = nn.mcutruncate(%114) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %116 = nn.mcuconv2d(%115, %v17_conv_0_weight, %v17_conv_0_bias, %v17_conv_0_zero_x, %v17_conv_0_zero_y, %v17_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %117 = nn.mcutruncate(%116) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %118 = nn.mcuconv2d(%117, %v17_conv_1_weight, %v17_conv_1_bias, %v17_conv_1_zero_x, %v17_conv_1_zero_y, %v17_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %119 = nn.mcutruncate(%118) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %120 = nn.mcuconv2d(%119, %v17_conv_2_weight, %v17_conv_2_bias, %v17_conv_2_zero_x, %v17_conv_2_zero_y, %v17_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 112, 4, 4), int32] */;
  %121 = nn.mcutruncate(%120) /* ty=Tensor[(1, 112, 4, 4), int8] */;
  %122 = mcumean(%121, axis=[2, 3], keepdims=True) /* ty=Tensor[(1, 112, 1, 1), int8] */;
  %123 = nn.mcuconv2d(%122, %v18_weight, %v18_bias, %v18_zero_x, %v18_zero_y, %v18_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %124 = nn.mcutruncate(%123) /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %125 = reshape(%124, newshape=[0, 0]) /* ty=Tensor[(1, 10), int8] */;
  %126 = cast(%125, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %127 = nn.log_softmax(%126) /* ty=Tensor[(1, 10), float32] */;
  %128 = cast(%123, dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %129 = greater_equal(%128, -128f /* ty=float32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %130 = less_equal(%128, 127f /* ty=float32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %131 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %132 = negative(%131) /* ty=float32 */;
  %133 = multiply(%132, %label) /* ty=Tensor[(1, 10), float32] */;
  %134 = sum(%133, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %135 = exp(%127) /* ty=Tensor[(1, 10), float32] */;
  %136 = multiply(%134, %135) /* ty=Tensor[(1, 10), float32] */;
  %137 = subtract(%133, %136) /* ty=Tensor[(1, 10), float32] */;
  %138 = multiply(%129, %130) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %139 = reshape(%137, newshape=[1, 10, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %140 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %141 = where(%138, %139, %140) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %142 = reshape(%v18_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %143 = multiply(%141, %142) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %144 = cast(%122, dtype="float32") /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %145 = tile(%143, reps=[1, 112, 1, 1]) /* ty=Tensor[(1, 1120, 1, 1), float32] */;
  %146 = reshape(%144, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %147 = reshape(%145, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1120, 1, 1, 1), float32] */;
  %148 = nn.conv2d(%146, %147, padding=[0, 0, 0, 0], groups=112) /* ty=Tensor[(1, 1120, 1, 1), float32] */;
  %149 = reshape(%148, newshape=[1, 112, 10, 1, 1]) /* ty=Tensor[(1, 112, 10, 1, 1), float32] */;
  %150 = sum(%149, axis=[0]) /* ty=Tensor[(112, 10, 1, 1), float32] */;
  %151 = cast(%120, dtype="float32") /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %152 = greater_equal(%151, -128f /* ty=float32 */) /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %153 = less_equal(%151, 127f /* ty=float32 */) /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %154 = cast(%v18_weight, dtype="float32") /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %155 = nn.conv2d_transpose(%143, %154, channels=112, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %156 = multiply(%155, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %157 = ones(shape=[1, 112, 4, 4], dtype="float32") /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %158 = multiply(%152, %153) /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %159 = multiply(%156, %157) /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %160 = zeros(shape=[1, 112, 4, 4], dtype="float32") /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %161 = where(%158, %159, %160) /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %162 = reshape(%v17_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %163 = multiply(%161, %162) /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %164 = cast(%118, dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %165 = greater_equal(%164, -128f /* ty=float32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %166 = less_equal(%164, 127f /* ty=float32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %167 = cast(%v17_conv_2_weight, dtype="float32") /* ty=Tensor[(112, 336, 1, 1), float32] */;
  %168 = multiply(%165, %166) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %169 = nn.conv2d_transpose(%163, %167, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %170 = zeros(shape=[1, 336, 4, 4], dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %171 = where(%168, %169, %170) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %172 = reshape(%v17_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 336, 1, 1), float32] */;
  %173 = multiply(%171, %172) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %174 = cast(%116, dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %175 = greater_equal(%174, -128f /* ty=float32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %176 = less_equal(%174, 127f /* ty=float32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %177 = cast(%v17_conv_1_weight, dtype="float32") /* ty=Tensor[(336, 1, 3, 3), float32] */;
  %178 = multiply(%175, %176) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %179 = nn.conv2d_transpose(%173, %177, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %180 = zeros(shape=[1, 336, 4, 4], dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %181 = where(%178, %179, %180) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %182 = reshape(%v17_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 336, 1, 1), float32] */;
  %183 = multiply(%181, %182) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %184 = cast(%112, dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %185 = greater_equal(%184, -128f /* ty=float32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %186 = less_equal(%184, 127f /* ty=float32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %187 = cast(%114, dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %188 = greater_equal(%187, -128f /* ty=float32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %189 = less_equal(%187, 127f /* ty=float32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %190 = cast(%v17_conv_0_weight, dtype="float32") /* ty=Tensor[(336, 56, 1, 1), float32] */;
  %191 = multiply(%188, %189) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %192 = nn.conv2d_transpose(%183, %190, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %193 = zeros(shape=[1, 56, 4, 4], dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %194 = where(%191, %192, %193) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %195 = reshape(%v16_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %196 = divide(%194, %195) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %197 = reshape(%v16_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %198 = multiply(%185, %186) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %199 = multiply(%196, %197) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %200 = zeros(shape=[1, 56, 4, 4], dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %201 = where(%198, %199, %200) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %202 = reshape(%v16_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 56, 1, 1), float32] */;
  %203 = multiply(%201, %202) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %204 = cast(%110, dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %205 = greater_equal(%204, -128f /* ty=float32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %206 = less_equal(%204, 127f /* ty=float32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %207 = cast(%v16_conv_2_weight, dtype="float32") /* ty=Tensor[(56, 336, 1, 1), float32] */;
  %208 = multiply(%205, %206) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %209 = nn.conv2d_transpose(%203, %207, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %210 = zeros(shape=[1, 336, 4, 4], dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %211 = where(%208, %209, %210) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %212 = reshape(%v16_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 336, 1, 1), float32] */;
  %213 = multiply(%211, %212) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %214 = cast(%108, dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %215 = greater_equal(%214, -128f /* ty=float32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %216 = less_equal(%214, 127f /* ty=float32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %217 = cast(%v16_conv_1_weight, dtype="float32") /* ty=Tensor[(336, 1, 3, 3), float32] */;
  %218 = multiply(%215, %216) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %219 = nn.conv2d_transpose(%213, %217, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %220 = zeros(shape=[1, 336, 4, 4], dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %221 = where(%218, %219, %220) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %222 = reshape(%v16_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 336, 1, 1), float32] */;
  %223 = multiply(%221, %222) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %224 = cast(%104, dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %225 = greater_equal(%224, -128f /* ty=float32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %226 = less_equal(%224, 127f /* ty=float32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %227 = cast(%106, dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %228 = greater_equal(%227, -128f /* ty=float32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %229 = less_equal(%227, 127f /* ty=float32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %230 = cast(%v16_conv_0_weight, dtype="float32") /* ty=Tensor[(336, 56, 1, 1), float32] */;
  %231 = multiply(%228, %229) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %232 = nn.conv2d_transpose(%223, %230, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %233 = zeros(shape=[1, 56, 4, 4], dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %234 = where(%231, %232, %233) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %235 = reshape(%v15_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %236 = divide(%234, %235) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %237 = reshape(%v15_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %238 = multiply(%225, %226) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %239 = multiply(%236, %237) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %240 = zeros(shape=[1, 56, 4, 4], dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %241 = where(%238, %239, %240) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %242 = reshape(%v15_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 56, 1, 1), float32] */;
  %243 = multiply(%241, %242) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %244 = cast(%102, dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %245 = greater_equal(%244, -128f /* ty=float32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %246 = less_equal(%244, 127f /* ty=float32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %247 = cast(%v15_conv_2_weight, dtype="float32") /* ty=Tensor[(56, 336, 1, 1), float32] */;
  %248 = multiply(%245, %246) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %249 = nn.conv2d_transpose(%243, %247, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %250 = zeros(shape=[1, 336, 4, 4], dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %251 = where(%248, %249, %250) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %252 = reshape(%v15_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 336, 1, 1), float32] */;
  %253 = multiply(%251, %252) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %254 = cast(%100, dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %255 = greater_equal(%254, -128f /* ty=float32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %256 = less_equal(%254, 127f /* ty=float32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %257 = cast(%v15_conv_1_weight, dtype="float32") /* ty=Tensor[(336, 1, 3, 3), float32] */;
  %258 = multiply(%255, %256) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %259 = nn.conv2d_transpose(%253, %257, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %260 = zeros(shape=[1, 336, 4, 4], dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %261 = where(%258, %259, %260) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %262 = reshape(%v15_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 336, 1, 1), float32] */;
  %263 = multiply(%261, %262) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %264 = cast(%98, dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %265 = greater_equal(%264, -128f /* ty=float32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %266 = less_equal(%264, 127f /* ty=float32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %267 = cast(%v15_conv_0_weight, dtype="float32") /* ty=Tensor[(336, 56, 1, 1), float32] */;
  %268 = multiply(%265, %266) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %269 = nn.conv2d_transpose(%263, %267, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %270 = zeros(shape=[1, 56, 4, 4], dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %271 = where(%268, %269, %270) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %272 = reshape(%v14_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 56, 1, 1), float32] */;
  %273 = multiply(%271, %272) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %274 = cast(%96, dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %275 = greater_equal(%274, -128f /* ty=float32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %276 = less_equal(%274, 127f /* ty=float32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %277 = cast(%v14_conv_2_weight, dtype="float32") /* ty=Tensor[(56, 192, 1, 1), float32] */;
  %278 = multiply(%275, %276) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %279 = nn.conv2d_transpose(%273, %277, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %280 = zeros(shape=[1, 192, 4, 4], dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %281 = where(%278, %279, %280) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %282 = reshape(%v14_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %283 = multiply(%281, %282) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %284 = cast(%94, dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %285 = greater_equal(%284, -128f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %286 = less_equal(%284, 127f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %287 = cast(%v14_conv_1_weight, dtype="float32") /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %288 = multiply(%285, %286) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %289 = nn.conv2d_transpose(%283, %287, channels=192, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %290 = zeros(shape=[1, 192, 8, 8], dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %291 = where(%288, %289, %290) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %292 = reshape(%v14_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %293 = multiply(%291, %292) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %294 = cast(%90, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %295 = greater_equal(%294, -128f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %296 = less_equal(%294, 127f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %297 = cast(%92, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %298 = greater_equal(%297, -128f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %299 = less_equal(%297, 127f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %300 = cast(%v14_conv_0_weight, dtype="float32") /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %301 = multiply(%298, %299) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %302 = nn.conv2d_transpose(%293, %300, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %303 = zeros(shape=[1, 32, 8, 8], dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %304 = where(%301, %302, %303) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %305 = reshape(%v13_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %306 = divide(%304, %305) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %307 = reshape(%v13_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %308 = multiply(%295, %296) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %309 = multiply(%306, %307) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %310 = zeros(shape=[1, 32, 8, 8], dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %311 = where(%308, %309, %310) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %312 = reshape(%v13_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %313 = multiply(%311, %312) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %314 = cast(%88, dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %315 = greater_equal(%314, -128f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %316 = less_equal(%314, 127f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %317 = cast(%v13_conv_2_weight, dtype="float32") /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %318 = multiply(%315, %316) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %319 = nn.conv2d_transpose(%313, %317, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %320 = zeros(shape=[1, 192, 8, 8], dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %321 = where(%318, %319, %320) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %322 = reshape(%v13_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %323 = multiply(%321, %322) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %324 = cast(%86, dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %325 = greater_equal(%324, -128f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %326 = less_equal(%324, 127f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %327 = cast(%v13_conv_1_weight, dtype="float32") /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %328 = multiply(%325, %326) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %329 = nn.conv2d_transpose(%323, %327, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %330 = zeros(shape=[1, 192, 8, 8], dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %331 = where(%328, %329, %330) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %332 = reshape(%v13_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %333 = multiply(%331, %332) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %334 = cast(%82, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %335 = greater_equal(%334, -128f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %336 = less_equal(%334, 127f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %337 = cast(%84, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %338 = greater_equal(%337, -128f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %339 = less_equal(%337, 127f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %340 = cast(%v13_conv_0_weight, dtype="float32") /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %341 = multiply(%338, %339) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %342 = nn.conv2d_transpose(%333, %340, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %343 = zeros(shape=[1, 32, 8, 8], dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %344 = where(%341, %342, %343) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %345 = reshape(%v12_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %346 = divide(%344, %345) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %347 = reshape(%v12_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %348 = multiply(%335, %336) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %349 = multiply(%346, %347) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %350 = zeros(shape=[1, 32, 8, 8], dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %351 = where(%348, %349, %350) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %352 = reshape(%v12_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %353 = multiply(%351, %352) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %354 = cast(%80, dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %355 = greater_equal(%354, -128f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %356 = less_equal(%354, 127f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %357 = cast(%v12_conv_2_weight, dtype="float32") /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %358 = multiply(%355, %356) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %359 = nn.conv2d_transpose(%353, %357, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %360 = zeros(shape=[1, 192, 8, 8], dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %361 = where(%358, %359, %360) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %362 = reshape(%v12_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %363 = multiply(%361, %362) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %364 = cast(%78, dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %365 = greater_equal(%364, -128f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %366 = less_equal(%364, 127f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %367 = cast(%v12_conv_1_weight, dtype="float32") /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %368 = multiply(%365, %366) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %369 = nn.conv2d_transpose(%363, %367, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %370 = zeros(shape=[1, 192, 8, 8], dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %371 = where(%368, %369, %370) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %372 = reshape(%v12_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %373 = multiply(%371, %372) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %374 = cast(%76, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %375 = greater_equal(%374, -128f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %376 = less_equal(%374, 127f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %377 = cast(%v12_conv_0_weight, dtype="float32") /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %378 = multiply(%375, %376) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %379 = nn.conv2d_transpose(%373, %377, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %380 = zeros(shape=[1, 32, 8, 8], dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %381 = where(%378, %379, %380) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %382 = reshape(%v11_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %383 = multiply(%381, %382) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %384 = cast(%74, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %385 = greater_equal(%384, -128f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %386 = less_equal(%384, 127f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %387 = cast(%v11_conv_2_weight, dtype="float32") /* ty=Tensor[(32, 144, 1, 1), float32] */;
  %388 = multiply(%385, %386) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %389 = nn.conv2d_transpose(%383, %387, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %390 = zeros(shape=[1, 144, 8, 8], dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %391 = where(%388, %389, %390) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %392 = reshape(%v11_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 144, 1, 1), float32] */;
  %393 = multiply(%391, %392) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %394 = cast(%71, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %395 = strided_slice(%394, begin=[0, 0, 0, 0], end=[1, 12, 8, 8], strides=[1], axes=None) /* ty=Tensor[(1, 12, 8, 8), float32] */;
  %396 = cast(%72, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %397 = greater_equal(%396, -128f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %398 = less_equal(%396, 127f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %399 = cast(%v11_conv_1_weight, dtype="float32") /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %400 = multiply(%397, %398) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %401 = nn.conv2d_transpose(%393, %399, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %402 = zeros(shape=[1, 144, 8, 8], dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %403 = where(%400, %401, %402) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %404 = reshape(%v11_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 144, 1, 1), float32] */;
  %405 = multiply(%403, %404) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %406 = tile(%405, reps=[1, 12, 1, 1]) /* ty=Tensor[(1, 1728, 8, 8), float32] */;
  %407 = reshape(%395, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 12, 8, 8), float32] */;
  %408 = reshape(%406, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1728, 1, 8, 8), float32] */;
  %409 = nn.conv2d(%407, %408, padding=[0, 0, 0, 0], groups=12) /* ty=Tensor[(1, 1728, 1, 1), float32] */;
  %410 = reshape(%409, newshape=[1, 12, 144, 1, 1]) /* ty=Tensor[(1, 12, 144, 1, 1), float32] */;
  %411 = sum(%410, axis=[0]) /* ty=Tensor[(12, 144, 1, 1), float32] */;
  %412 = cast(%63, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %413 = strided_slice(%412, begin=[0, 0, 0, 0], end=[1, 12, 8, 8], strides=[1], axes=None) /* ty=Tensor[(1, 12, 8, 8), float32] */;
  %414 = greater_equal(%64, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %415 = less_equal(%64, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %416 = greater_equal(%66, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %417 = less_equal(%66, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %418 = greater_equal(%68, -128 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %419 = less_equal(%68, 127 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %420 = greater_equal(%70, meta[relay.Constant][0] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %421 = less_equal(%70, meta[relay.Constant][1] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %422 = cast(%v11_conv_0_weight, dtype="float32") /* ty=Tensor[(144, 24, 1, 1), float32] */;
  %423 = multiply(%420, %421) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %424 = nn.conv2d_transpose(%405, %422, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %425 = zeros(shape=[1, 24, 8, 8], dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %426 = where(%423, %424, %425) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %427 = reshape(%v10_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %428 = divide(%426, %427) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %429 = reshape(%v10_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %430 = multiply(%418, %419) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %431 = multiply(%428, %429) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %432 = zeros(shape=[1, 24, 8, 8], dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %433 = where(%430, %431, %432) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %434 = cast(%v10_conv_2_weight, dtype="float32") /* ty=Tensor[(24, 144, 1, 1), float32] */;
  %435 = nn.conv2d_transpose(%433, %434, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %436 = abs(%435) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %437 = max(%436, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), float32] */;
  %438 = divide(%437, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 8, 8), float32] */;
  %439 = divide(%435, %438) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %440 = multiply(%416, %417) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %441 = cast(%439, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %442 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %443 = where(%440, %441, %442) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %444 = nn.conv2d_transpose(%443, %v10_conv_1_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %445 = abs(%444) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %446 = max(%445, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %447 = divide(%446, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %448 = divide(%444, %447) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %449 = multiply(%414, %415) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %450 = cast(%448, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %451 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %452 = where(%449, %450, %451) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %453 = cast(%452, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %454 = reshape(%v10_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 144, 1, 1), float32] */;
  %455 = multiply(%453, %454) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %456 = tile(%455, reps=[1, 12, 1, 1]) /* ty=Tensor[(1, 1728, 8, 8), float32] */;
  %457 = reshape(%413, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 12, 8, 8), float32] */;
  %458 = reshape(%456, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1728, 1, 8, 8), float32] */;
  %459 = nn.conv2d(%457, %458, padding=[0, 0, 0, 0], groups=12) /* ty=Tensor[(1, 1728, 1, 1), float32] */;
  %460 = reshape(%459, newshape=[1, 12, 144, 1, 1]) /* ty=Tensor[(1, 12, 144, 1, 1), float32] */;
  %461 = sum(%460, axis=[0]) /* ty=Tensor[(12, 144, 1, 1), float32] */;
  %462 = cast(%55, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %463 = strided_slice(%462, begin=[0, 0, 0, 0], end=[1, 6, 8, 8], strides=[1], axes=None) /* ty=Tensor[(1, 6, 8, 8), float32] */;
  %464 = greater_equal(%56, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %465 = less_equal(%56, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %466 = greater_equal(%58, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %467 = less_equal(%58, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %468 = greater_equal(%60, -128 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %469 = less_equal(%60, 127 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %470 = greater_equal(%62, meta[relay.Constant][2] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %471 = less_equal(%62, meta[relay.Constant][3] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %472 = cast(%v10_conv_0_weight, dtype="float32") /* ty=Tensor[(144, 24, 1, 1), float32] */;
  %473 = multiply(%470, %471) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %474 = nn.conv2d_transpose(%455, %472, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %475 = zeros(shape=[1, 24, 8, 8], dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %476 = where(%473, %474, %475) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %477 = reshape(%v9_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %478 = divide(%476, %477) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %479 = reshape(%v9_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %480 = multiply(%468, %469) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %481 = multiply(%478, %479) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %482 = zeros(shape=[1, 24, 8, 8], dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %483 = where(%480, %481, %482) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %484 = cast(%v9_conv_2_weight, dtype="float32") /* ty=Tensor[(24, 144, 1, 1), float32] */;
  %485 = nn.conv2d_transpose(%483, %484, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %486 = abs(%485) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %487 = max(%486, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), float32] */;
  %488 = divide(%487, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 8, 8), float32] */;
  %489 = divide(%485, %488) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %490 = multiply(%466, %467) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %491 = cast(%489, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %492 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %493 = where(%490, %491, %492) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %494 = nn.conv2d_transpose(%493, %v9_conv_1_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %495 = abs(%494) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %496 = max(%495, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %497 = divide(%496, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %498 = divide(%494, %497) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %499 = multiply(%464, %465) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %500 = cast(%498, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %501 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %502 = where(%499, %500, %501) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %503 = cast(%502, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %504 = reshape(%v9_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 144, 1, 1), float32] */;
  %505 = multiply(%503, %504) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %506 = tile(%505, reps=[1, 6, 1, 1]) /* ty=Tensor[(1, 864, 8, 8), float32] */;
  %507 = reshape(%463, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 6, 8, 8), float32] */;
  %508 = reshape(%506, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(864, 1, 8, 8), float32] */;
  %509 = nn.conv2d(%507, %508, padding=[0, 0, 0, 0], groups=6) /* ty=Tensor[(1, 864, 1, 1), float32] */;
  %510 = reshape(%509, newshape=[1, 6, 144, 1, 1]) /* ty=Tensor[(1, 6, 144, 1, 1), float32] */;
  %511 = sum(%510, axis=[0]) /* ty=Tensor[(6, 144, 1, 1), float32] */;
  %512 = nn.cross_entropy_with_logits(%127, %label) /* ty=float32 */;
  %513 = sum(%143, axis=[1], exclude=True) /* ty=Tensor[(10), float32] */;
  %514 = transpose(%150, axes=[1, 0, 2, 3]) /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %515 = sum(%163, axis=[1], exclude=True) /* ty=Tensor[(112), float32] */;
  %516 = sum(%173, axis=[1], exclude=True) /* ty=Tensor[(336), float32] */;
  %517 = sum(%183, axis=[1], exclude=True) /* ty=Tensor[(336), float32] */;
  %518 = sum(%203, axis=[1], exclude=True) /* ty=Tensor[(56), float32] */;
  %519 = sum(%213, axis=[1], exclude=True) /* ty=Tensor[(336), float32] */;
  %520 = sum(%223, axis=[1], exclude=True) /* ty=Tensor[(336), float32] */;
  %521 = sum(%243, axis=[1], exclude=True) /* ty=Tensor[(56), float32] */;
  %522 = sum(%253, axis=[1], exclude=True) /* ty=Tensor[(336), float32] */;
  %523 = sum(%263, axis=[1], exclude=True) /* ty=Tensor[(336), float32] */;
  %524 = sum(%273, axis=[1], exclude=True) /* ty=Tensor[(56), float32] */;
  %525 = sum(%283, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %526 = sum(%293, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %527 = sum(%313, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %528 = sum(%323, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %529 = sum(%333, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %530 = sum(%353, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %531 = sum(%363, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %532 = sum(%373, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %533 = sum(%383, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %534 = sum(%393, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %535 = transpose(%411, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 12, 1, 1), float32] */;
  %536 = transpose(%461, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 12, 1, 1), float32] */;
  %537 = transpose(%511, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 6, 1, 1), float32] */;
  (%512, %513, %514, %515, %516, %517, %518, %519, %520, %521, %522, %523, %524, %525, %526, %527, %528, %529, %530, %531, %532, %533, %534, %535, %536, %537)
}

