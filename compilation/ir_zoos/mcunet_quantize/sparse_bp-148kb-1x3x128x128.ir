def @main(%input: Tensor[(1, 3, 128, 128), int8], %v0_weight: Tensor[(16, 3, 3, 3), int8], %v0_bias: Tensor[(16), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(16), float32], %v1_conv_0_weight: Tensor[(16, 1, 3, 3), int8], %v1_conv_0_bias: Tensor[(16), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(16), float32], %v1_conv_1_weight: Tensor[(8, 16, 1, 1), int8], %v1_conv_1_bias: Tensor[(8), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(8), float32], %v2_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v2_conv_0_bias: Tensor[(48), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(48), float32], %v2_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v2_conv_1_bias: Tensor[(48), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(48), float32], %v2_conv_2_weight: Tensor[(8, 48, 1, 1), int8], %v2_conv_2_bias: Tensor[(8), int32], %v2_conv_2_zero_x: Tensor[(1), int8], %v2_conv_2_zero_y: Tensor[(1), int8], %v2_conv_2_scale: Tensor[(8), float32], %v3_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v3_conv_0_bias: Tensor[(48), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(48), float32], %v3_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v3_conv_1_bias: Tensor[(48), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(48), float32], %v3_conv_2_weight: Tensor[(8, 48, 1, 1), int8], %v3_conv_2_bias: Tensor[(8), int32], %v3_conv_2_zero_x: Tensor[(1), int8], %v3_conv_2_zero_y: Tensor[(1), int8], %v3_conv_2_scale: Tensor[(8), float32], %v3_qadd_zero_x1: Tensor[(1), int8], %v3_qadd_zero_x2: Tensor[(1), int8], %v3_qadd_scale_x1: Tensor[(1), float32], %v3_qadd_scale_x2: Tensor[(1), float32], %v3_qadd_zero_y: Tensor[(1), int8], %v3_qadd_scale_y: Tensor[(1), float32], %v4_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v4_conv_0_bias: Tensor[(48), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(48), float32], %v4_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v4_conv_1_bias: Tensor[(48), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(48), float32], %v4_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v4_conv_2_bias: Tensor[(16), int32], %v4_conv_2_zero_x: Tensor[(1), int8], %v4_conv_2_zero_y: Tensor[(1), int8], %v4_conv_2_scale: Tensor[(16), float32], %v5_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v5_conv_0_bias: Tensor[(96), int32], %v5_conv_0_zero_x: Tensor[(1), int8], %v5_conv_0_zero_y: Tensor[(1), int8], %v5_conv_0_scale: Tensor[(96), float32], %v5_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v5_conv_1_bias: Tensor[(96), int32], %v5_conv_1_zero_x: Tensor[(1), int8], %v5_conv_1_zero_y: Tensor[(1), int8], %v5_conv_1_scale: Tensor[(96), float32], %v5_conv_2_weight: Tensor[(16, 96, 1, 1), int8], %v5_conv_2_bias: Tensor[(16), int32], %v5_conv_2_zero_x: Tensor[(1), int8], %v5_conv_2_zero_y: Tensor[(1), int8], %v5_conv_2_scale: Tensor[(16), float32], %v5_qadd_zero_x1: Tensor[(1), int8], %v5_qadd_zero_x2: Tensor[(1), int8], %v5_qadd_scale_x1: Tensor[(1), float32], %v5_qadd_scale_x2: Tensor[(1), float32], %v5_qadd_zero_y: Tensor[(1), int8], %v5_qadd_scale_y: Tensor[(1), float32], %v6_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v6_conv_0_bias: Tensor[(96), int32], %v6_conv_0_zero_x: Tensor[(1), int8], %v6_conv_0_zero_y: Tensor[(1), int8], %v6_conv_0_scale: Tensor[(96), float32], %v6_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v6_conv_1_bias: Tensor[(96), int32], %v6_conv_1_zero_x: Tensor[(1), int8], %v6_conv_1_zero_y: Tensor[(1), int8], %v6_conv_1_scale: Tensor[(96), float32], %v6_conv_2_weight: Tensor[(16, 96, 1, 1), int8], %v6_conv_2_bias: Tensor[(16), int32], %v6_conv_2_zero_x: Tensor[(1), int8], %v6_conv_2_zero_y: Tensor[(1), int8], %v6_conv_2_scale: Tensor[(16), float32], %v6_qadd_zero_x1: Tensor[(1), int8], %v6_qadd_zero_x2: Tensor[(1), int8], %v6_qadd_scale_x1: Tensor[(1), float32], %v6_qadd_scale_x2: Tensor[(1), float32], %v6_qadd_zero_y: Tensor[(1), int8], %v6_qadd_scale_y: Tensor[(1), float32], %v7_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v7_conv_0_bias: Tensor[(96), int32], %v7_conv_0_zero_x: Tensor[(1), int8], %v7_conv_0_zero_y: Tensor[(1), int8], %v7_conv_0_scale: Tensor[(96), float32], %v7_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v7_conv_1_bias: Tensor[(96), int32], %v7_conv_1_zero_x: Tensor[(1), int8], %v7_conv_1_zero_y: Tensor[(1), int8], %v7_conv_1_scale: Tensor[(96), float32], %v7_conv_2_weight: Tensor[(24, 96, 1, 1), int8], %v7_conv_2_bias: Tensor[(24), int32], %v7_conv_2_zero_x: Tensor[(1), int8], %v7_conv_2_zero_y: Tensor[(1), int8], %v7_conv_2_scale: Tensor[(24), float32], %v8_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v8_conv_0_bias: Tensor[(144), int32], %v8_conv_0_zero_x: Tensor[(1), int8], %v8_conv_0_zero_y: Tensor[(1), int8], %v8_conv_0_scale: Tensor[(144), float32], %v8_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v8_conv_1_bias: Tensor[(144), int32], %v8_conv_1_zero_x: Tensor[(1), int8], %v8_conv_1_zero_y: Tensor[(1), int8], %v8_conv_1_scale: Tensor[(144), float32], %v8_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v8_conv_2_bias: Tensor[(24), int32], %v8_conv_2_zero_x: Tensor[(1), int8], %v8_conv_2_zero_y: Tensor[(1), int8], %v8_conv_2_scale: Tensor[(24), float32], %v8_qadd_zero_x1: Tensor[(1), int8], %v8_qadd_zero_x2: Tensor[(1), int8], %v8_qadd_scale_x1: Tensor[(1), float32], %v8_qadd_scale_x2: Tensor[(1), float32], %v8_qadd_zero_y: Tensor[(1), int8], %v8_qadd_scale_y: Tensor[(1), float32], %v9_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v9_conv_0_bias: Tensor[(144), int32], %v9_conv_0_zero_x: Tensor[(1), int8], %v9_conv_0_zero_y: Tensor[(1), int8], %v9_conv_0_scale: Tensor[(144), float32], %v9_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v9_conv_1_bias: Tensor[(144), int32], %v9_conv_1_zero_x: Tensor[(1), int8], %v9_conv_1_zero_y: Tensor[(1), int8], %v9_conv_1_scale: Tensor[(144), float32], %v9_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v9_conv_2_bias: Tensor[(24), int32], %v9_conv_2_zero_x: Tensor[(1), int8], %v9_conv_2_zero_y: Tensor[(1), int8], %v9_conv_2_scale: Tensor[(24), float32], %v9_qadd_zero_x1: Tensor[(1), int8], %v9_qadd_zero_x2: Tensor[(1), int8], %v9_qadd_scale_x1: Tensor[(1), float32], %v9_qadd_scale_x2: Tensor[(1), float32], %v9_qadd_zero_y: Tensor[(1), int8], %v9_qadd_scale_y: Tensor[(1), float32], %v10_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v10_conv_0_bias: Tensor[(144), int32], %v10_conv_0_zero_x: Tensor[(1), int8], %v10_conv_0_zero_y: Tensor[(1), int8], %v10_conv_0_scale: Tensor[(144), float32], %v10_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v10_conv_1_bias: Tensor[(144), int32], %v10_conv_1_zero_x: Tensor[(1), int8], %v10_conv_1_zero_y: Tensor[(1), int8], %v10_conv_1_scale: Tensor[(144), float32], %v10_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v10_conv_2_bias: Tensor[(24), int32], %v10_conv_2_zero_x: Tensor[(1), int8], %v10_conv_2_zero_y: Tensor[(1), int8], %v10_conv_2_scale: Tensor[(24), float32], %v10_qadd_zero_x1: Tensor[(1), int8], %v10_qadd_zero_x2: Tensor[(1), int8], %v10_qadd_scale_x1: Tensor[(1), float32], %v10_qadd_scale_x2: Tensor[(1), float32], %v10_qadd_zero_y: Tensor[(1), int8], %v10_qadd_scale_y: Tensor[(1), float32], %v11_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v11_conv_0_bias: Tensor[(144), int32], %v11_conv_0_zero_x: Tensor[(1), int8], %v11_conv_0_zero_y: Tensor[(1), int8], %v11_conv_0_scale: Tensor[(144), float32], %v11_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v11_conv_1_bias: Tensor[(144), int32], %v11_conv_1_zero_x: Tensor[(1), int8], %v11_conv_1_zero_y: Tensor[(1), int8], %v11_conv_1_scale: Tensor[(144), float32], %v11_conv_2_weight: Tensor[(32, 144, 1, 1), int8], %v11_conv_2_bias: Tensor[(32), int32], %v11_conv_2_zero_x: Tensor[(1), int8], %v11_conv_2_zero_y: Tensor[(1), int8], %v11_conv_2_scale: Tensor[(32), float32], %v12_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v12_conv_0_bias: Tensor[(192), int32], %v12_conv_0_zero_x: Tensor[(1), int8], %v12_conv_0_zero_y: Tensor[(1), int8], %v12_conv_0_scale: Tensor[(192), float32], %v12_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v12_conv_1_bias: Tensor[(192), int32], %v12_conv_1_zero_x: Tensor[(1), int8], %v12_conv_1_zero_y: Tensor[(1), int8], %v12_conv_1_scale: Tensor[(192), float32], %v12_conv_2_weight: Tensor[(32, 192, 1, 1), int8], %v12_conv_2_bias: Tensor[(32), int32], %v12_conv_2_zero_x: Tensor[(1), int8], %v12_conv_2_zero_y: Tensor[(1), int8], %v12_conv_2_scale: Tensor[(32), float32], %v12_qadd_zero_x1: Tensor[(1), int8], %v12_qadd_zero_x2: Tensor[(1), int8], %v12_qadd_scale_x1: Tensor[(1), float32], %v12_qadd_scale_x2: Tensor[(1), float32], %v12_qadd_zero_y: Tensor[(1), int8], %v12_qadd_scale_y: Tensor[(1), float32], %v13_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v13_conv_0_bias: Tensor[(192), int32], %v13_conv_0_zero_x: Tensor[(1), int8], %v13_conv_0_zero_y: Tensor[(1), int8], %v13_conv_0_scale: Tensor[(192), float32], %v13_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v13_conv_1_bias: Tensor[(192), int32], %v13_conv_1_zero_x: Tensor[(1), int8], %v13_conv_1_zero_y: Tensor[(1), int8], %v13_conv_1_scale: Tensor[(192), float32], %v13_conv_2_weight: Tensor[(32, 192, 1, 1), int8], %v13_conv_2_bias: Tensor[(32), int32], %v13_conv_2_zero_x: Tensor[(1), int8], %v13_conv_2_zero_y: Tensor[(1), int8], %v13_conv_2_scale: Tensor[(32), float32], %v13_qadd_zero_x1: Tensor[(1), int8], %v13_qadd_zero_x2: Tensor[(1), int8], %v13_qadd_scale_x1: Tensor[(1), float32], %v13_qadd_scale_x2: Tensor[(1), float32], %v13_qadd_zero_y: Tensor[(1), int8], %v13_qadd_scale_y: Tensor[(1), float32], %v14_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v14_conv_0_bias: Tensor[(192), int32], %v14_conv_0_zero_x: Tensor[(1), int8], %v14_conv_0_zero_y: Tensor[(1), int8], %v14_conv_0_scale: Tensor[(192), float32], %v14_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v14_conv_1_bias: Tensor[(192), int32], %v14_conv_1_zero_x: Tensor[(1), int8], %v14_conv_1_zero_y: Tensor[(1), int8], %v14_conv_1_scale: Tensor[(192), float32], %v14_conv_2_weight: Tensor[(56, 192, 1, 1), int8], %v14_conv_2_bias: Tensor[(56), int32], %v14_conv_2_zero_x: Tensor[(1), int8], %v14_conv_2_zero_y: Tensor[(1), int8], %v14_conv_2_scale: Tensor[(56), float32], %v15_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v15_conv_0_bias: Tensor[(336), int32], %v15_conv_0_zero_x: Tensor[(1), int8], %v15_conv_0_zero_y: Tensor[(1), int8], %v15_conv_0_scale: Tensor[(336), float32], %v15_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v15_conv_1_bias: Tensor[(336), int32], %v15_conv_1_zero_x: Tensor[(1), int8], %v15_conv_1_zero_y: Tensor[(1), int8], %v15_conv_1_scale: Tensor[(336), float32], %v15_conv_2_weight: Tensor[(56, 336, 1, 1), int8], %v15_conv_2_bias: Tensor[(56), int32], %v15_conv_2_zero_x: Tensor[(1), int8], %v15_conv_2_zero_y: Tensor[(1), int8], %v15_conv_2_scale: Tensor[(56), float32], %v15_qadd_zero_x1: Tensor[(1), int8], %v15_qadd_zero_x2: Tensor[(1), int8], %v15_qadd_scale_x1: Tensor[(1), float32], %v15_qadd_scale_x2: Tensor[(1), float32], %v15_qadd_zero_y: Tensor[(1), int8], %v15_qadd_scale_y: Tensor[(1), float32], %v16_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v16_conv_0_bias: Tensor[(336), int32], %v16_conv_0_zero_x: Tensor[(1), int8], %v16_conv_0_zero_y: Tensor[(1), int8], %v16_conv_0_scale: Tensor[(336), float32], %v16_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v16_conv_1_bias: Tensor[(336), int32], %v16_conv_1_zero_x: Tensor[(1), int8], %v16_conv_1_zero_y: Tensor[(1), int8], %v16_conv_1_scale: Tensor[(336), float32], %v16_conv_2_weight: Tensor[(56, 336, 1, 1), int8], %v16_conv_2_bias: Tensor[(56), int32], %v16_conv_2_zero_x: Tensor[(1), int8], %v16_conv_2_zero_y: Tensor[(1), int8], %v16_conv_2_scale: Tensor[(56), float32], %v16_qadd_zero_x1: Tensor[(1), int8], %v16_qadd_zero_x2: Tensor[(1), int8], %v16_qadd_scale_x1: Tensor[(1), float32], %v16_qadd_scale_x2: Tensor[(1), float32], %v16_qadd_zero_y: Tensor[(1), int8], %v16_qadd_scale_y: Tensor[(1), float32], %v17_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v17_conv_0_bias: Tensor[(336), int32], %v17_conv_0_zero_x: Tensor[(1), int8], %v17_conv_0_zero_y: Tensor[(1), int8], %v17_conv_0_scale: Tensor[(336), float32], %v17_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v17_conv_1_bias: Tensor[(336), int32], %v17_conv_1_zero_x: Tensor[(1), int8], %v17_conv_1_zero_y: Tensor[(1), int8], %v17_conv_1_scale: Tensor[(336), float32], %v17_conv_2_weight: Tensor[(112, 336, 1, 1), int8], %v17_conv_2_bias: Tensor[(112), int32], %v17_conv_2_zero_x: Tensor[(1), int8], %v17_conv_2_zero_y: Tensor[(1), int8], %v17_conv_2_scale: Tensor[(112), float32], %v18_weight: Tensor[(10, 112, 1, 1), int8], %v18_bias: Tensor[(10), int32], %v18_zero_x: Tensor[(1), int8], %v18_zero_y: Tensor[(1), int8], %v18_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), int32], Tensor[(10, 112, 1, 1), int8], Tensor[(112), int32], Tensor[(336), int32], Tensor[(336), int32], Tensor[(56), int32], Tensor[(336), int32], Tensor[(336), int32], Tensor[(56), int32], Tensor[(336), int32], Tensor[(336), int32], Tensor[(56), int32], Tensor[(192), int32], Tensor[(192), float32], Tensor[(192, 16, 1, 1), float32], Tensor[(32), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(32), int32], Tensor[(144), int32], Tensor[(144), int32], Tensor[(144, 24, 1, 1), int8], Tensor[(24), int32], Tensor[(144), int32], Tensor[(144, 24, 1, 1), int8], Tensor[(144, 24, 1, 1), int8], Tensor[(144, 24, 1, 1), int8]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1 = nn.mcutruncate(%0) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[1, 1, 1, 1], groups=16) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %3 = nn.mcutruncate(%2) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %5 = nn.mcutruncate(%4) /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 64, 64), int32] */;
  %7 = nn.mcutruncate(%6) /* ty=Tensor[(1, 48, 64, 64), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %9 = nn.mcutruncate(%8) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %10 = nn.mcuconv2d(%9, %v2_conv_2_weight, %v2_conv_2_bias, %v2_conv_2_zero_x, %v2_conv_2_zero_y, %v2_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %11 = nn.mcutruncate(%10) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %13 = nn.mcutruncate(%12) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %14 = nn.mcuconv2d(%13, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %15 = nn.mcutruncate(%14) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %16 = nn.mcuconv2d(%15, %v3_conv_2_weight, %v3_conv_2_bias, %v3_conv_2_zero_x, %v3_conv_2_zero_y, %v3_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %17 = nn.mcutruncate(%16) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %18 = nn.mcuadd(%11, %17, %v3_qadd_zero_x1, %v3_qadd_zero_x2, %v3_qadd_scale_x1, %v3_qadd_scale_x2, %v3_qadd_zero_y, %v3_qadd_scale_y, axis=0) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %19 = nn.mcutruncate(%18) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %20 = nn.mcuconv2d(%19, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %21 = nn.mcutruncate(%20) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %22 = nn.mcuconv2d(%21, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %23 = nn.mcutruncate(%22) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %24 = nn.mcuconv2d(%23, %v4_conv_2_weight, %v4_conv_2_bias, %v4_conv_2_zero_x, %v4_conv_2_zero_y, %v4_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %25 = nn.mcutruncate(%24) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %26 = nn.mcuconv2d(%25, %v5_conv_0_weight, %v5_conv_0_bias, %v5_conv_0_zero_x, %v5_conv_0_zero_y, %v5_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %27 = nn.mcutruncate(%26) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %28 = nn.mcuconv2d(%27, %v5_conv_1_weight, %v5_conv_1_bias, %v5_conv_1_zero_x, %v5_conv_1_zero_y, %v5_conv_1_scale, padding=[1, 1, 1, 1], groups=96) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %29 = nn.mcutruncate(%28) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %30 = nn.mcuconv2d(%29, %v5_conv_2_weight, %v5_conv_2_bias, %v5_conv_2_zero_x, %v5_conv_2_zero_y, %v5_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %31 = nn.mcutruncate(%30) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %32 = nn.mcuadd(%25, %31, %v5_qadd_zero_x1, %v5_qadd_zero_x2, %v5_qadd_scale_x1, %v5_qadd_scale_x2, %v5_qadd_zero_y, %v5_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %33 = nn.mcutruncate(%32) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %34 = nn.mcuconv2d(%33, %v6_conv_0_weight, %v6_conv_0_bias, %v6_conv_0_zero_x, %v6_conv_0_zero_y, %v6_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %35 = nn.mcutruncate(%34) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %36 = nn.mcuconv2d(%35, %v6_conv_1_weight, %v6_conv_1_bias, %v6_conv_1_zero_x, %v6_conv_1_zero_y, %v6_conv_1_scale, padding=[1, 1, 1, 1], groups=96) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %37 = nn.mcutruncate(%36) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %38 = nn.mcuconv2d(%37, %v6_conv_2_weight, %v6_conv_2_bias, %v6_conv_2_zero_x, %v6_conv_2_zero_y, %v6_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %39 = nn.mcutruncate(%38) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %40 = nn.mcuadd(%33, %39, %v6_qadd_zero_x1, %v6_qadd_zero_x2, %v6_qadd_scale_x1, %v6_qadd_scale_x2, %v6_qadd_zero_y, %v6_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %41 = nn.mcutruncate(%40) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %42 = nn.mcuconv2d(%41, %v7_conv_0_weight, %v7_conv_0_bias, %v7_conv_0_zero_x, %v7_conv_0_zero_y, %v7_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %43 = nn.mcutruncate(%42) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %44 = nn.mcuconv2d(%43, %v7_conv_1_weight, %v7_conv_1_bias, %v7_conv_1_zero_x, %v7_conv_1_zero_y, %v7_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %45 = nn.mcutruncate(%44) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %46 = nn.mcuconv2d(%45, %v7_conv_2_weight, %v7_conv_2_bias, %v7_conv_2_zero_x, %v7_conv_2_zero_y, %v7_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %47 = nn.mcutruncate(%46) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %48 = nn.mcuconv2d(%47, %v8_conv_0_weight, %v8_conv_0_bias, %v8_conv_0_zero_x, %v8_conv_0_zero_y, %v8_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %49 = nn.mcutruncate(%48) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %50 = nn.mcuconv2d(%49, %v8_conv_1_weight, %v8_conv_1_bias, %v8_conv_1_zero_x, %v8_conv_1_zero_y, %v8_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %51 = nn.mcutruncate(%50) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %52 = nn.mcuconv2d(%51, %v8_conv_2_weight, %v8_conv_2_bias, %v8_conv_2_zero_x, %v8_conv_2_zero_y, %v8_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %53 = nn.mcutruncate(%52) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %54 = nn.mcuadd(%47, %53, %v8_qadd_zero_x1, %v8_qadd_zero_x2, %v8_qadd_scale_x1, %v8_qadd_scale_x2, %v8_qadd_zero_y, %v8_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %55 = nn.mcutruncate(%54) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %56 = nn.mcuconv2d(%55, %v9_conv_0_weight, %v9_conv_0_bias, %v9_conv_0_zero_x, %v9_conv_0_zero_y, %v9_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %57 = nn.mcutruncate(%56) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %58 = nn.mcuconv2d(%57, %v9_conv_1_weight, %v9_conv_1_bias, %v9_conv_1_zero_x, %v9_conv_1_zero_y, %v9_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %59 = nn.mcutruncate(%58) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %60 = nn.mcuconv2d(%59, %v9_conv_2_weight, %v9_conv_2_bias, %v9_conv_2_zero_x, %v9_conv_2_zero_y, %v9_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %61 = nn.mcutruncate(%60) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %62 = nn.mcuadd(%55, %61, %v9_qadd_zero_x1, %v9_qadd_zero_x2, %v9_qadd_scale_x1, %v9_qadd_scale_x2, %v9_qadd_zero_y, %v9_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %63 = nn.mcutruncate(%62) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %64 = nn.mcuconv2d(%63, %v10_conv_0_weight, %v10_conv_0_bias, %v10_conv_0_zero_x, %v10_conv_0_zero_y, %v10_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %65 = nn.mcutruncate(%64) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %66 = nn.mcuconv2d(%65, %v10_conv_1_weight, %v10_conv_1_bias, %v10_conv_1_zero_x, %v10_conv_1_zero_y, %v10_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %67 = nn.mcutruncate(%66) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %68 = nn.mcuconv2d(%67, %v10_conv_2_weight, %v10_conv_2_bias, %v10_conv_2_zero_x, %v10_conv_2_zero_y, %v10_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %69 = nn.mcutruncate(%68) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %70 = nn.mcuadd(%63, %69, %v10_qadd_zero_x1, %v10_qadd_zero_x2, %v10_qadd_scale_x1, %v10_qadd_scale_x2, %v10_qadd_zero_y, %v10_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %71 = nn.mcutruncate(%70) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %72 = nn.mcuconv2d(%71, %v11_conv_0_weight, %v11_conv_0_bias, %v11_conv_0_zero_x, %v11_conv_0_zero_y, %v11_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %73 = nn.mcutruncate(%72) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %74 = nn.mcuconv2d(%73, %v11_conv_1_weight, %v11_conv_1_bias, %v11_conv_1_zero_x, %v11_conv_1_zero_y, %v11_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %75 = nn.mcutruncate(%74) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %76 = nn.mcuconv2d(%75, %v11_conv_2_weight, %v11_conv_2_bias, %v11_conv_2_zero_x, %v11_conv_2_zero_y, %v11_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %77 = nn.mcutruncate(%76) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %78 = nn.mcuconv2d(%77, %v12_conv_0_weight, %v12_conv_0_bias, %v12_conv_0_zero_x, %v12_conv_0_zero_y, %v12_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %79 = nn.mcutruncate(%78) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %80 = nn.mcuconv2d(%79, %v12_conv_1_weight, %v12_conv_1_bias, %v12_conv_1_zero_x, %v12_conv_1_zero_y, %v12_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %81 = nn.mcutruncate(%80) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %82 = nn.mcuconv2d(%81, %v12_conv_2_weight, %v12_conv_2_bias, %v12_conv_2_zero_x, %v12_conv_2_zero_y, %v12_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %83 = nn.mcutruncate(%82) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %84 = nn.mcuadd(%77, %83, %v12_qadd_zero_x1, %v12_qadd_zero_x2, %v12_qadd_scale_x1, %v12_qadd_scale_x2, %v12_qadd_zero_y, %v12_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %85 = nn.mcutruncate(%84) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %86 = nn.mcuconv2d(%85, %v13_conv_0_weight, %v13_conv_0_bias, %v13_conv_0_zero_x, %v13_conv_0_zero_y, %v13_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %87 = nn.mcutruncate(%86) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %88 = nn.mcuconv2d(%87, %v13_conv_1_weight, %v13_conv_1_bias, %v13_conv_1_zero_x, %v13_conv_1_zero_y, %v13_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %89 = nn.mcutruncate(%88) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %90 = nn.mcuconv2d(%89, %v13_conv_2_weight, %v13_conv_2_bias, %v13_conv_2_zero_x, %v13_conv_2_zero_y, %v13_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %91 = nn.mcutruncate(%90) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %92 = nn.mcuadd(%85, %91, %v13_qadd_zero_x1, %v13_qadd_zero_x2, %v13_qadd_scale_x1, %v13_qadd_scale_x2, %v13_qadd_zero_y, %v13_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %93 = nn.mcutruncate(%92) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %94 = nn.mcuconv2d(%93, %v14_conv_0_weight, %v14_conv_0_bias, %v14_conv_0_zero_x, %v14_conv_0_zero_y, %v14_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %95 = nn.mcutruncate(%94) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %96 = nn.mcuconv2d(%95, %v14_conv_1_weight, %v14_conv_1_bias, %v14_conv_1_zero_x, %v14_conv_1_zero_y, %v14_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %97 = nn.mcutruncate(%96) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %98 = nn.mcuconv2d(%97, %v14_conv_2_weight, %v14_conv_2_bias, %v14_conv_2_zero_x, %v14_conv_2_zero_y, %v14_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %99 = nn.mcutruncate(%98) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %100 = nn.mcuconv2d(%99, %v15_conv_0_weight, %v15_conv_0_bias, %v15_conv_0_zero_x, %v15_conv_0_zero_y, %v15_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %101 = nn.mcutruncate(%100) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %102 = nn.mcuconv2d(%101, %v15_conv_1_weight, %v15_conv_1_bias, %v15_conv_1_zero_x, %v15_conv_1_zero_y, %v15_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %103 = nn.mcutruncate(%102) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %104 = nn.mcuconv2d(%103, %v15_conv_2_weight, %v15_conv_2_bias, %v15_conv_2_zero_x, %v15_conv_2_zero_y, %v15_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %105 = nn.mcutruncate(%104) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %106 = nn.mcuadd(%99, %105, %v15_qadd_zero_x1, %v15_qadd_zero_x2, %v15_qadd_scale_x1, %v15_qadd_scale_x2, %v15_qadd_zero_y, %v15_qadd_scale_y, axis=0) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %107 = nn.mcutruncate(%106) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %108 = nn.mcuconv2d(%107, %v16_conv_0_weight, %v16_conv_0_bias, %v16_conv_0_zero_x, %v16_conv_0_zero_y, %v16_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %109 = nn.mcutruncate(%108) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %110 = nn.mcuconv2d(%109, %v16_conv_1_weight, %v16_conv_1_bias, %v16_conv_1_zero_x, %v16_conv_1_zero_y, %v16_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %111 = nn.mcutruncate(%110) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %112 = nn.mcuconv2d(%111, %v16_conv_2_weight, %v16_conv_2_bias, %v16_conv_2_zero_x, %v16_conv_2_zero_y, %v16_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %113 = nn.mcutruncate(%112) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %114 = nn.mcuadd(%107, %113, %v16_qadd_zero_x1, %v16_qadd_zero_x2, %v16_qadd_scale_x1, %v16_qadd_scale_x2, %v16_qadd_zero_y, %v16_qadd_scale_y, axis=0) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %115 = nn.mcutruncate(%114) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %116 = nn.mcuconv2d(%115, %v17_conv_0_weight, %v17_conv_0_bias, %v17_conv_0_zero_x, %v17_conv_0_zero_y, %v17_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %117 = nn.mcutruncate(%116) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %118 = nn.mcuconv2d(%117, %v17_conv_1_weight, %v17_conv_1_bias, %v17_conv_1_zero_x, %v17_conv_1_zero_y, %v17_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %119 = nn.mcutruncate(%118) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %120 = nn.mcuconv2d(%119, %v17_conv_2_weight, %v17_conv_2_bias, %v17_conv_2_zero_x, %v17_conv_2_zero_y, %v17_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 112, 4, 4), int32] */;
  %121 = nn.mcutruncate(%120) /* ty=Tensor[(1, 112, 4, 4), int8] */;
  %122 = mcumean(%121, axis=[2, 3], keepdims=True) /* ty=Tensor[(1, 112, 1, 1), int8] */;
  %123 = nn.mcuconv2d(%122, %v18_weight, %v18_bias, %v18_zero_x, %v18_zero_y, %v18_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %124 = nn.mcutruncate(%123) /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %125 = reshape(%124, newshape=[0, 0]) /* ty=Tensor[(1, 10), int8] */;
  %126 = cast(%125, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %127 = nn.log_softmax(%126) /* ty=Tensor[(1, 10), float32] */;
  %128 = greater_equal(%123, -128 /* ty=int32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %129 = less_equal(%123, 127 /* ty=int32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %130 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %131 = negative(%130) /* ty=float32 */;
  %132 = multiply(%131, %label) /* ty=Tensor[(1, 10), float32] */;
  %133 = sum(%132, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %134 = exp(%127) /* ty=Tensor[(1, 10), float32] */;
  %135 = multiply(%133, %134) /* ty=Tensor[(1, 10), float32] */;
  %136 = subtract(%132, %135) /* ty=Tensor[(1, 10), float32] */;
  %137 = multiply(%128, %129) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %138 = reshape(%136, newshape=[1, 10, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %139 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %140 = where(%137, %138, %139) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %141 = cast(%140, dtype="int32") /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %142 = reshape(%122, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 112, 1, 1), int8] */;
  %143 = tile(%140, reps=[1, 112, 1, 1]) /* ty=Tensor[(1, 1120, 1, 1), float32] */;
  %144 = cast(%142, dtype="float32") /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %145 = reshape(%143, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1120, 1, 1, 1), float32] */;
  %146 = nn.conv2d(%144, %145, padding=[0, 0, 0, 0], groups=112, out_dtype="float32") /* ty=Tensor[(1, 1120, 1, 1), float32] */;
  %147 = reshape(%146, newshape=[1, 112, 10, 1, 1]) /* ty=Tensor[(1, 112, 10, 1, 1), float32] */;
  %148 = sum(%147, axis=[0]) /* ty=Tensor[(112, 10, 1, 1), float32] */;
  %149 = transpose(%148, axes=[1, 0, 2, 3]) /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %150 = abs(%149) /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %151 = max(%150, axis=[1], keepdims=True) /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %152 = divide(%151, 127f /* ty=float32 */) /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %153 = divide(%149, %152) /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %154 = greater_equal(%120, -128 /* ty=int32 */) /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %155 = less_equal(%120, 127 /* ty=int32 */) /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %156 = cast(%v18_weight, dtype="float32") /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %157 = nn.conv2d_transpose(%140, %156, channels=112, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %158 = abs(%157) /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %159 = max(%158, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %160 = divide(%159, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %161 = divide(%157, %160) /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %162 = cast(%161, dtype="int8") /* ty=Tensor[(1, 112, 1, 1), int8] */;
  %163 = cast(%162, dtype="float32") /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %164 = multiply(%163, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %165 = ones(shape=[1, 112, 4, 4], dtype="float32") /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %166 = multiply(%154, %155) /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %167 = multiply(%164, %165) /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %168 = zeros(shape=[1, 112, 4, 4], dtype="float32") /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %169 = where(%166, %167, %168) /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %170 = cast(%169, dtype="int32") /* ty=Tensor[(1, 112, 4, 4), int32] */;
  %171 = greater_equal(%118, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %172 = less_equal(%118, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %173 = cast(%v17_conv_2_weight, dtype="float32") /* ty=Tensor[(112, 336, 1, 1), float32] */;
  %174 = nn.conv2d_transpose(%169, %173, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %175 = abs(%174) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %176 = max(%175, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %177 = divide(%176, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %178 = divide(%174, %177) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %179 = multiply(%171, %172) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %180 = cast(%178, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %181 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %182 = where(%179, %180, %181) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %183 = cast(%182, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %184 = greater_equal(%116, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %185 = less_equal(%116, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %186 = nn.conv2d_transpose(%182, %v17_conv_1_weight, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %187 = abs(%186) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %188 = max(%187, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %189 = divide(%188, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %190 = divide(%186, %189) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %191 = multiply(%184, %185) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %192 = cast(%190, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %193 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %194 = where(%191, %192, %193) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %195 = cast(%194, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %196 = greater_equal(%112, -128 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %197 = less_equal(%112, 127 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %198 = greater_equal(%114, meta[relay.Constant][0] /* ty=int8 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %199 = less_equal(%114, meta[relay.Constant][1] /* ty=int8 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %200 = nn.conv2d_transpose(%194, %v17_conv_0_weight, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %201 = abs(%200) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %202 = max(%201, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %203 = divide(%202, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %204 = divide(%200, %203) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %205 = multiply(%198, %199) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %206 = cast(%204, dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %207 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %208 = where(%205, %206, %207) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %209 = cast(%208, dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %210 = reshape(%v16_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %211 = divide(%209, %210) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %212 = reshape(%v16_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %213 = multiply(%211, %212) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %214 = multiply(%196, %197) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %215 = cast(%213, dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %216 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %217 = where(%214, %215, %216) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %218 = cast(%217, dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %219 = greater_equal(%110, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %220 = less_equal(%110, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %221 = nn.conv2d_transpose(%217, %v16_conv_2_weight, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %222 = abs(%221) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %223 = max(%222, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %224 = divide(%223, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %225 = divide(%221, %224) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %226 = multiply(%219, %220) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %227 = cast(%225, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %228 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %229 = where(%226, %227, %228) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %230 = cast(%229, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %231 = greater_equal(%108, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %232 = less_equal(%108, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %233 = nn.conv2d_transpose(%229, %v16_conv_1_weight, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %234 = abs(%233) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %235 = max(%234, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %236 = divide(%235, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %237 = divide(%233, %236) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %238 = multiply(%231, %232) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %239 = cast(%237, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %240 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %241 = where(%238, %239, %240) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %242 = cast(%241, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %243 = greater_equal(%104, -128 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %244 = less_equal(%104, 127 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %245 = greater_equal(%106, meta[relay.Constant][2] /* ty=int8 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %246 = less_equal(%106, meta[relay.Constant][3] /* ty=int8 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %247 = nn.conv2d_transpose(%241, %v16_conv_0_weight, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %248 = abs(%247) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %249 = max(%248, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %250 = divide(%249, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %251 = divide(%247, %250) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %252 = multiply(%245, %246) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %253 = cast(%251, dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %254 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %255 = where(%252, %253, %254) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %256 = cast(%255, dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %257 = reshape(%v15_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %258 = divide(%256, %257) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %259 = reshape(%v15_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %260 = multiply(%258, %259) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %261 = multiply(%243, %244) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %262 = cast(%260, dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %263 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %264 = where(%261, %262, %263) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %265 = cast(%264, dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %266 = greater_equal(%102, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %267 = less_equal(%102, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %268 = nn.conv2d_transpose(%264, %v15_conv_2_weight, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %269 = abs(%268) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %270 = max(%269, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %271 = divide(%270, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %272 = divide(%268, %271) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %273 = multiply(%266, %267) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %274 = cast(%272, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %275 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %276 = where(%273, %274, %275) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %277 = cast(%276, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %278 = greater_equal(%100, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %279 = less_equal(%100, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %280 = nn.conv2d_transpose(%276, %v15_conv_1_weight, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %281 = abs(%280) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %282 = max(%281, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %283 = divide(%282, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %284 = divide(%280, %283) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %285 = multiply(%278, %279) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %286 = cast(%284, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %287 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %288 = where(%285, %286, %287) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %289 = cast(%288, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %290 = greater_equal(%98, -128 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %291 = less_equal(%98, 127 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %292 = nn.conv2d_transpose(%288, %v15_conv_0_weight, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %293 = abs(%292) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %294 = max(%293, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %295 = divide(%294, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %296 = divide(%292, %295) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %297 = multiply(%290, %291) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %298 = cast(%296, dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %299 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %300 = where(%297, %298, %299) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %301 = cast(%300, dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %302 = greater_equal(%96, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %303 = less_equal(%96, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %304 = nn.conv2d_transpose(%300, %v14_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %305 = abs(%304) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %306 = max(%305, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %307 = divide(%306, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %308 = divide(%304, %307) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %309 = multiply(%302, %303) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %310 = cast(%308, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %311 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %312 = where(%309, %310, %311) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %313 = cast(%312, dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %314 = greater_equal(%94, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %315 = less_equal(%94, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %316 = nn.conv2d_transpose(%312, %v14_conv_1_weight, channels=192, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %317 = abs(%316) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %318 = max(%317, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %319 = divide(%318, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %320 = divide(%316, %319) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %321 = multiply(%314, %315) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %322 = cast(%320, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %323 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %324 = where(%321, %322, %323) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %325 = cast(%324, dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %326 = reshape(%v14_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %327 = multiply(%325, %326) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %328 = cast(%93, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %329 = strided_slice(%328, begin=[0, 0, 0, 0], end=[1, 16, 8, 8], strides=[1], axes=None) /* ty=Tensor[(1, 16, 8, 8), float32] */;
  %330 = tile(%327, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 3072, 8, 8), float32] */;
  %331 = reshape(%329, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 8, 8), float32] */;
  %332 = reshape(%330, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3072, 1, 8, 8), float32] */;
  %333 = nn.conv2d(%331, %332, padding=[0, 0, 0, 0], groups=16) /* ty=Tensor[(1, 3072, 1, 1), float32] */;
  %334 = reshape(%333, newshape=[1, 16, 192, 1, 1]) /* ty=Tensor[(1, 16, 192, 1, 1), float32] */;
  %335 = sum(%334, axis=[0]) /* ty=Tensor[(16, 192, 1, 1), float32] */;
  %336 = greater_equal(%90, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %337 = less_equal(%90, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %338 = greater_equal(%92, meta[relay.Constant][4] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %339 = less_equal(%92, meta[relay.Constant][5] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %340 = cast(%v14_conv_0_weight, dtype="float32") /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %341 = multiply(%338, %339) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %342 = nn.conv2d_transpose(%327, %340, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %343 = zeros(shape=[1, 32, 8, 8], dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %344 = where(%341, %342, %343) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %345 = reshape(%v13_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %346 = divide(%344, %345) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %347 = reshape(%v13_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %348 = multiply(%336, %337) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %349 = multiply(%346, %347) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %350 = zeros(shape=[1, 32, 8, 8], dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %351 = where(%348, %349, %350) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %352 = cast(%351, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %353 = greater_equal(%88, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %354 = less_equal(%88, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %355 = cast(%v13_conv_2_weight, dtype="float32") /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %356 = nn.conv2d_transpose(%351, %355, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %357 = abs(%356) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %358 = max(%357, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), float32] */;
  %359 = divide(%358, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 8, 8), float32] */;
  %360 = divide(%356, %359) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %361 = multiply(%353, %354) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %362 = cast(%360, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %363 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %364 = where(%361, %362, %363) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %365 = cast(%364, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %366 = greater_equal(%86, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %367 = less_equal(%86, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %368 = nn.conv2d_transpose(%364, %v13_conv_1_weight, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %369 = abs(%368) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %370 = max(%369, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %371 = divide(%370, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %372 = divide(%368, %371) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %373 = multiply(%366, %367) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %374 = cast(%372, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %375 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %376 = where(%373, %374, %375) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %377 = cast(%376, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %378 = tile(%376, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 8, 8), int8] */;
  %379 = reshape(%85, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %380 = reshape(%378, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 8, 8), int8] */;
  %381 = nn.conv2d(%379, %380, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %382 = reshape(%381, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), int32] */;
  %383 = sum(%382, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %384 = transpose(%383, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %385 = abs(%384) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %386 = max(%385, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %387 = divide(%386, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %388 = divide(%384, %387) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %389 = greater_equal(%82, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %390 = less_equal(%82, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %391 = greater_equal(%84, meta[relay.Constant][6] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %392 = less_equal(%84, meta[relay.Constant][7] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %393 = nn.conv2d_transpose(%376, %v13_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %394 = abs(%393) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %395 = max(%394, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %396 = divide(%395, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %397 = divide(%393, %396) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %398 = multiply(%391, %392) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %399 = cast(%397, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %400 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %401 = where(%398, %399, %400) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %402 = cast(%401, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %403 = reshape(%v12_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %404 = divide(%402, %403) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %405 = reshape(%v12_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %406 = multiply(%404, %405) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %407 = multiply(%389, %390) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %408 = cast(%406, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %409 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %410 = where(%407, %408, %409) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %411 = cast(%410, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %412 = greater_equal(%80, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %413 = less_equal(%80, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %414 = nn.conv2d_transpose(%410, %v12_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %415 = abs(%414) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %416 = max(%415, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %417 = divide(%416, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %418 = divide(%414, %417) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %419 = multiply(%412, %413) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %420 = cast(%418, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %421 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %422 = where(%419, %420, %421) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %423 = cast(%422, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %424 = greater_equal(%78, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %425 = less_equal(%78, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %426 = nn.conv2d_transpose(%422, %v12_conv_1_weight, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %427 = abs(%426) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %428 = max(%427, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %429 = divide(%428, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %430 = divide(%426, %429) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %431 = multiply(%424, %425) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %432 = cast(%430, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %433 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %434 = where(%431, %432, %433) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %435 = cast(%434, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %436 = greater_equal(%76, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %437 = less_equal(%76, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %438 = nn.conv2d_transpose(%434, %v12_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %439 = abs(%438) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %440 = max(%439, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %441 = divide(%440, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %442 = divide(%438, %441) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %443 = multiply(%436, %437) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %444 = cast(%442, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %445 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %446 = where(%443, %444, %445) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %447 = cast(%446, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %448 = greater_equal(%74, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %449 = less_equal(%74, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %450 = nn.conv2d_transpose(%446, %v11_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %451 = abs(%450) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %452 = max(%451, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %453 = divide(%452, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %454 = divide(%450, %453) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %455 = multiply(%448, %449) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %456 = cast(%454, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %457 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %458 = where(%455, %456, %457) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %459 = cast(%458, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %460 = greater_equal(%72, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %461 = less_equal(%72, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %462 = nn.conv2d_transpose(%458, %v11_conv_1_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %463 = abs(%462) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %464 = max(%463, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %465 = divide(%464, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %466 = divide(%462, %465) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %467 = multiply(%460, %461) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %468 = cast(%466, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %469 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %470 = where(%467, %468, %469) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %471 = cast(%470, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %472 = tile(%470, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 3456, 8, 8), int8] */;
  %473 = reshape(%71, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %474 = reshape(%472, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 8, 8), int8] */;
  %475 = nn.conv2d(%473, %474, padding=[0, 0, 0, 0], groups=24, out_dtype="int32") /* ty=Tensor[(1, 3456, 1, 1), int32] */;
  %476 = reshape(%475, newshape=[1, 24, 144, 1, 1]) /* ty=Tensor[(1, 24, 144, 1, 1), int32] */;
  %477 = sum(%476, axis=[0]) /* ty=Tensor[(24, 144, 1, 1), int32] */;
  %478 = transpose(%477, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %479 = abs(%478) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %480 = max(%479, axis=[1], keepdims=True) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %481 = divide(%480, 127 /* ty=int32 */) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %482 = divide(%478, %481) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %483 = greater_equal(%68, -128 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %484 = less_equal(%68, 127 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %485 = greater_equal(%70, meta[relay.Constant][8] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %486 = less_equal(%70, meta[relay.Constant][9] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %487 = nn.conv2d_transpose(%470, %v11_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %488 = abs(%487) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %489 = max(%488, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %490 = divide(%489, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %491 = divide(%487, %490) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %492 = multiply(%485, %486) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %493 = cast(%491, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %494 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %495 = where(%492, %493, %494) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %496 = cast(%495, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %497 = reshape(%v10_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %498 = divide(%496, %497) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %499 = reshape(%v10_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %500 = multiply(%498, %499) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %501 = multiply(%483, %484) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %502 = cast(%500, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %503 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %504 = where(%501, %502, %503) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %505 = cast(%504, dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %506 = greater_equal(%66, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %507 = less_equal(%66, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %508 = nn.conv2d_transpose(%504, %v10_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %509 = abs(%508) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %510 = max(%509, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %511 = divide(%510, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %512 = divide(%508, %511) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %513 = multiply(%506, %507) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %514 = cast(%512, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %515 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %516 = where(%513, %514, %515) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %517 = cast(%516, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %518 = greater_equal(%64, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %519 = less_equal(%64, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %520 = nn.conv2d_transpose(%516, %v10_conv_1_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %521 = abs(%520) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %522 = max(%521, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %523 = divide(%522, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %524 = divide(%520, %523) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %525 = multiply(%518, %519) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %526 = cast(%524, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %527 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %528 = where(%525, %526, %527) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %529 = tile(%528, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 3456, 8, 8), int8] */;
  %530 = reshape(%63, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %531 = reshape(%529, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 8, 8), int8] */;
  %532 = nn.conv2d(%530, %531, padding=[0, 0, 0, 0], groups=24, out_dtype="int32") /* ty=Tensor[(1, 3456, 1, 1), int32] */;
  %533 = reshape(%532, newshape=[1, 24, 144, 1, 1]) /* ty=Tensor[(1, 24, 144, 1, 1), int32] */;
  %534 = sum(%533, axis=[0]) /* ty=Tensor[(24, 144, 1, 1), int32] */;
  %535 = transpose(%534, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %536 = abs(%535) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %537 = max(%536, axis=[1], keepdims=True) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %538 = divide(%537, 127 /* ty=int32 */) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %539 = divide(%535, %538) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %540 = greater_equal(%56, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %541 = less_equal(%56, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %542 = greater_equal(%58, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %543 = less_equal(%58, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %544 = greater_equal(%60, -128 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %545 = less_equal(%60, 127 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %546 = greater_equal(%62, meta[relay.Constant][10] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %547 = less_equal(%62, meta[relay.Constant][11] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %548 = nn.conv2d_transpose(%528, %v10_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %549 = abs(%548) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %550 = max(%549, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %551 = divide(%550, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %552 = divide(%548, %551) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %553 = multiply(%546, %547) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %554 = cast(%552, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %555 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %556 = where(%553, %554, %555) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %557 = cast(%556, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %558 = reshape(%v9_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %559 = divide(%557, %558) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %560 = reshape(%v9_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %561 = multiply(%559, %560) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %562 = multiply(%544, %545) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %563 = cast(%561, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %564 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %565 = where(%562, %563, %564) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %566 = nn.conv2d_transpose(%565, %v9_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %567 = abs(%566) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %568 = max(%567, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %569 = divide(%568, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %570 = divide(%566, %569) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %571 = multiply(%542, %543) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %572 = cast(%570, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %573 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %574 = where(%571, %572, %573) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %575 = nn.conv2d_transpose(%574, %v9_conv_1_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %576 = abs(%575) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %577 = max(%576, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %578 = divide(%577, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %579 = divide(%575, %578) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %580 = multiply(%540, %541) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %581 = cast(%579, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %582 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %583 = where(%580, %581, %582) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %584 = tile(%583, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 3456, 8, 8), int8] */;
  %585 = reshape(%55, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %586 = reshape(%584, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 8, 8), int8] */;
  %587 = nn.conv2d(%585, %586, padding=[0, 0, 0, 0], groups=24, out_dtype="int32") /* ty=Tensor[(1, 3456, 1, 1), int32] */;
  %588 = reshape(%587, newshape=[1, 24, 144, 1, 1]) /* ty=Tensor[(1, 24, 144, 1, 1), int32] */;
  %589 = sum(%588, axis=[0]) /* ty=Tensor[(24, 144, 1, 1), int32] */;
  %590 = transpose(%589, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %591 = abs(%590) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %592 = max(%591, axis=[1], keepdims=True) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %593 = divide(%592, 127 /* ty=int32 */) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %594 = divide(%590, %593) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %595 = greater_equal(%48, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %596 = less_equal(%48, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %597 = greater_equal(%50, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %598 = less_equal(%50, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %599 = greater_equal(%52, -128 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %600 = less_equal(%52, 127 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %601 = greater_equal(%54, meta[relay.Constant][12] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %602 = less_equal(%54, meta[relay.Constant][13] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %603 = nn.conv2d_transpose(%583, %v9_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %604 = abs(%603) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %605 = max(%604, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %606 = divide(%605, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %607 = divide(%603, %606) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %608 = multiply(%601, %602) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %609 = cast(%607, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %610 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %611 = where(%608, %609, %610) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %612 = cast(%611, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %613 = reshape(%v8_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %614 = divide(%612, %613) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %615 = reshape(%v8_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %616 = multiply(%614, %615) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %617 = multiply(%599, %600) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %618 = cast(%616, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %619 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %620 = where(%617, %618, %619) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %621 = nn.conv2d_transpose(%620, %v8_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %622 = abs(%621) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %623 = max(%622, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %624 = divide(%623, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %625 = divide(%621, %624) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %626 = multiply(%597, %598) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %627 = cast(%625, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %628 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %629 = where(%626, %627, %628) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %630 = nn.conv2d_transpose(%629, %v8_conv_1_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %631 = abs(%630) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %632 = max(%631, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %633 = divide(%632, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %634 = divide(%630, %633) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %635 = multiply(%595, %596) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %636 = cast(%634, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %637 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %638 = where(%635, %636, %637) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %639 = tile(%638, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 3456, 8, 8), int8] */;
  %640 = reshape(%47, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %641 = reshape(%639, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 8, 8), int8] */;
  %642 = nn.conv2d(%640, %641, padding=[0, 0, 0, 0], groups=24, out_dtype="int32") /* ty=Tensor[(1, 3456, 1, 1), int32] */;
  %643 = reshape(%642, newshape=[1, 24, 144, 1, 1]) /* ty=Tensor[(1, 24, 144, 1, 1), int32] */;
  %644 = sum(%643, axis=[0]) /* ty=Tensor[(24, 144, 1, 1), int32] */;
  %645 = transpose(%644, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %646 = abs(%645) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %647 = max(%646, axis=[1], keepdims=True) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %648 = divide(%647, 127 /* ty=int32 */) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %649 = divide(%645, %648) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %650 = nn.cross_entropy_with_logits(%127, %label) /* ty=float32 */;
  %651 = sum(%141, axis=[1], exclude=True) /* ty=Tensor[(10), int32] */;
  %652 = cast(%153, dtype="int8") /* ty=Tensor[(10, 112, 1, 1), int8] */;
  %653 = sum(%170, axis=[1], exclude=True) /* ty=Tensor[(112), int32] */;
  %654 = sum(%183, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %655 = sum(%195, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %656 = sum(%218, axis=[1], exclude=True) /* ty=Tensor[(56), int32] */;
  %657 = sum(%230, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %658 = sum(%242, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %659 = sum(%265, axis=[1], exclude=True) /* ty=Tensor[(56), int32] */;
  %660 = sum(%277, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %661 = sum(%289, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %662 = sum(%301, axis=[1], exclude=True) /* ty=Tensor[(56), int32] */;
  %663 = sum(%313, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %664 = sum(%327, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %665 = transpose(%335, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 16, 1, 1), float32] */;
  %666 = sum(%352, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %667 = sum(%365, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %668 = sum(%377, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %669 = cast(%388, dtype="int8") /* ty=Tensor[(192, 32, 1, 1), int8] */;
  %670 = sum(%411, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %671 = sum(%423, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %672 = sum(%435, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %673 = sum(%447, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %674 = sum(%459, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %675 = sum(%471, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %676 = cast(%482, dtype="int8") /* ty=Tensor[(144, 24, 1, 1), int8] */;
  %677 = sum(%505, axis=[1], exclude=True) /* ty=Tensor[(24), int32] */;
  %678 = sum(%517, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %679 = cast(%539, dtype="int8") /* ty=Tensor[(144, 24, 1, 1), int8] */;
  %680 = cast(%594, dtype="int8") /* ty=Tensor[(144, 24, 1, 1), int8] */;
  %681 = cast(%649, dtype="int8") /* ty=Tensor[(144, 24, 1, 1), int8] */;
  (%650, %651, %652, %653, %654, %655, %656, %657, %658, %659, %660, %661, %662, %663, %664, %665, %666, %667, %668, %669, %670, %671, %672, %673, %674, %675, %676, %677, %678, %679, %680, %681)
}

