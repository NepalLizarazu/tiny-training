def @main(%input: Tensor[(1, 1, 49, 10), int8], %v0_weight: Tensor[(64, 1, 10, 10), int8], %v0_bias: Tensor[(64), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(64), float32], %v1_conv_0_weight: Tensor[(64, 1, 3, 3), int8], %v1_conv_0_bias: Tensor[(64), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(64), float32], %v1_conv_1_weight: Tensor[(64, 64, 1, 1), int8], %v1_conv_1_bias: Tensor[(64), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(64), float32], %v2_conv_0_weight: Tensor[(64, 1, 3, 3), int8], %v2_conv_0_bias: Tensor[(64), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(64), float32], %v2_conv_1_weight: Tensor[(64, 64, 1, 1), int8], %v2_conv_1_bias: Tensor[(64), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(64), float32], %v3_conv_0_weight: Tensor[(64, 1, 3, 3), int8], %v3_conv_0_bias: Tensor[(64), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(64), float32], %v3_conv_1_weight: Tensor[(64, 64, 1, 1), int8], %v3_conv_1_bias: Tensor[(64), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(64), float32], %v4_conv_0_weight: Tensor[(64, 1, 3, 3), int8], %v4_conv_0_bias: Tensor[(64), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(64), float32], %v4_conv_1_weight: Tensor[(64, 64, 1, 1), int8], %v4_conv_1_bias: Tensor[(64), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(64), float32], %v5_weight: Tensor[(10, 64, 1, 1), int8], %v5_bias: Tensor[(10), int32], %v5_zero_x: Tensor[(1), int8], %v5_zero_y: Tensor[(1), int8], %v5_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), float32], Tensor[(10, 64, 1, 1), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[4, 1, 4, 1]) /* ty=Tensor[(1, 64, 24, 2), int32] */;
  %1 = nn.mcutruncate(%0) /* ty=Tensor[(1, 64, 24, 2), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[1, 1, 1, 1], groups=64) /* ty=Tensor[(1, 64, 24, 2), int32] */;
  %3 = nn.mcutruncate(%2) /* ty=Tensor[(1, 64, 24, 2), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 24, 2), int32] */;
  %5 = nn.mcutruncate(%4) /* ty=Tensor[(1, 64, 24, 2), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[1, 1, 1, 1], groups=64) /* ty=Tensor[(1, 64, 24, 2), int32] */;
  %7 = nn.mcutruncate(%6) /* ty=Tensor[(1, 64, 24, 2), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 24, 2), int32] */;
  %9 = nn.mcutruncate(%8) /* ty=Tensor[(1, 64, 24, 2), int8] */;
  %10 = nn.mcuconv2d(%9, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[1, 1, 1, 1], groups=64) /* ty=Tensor[(1, 64, 24, 2), int32] */;
  %11 = nn.mcutruncate(%10) /* ty=Tensor[(1, 64, 24, 2), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 24, 2), int32] */;
  %13 = nn.mcutruncate(%12) /* ty=Tensor[(1, 64, 24, 2), int8] */;
  %14 = nn.mcuconv2d(%13, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[1, 1, 1, 1], groups=64) /* ty=Tensor[(1, 64, 24, 2), int32] */;
  %15 = nn.mcutruncate(%14) /* ty=Tensor[(1, 64, 24, 2), int8] */;
  %16 = nn.mcuconv2d(%15, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 24, 2), int32] */;
  %17 = nn.mcutruncate(%16) /* ty=Tensor[(1, 64, 24, 2), int8] */;
  %18 = mcumean(%17, axis=[2, 3], keepdims=True) /* ty=Tensor[(1, 64, 1, 1), int8] */;
  %19 = nn.mcuconv2d(%18, %v5_weight, %v5_bias, %v5_zero_x, %v5_zero_y, %v5_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %20 = nn.mcutruncate(%19) /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %21 = reshape(%20, newshape=[0, 0]) /* ty=Tensor[(1, 10), int8] */;
  %22 = cast(%21, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %23 = nn.log_softmax(%22) /* ty=Tensor[(1, 10), float32] */;
  %24 = cast(%19, dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %25 = greater_equal(%24, -128f /* ty=float32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %26 = less_equal(%24, 127f /* ty=float32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %27 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %28 = negative(%27) /* ty=float32 */;
  %29 = multiply(%28, %label) /* ty=Tensor[(1, 10), float32] */;
  %30 = sum(%29, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %31 = exp(%23) /* ty=Tensor[(1, 10), float32] */;
  %32 = multiply(%30, %31) /* ty=Tensor[(1, 10), float32] */;
  %33 = subtract(%29, %32) /* ty=Tensor[(1, 10), float32] */;
  %34 = multiply(%25, %26) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %35 = reshape(%33, newshape=[1, 10, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %36 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %37 = where(%34, %35, %36) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %38 = reshape(%v5_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %39 = multiply(%37, %38) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %40 = cast(%18, dtype="float32") /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %41 = tile(%39, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 640, 1, 1), float32] */;
  %42 = reshape(%40, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %43 = reshape(%41, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(640, 1, 1, 1), float32] */;
  %44 = nn.conv2d(%42, %43, padding=[0, 0, 0, 0], groups=64) /* ty=Tensor[(1, 640, 1, 1), float32] */;
  %45 = reshape(%44, newshape=[1, 64, 10, 1, 1]) /* ty=Tensor[(1, 64, 10, 1, 1), float32] */;
  %46 = sum(%45, axis=[0]) /* ty=Tensor[(64, 10, 1, 1), float32] */;
  %47 = cast(%16, dtype="float32") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %48 = greater_equal(%47, -128f /* ty=float32 */) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %49 = less_equal(%47, 127f /* ty=float32 */) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %50 = cast(%v5_weight, dtype="float32") /* ty=Tensor[(10, 64, 1, 1), float32] */;
  %51 = nn.conv2d_transpose(%39, %50, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %52 = multiply(%51, 0.0208333f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %53 = ones(shape=[1, 64, 24, 2], dtype="float32") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %54 = multiply(%48, %49) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %55 = multiply(%52, %53) /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %56 = zeros(shape=[1, 64, 24, 2], dtype="float32") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %57 = where(%54, %55, %56) /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %58 = reshape(%v4_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %59 = multiply(%57, %58) /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %60 = cast(%14, dtype="float32") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %61 = greater_equal(%60, -128f /* ty=float32 */) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %62 = less_equal(%60, 127f /* ty=float32 */) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %63 = cast(%v4_conv_1_weight, dtype="float32") /* ty=Tensor[(64, 64, 1, 1), float32] */;
  %64 = multiply(%61, %62) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %65 = nn.conv2d_transpose(%59, %63, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %66 = zeros(shape=[1, 64, 24, 2], dtype="float32") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %67 = where(%64, %65, %66) /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %68 = reshape(%v4_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %69 = multiply(%67, %68) /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %70 = cast(%12, dtype="float32") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %71 = greater_equal(%70, -128f /* ty=float32 */) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %72 = less_equal(%70, 127f /* ty=float32 */) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %73 = cast(%v4_conv_0_weight, dtype="float32") /* ty=Tensor[(64, 1, 3, 3), float32] */;
  %74 = multiply(%71, %72) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %75 = nn.conv2d_transpose(%69, %73, channels=64, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=64, kernel_layout="IOHW") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %76 = zeros(shape=[1, 64, 24, 2], dtype="float32") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %77 = where(%74, %75, %76) /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %78 = reshape(%v3_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %79 = multiply(%77, %78) /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %80 = cast(%10, dtype="float32") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %81 = greater_equal(%80, -128f /* ty=float32 */) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %82 = less_equal(%80, 127f /* ty=float32 */) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %83 = cast(%v3_conv_1_weight, dtype="float32") /* ty=Tensor[(64, 64, 1, 1), float32] */;
  %84 = multiply(%81, %82) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %85 = nn.conv2d_transpose(%79, %83, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %86 = zeros(shape=[1, 64, 24, 2], dtype="float32") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %87 = where(%84, %85, %86) /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %88 = reshape(%v3_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %89 = multiply(%87, %88) /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %90 = cast(%8, dtype="float32") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %91 = greater_equal(%90, -128f /* ty=float32 */) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %92 = less_equal(%90, 127f /* ty=float32 */) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %93 = cast(%v3_conv_0_weight, dtype="float32") /* ty=Tensor[(64, 1, 3, 3), float32] */;
  %94 = multiply(%91, %92) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %95 = nn.conv2d_transpose(%89, %93, channels=64, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=64, kernel_layout="IOHW") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %96 = zeros(shape=[1, 64, 24, 2], dtype="float32") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %97 = where(%94, %95, %96) /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %98 = reshape(%v2_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %99 = multiply(%97, %98) /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %100 = cast(%6, dtype="float32") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %101 = greater_equal(%100, -128f /* ty=float32 */) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %102 = less_equal(%100, 127f /* ty=float32 */) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %103 = cast(%v2_conv_1_weight, dtype="float32") /* ty=Tensor[(64, 64, 1, 1), float32] */;
  %104 = multiply(%101, %102) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %105 = nn.conv2d_transpose(%99, %103, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %106 = zeros(shape=[1, 64, 24, 2], dtype="float32") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %107 = where(%104, %105, %106) /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %108 = reshape(%v2_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %109 = multiply(%107, %108) /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %110 = cast(%4, dtype="float32") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %111 = greater_equal(%110, -128f /* ty=float32 */) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %112 = less_equal(%110, 127f /* ty=float32 */) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %113 = cast(%v2_conv_0_weight, dtype="float32") /* ty=Tensor[(64, 1, 3, 3), float32] */;
  %114 = multiply(%111, %112) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %115 = nn.conv2d_transpose(%109, %113, channels=64, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=64, kernel_layout="IOHW") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %116 = zeros(shape=[1, 64, 24, 2], dtype="float32") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %117 = where(%114, %115, %116) /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %118 = reshape(%v1_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %119 = multiply(%117, %118) /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %120 = cast(%2, dtype="float32") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %121 = greater_equal(%120, -128f /* ty=float32 */) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %122 = less_equal(%120, 127f /* ty=float32 */) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %123 = cast(%v1_conv_1_weight, dtype="float32") /* ty=Tensor[(64, 64, 1, 1), float32] */;
  %124 = multiply(%121, %122) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %125 = nn.conv2d_transpose(%119, %123, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %126 = zeros(shape=[1, 64, 24, 2], dtype="float32") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %127 = where(%124, %125, %126) /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %128 = reshape(%v1_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %129 = multiply(%127, %128) /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %130 = cast(%0, dtype="float32") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %131 = greater_equal(%130, -128f /* ty=float32 */) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %132 = less_equal(%130, 127f /* ty=float32 */) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %133 = cast(%v1_conv_0_weight, dtype="float32") /* ty=Tensor[(64, 1, 3, 3), float32] */;
  %134 = multiply(%131, %132) /* ty=Tensor[(1, 64, 24, 2), bool] */;
  %135 = nn.conv2d_transpose(%129, %133, channels=64, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=64, kernel_layout="IOHW") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %136 = zeros(shape=[1, 64, 24, 2], dtype="float32") /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %137 = where(%134, %135, %136) /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %138 = reshape(%v0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %139 = multiply(%137, %138) /* ty=Tensor[(1, 64, 24, 2), float32] */;
  %140 = nn.cross_entropy_with_logits(%23, %label) /* ty=float32 */;
  %141 = sum(%39, axis=[1], exclude=True) /* ty=Tensor[(10), float32] */;
  %142 = transpose(%46, axes=[1, 0, 2, 3]) /* ty=Tensor[(10, 64, 1, 1), float32] */;
  %143 = sum(%59, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %144 = sum(%69, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %145 = sum(%79, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %146 = sum(%89, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %147 = sum(%99, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %148 = sum(%109, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %149 = sum(%119, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %150 = sum(%129, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %151 = sum(%139, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  (%140, %141, %142, %143, %144, %145, %146, %147, %148, %149, %150, %151)
}
