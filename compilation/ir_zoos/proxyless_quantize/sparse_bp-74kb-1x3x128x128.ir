def @main(%input: Tensor[(1, 3, 128, 128), int8], %v0_weight: Tensor[(16, 3, 3, 3), int8], %v0_bias: Tensor[(16), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(16), float32], %v1_conv_0_weight: Tensor[(16, 1, 3, 3), int8], %v1_conv_0_bias: Tensor[(16), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(16), float32], %v1_conv_1_weight: Tensor[(8, 16, 1, 1), int8], %v1_conv_1_bias: Tensor[(8), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(8), float32], %v2_conv_0_weight: Tensor[(24, 8, 1, 1), int8], %v2_conv_0_bias: Tensor[(24), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(24), float32], %v2_conv_1_weight: Tensor[(24, 1, 5, 5), int8], %v2_conv_1_bias: Tensor[(24), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(24), float32], %v2_conv_2_weight: Tensor[(16, 24, 1, 1), int8], %v2_conv_2_bias: Tensor[(16), int32], %v2_conv_2_zero_x: Tensor[(1), int8], %v2_conv_2_zero_y: Tensor[(1), int8], %v2_conv_2_scale: Tensor[(16), float32], %v3_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v3_conv_0_bias: Tensor[(48), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(48), float32], %v3_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v3_conv_1_bias: Tensor[(48), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(48), float32], %v3_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v3_conv_2_bias: Tensor[(16), int32], %v3_conv_2_zero_x: Tensor[(1), int8], %v3_conv_2_zero_y: Tensor[(1), int8], %v3_conv_2_scale: Tensor[(16), float32], %v3_qadd_zero_x1: Tensor[(1), int8], %v3_qadd_zero_x2: Tensor[(1), int8], %v3_qadd_scale_x1: Tensor[(1), float32], %v3_qadd_scale_x2: Tensor[(1), float32], %v3_qadd_zero_y: Tensor[(1), int8], %v3_qadd_scale_y: Tensor[(1), float32], %v4_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v4_conv_0_bias: Tensor[(48), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(48), float32], %v4_conv_1_weight: Tensor[(48, 1, 7, 7), int8], %v4_conv_1_bias: Tensor[(48), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(48), float32], %v4_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v4_conv_2_bias: Tensor[(16), int32], %v4_conv_2_zero_x: Tensor[(1), int8], %v4_conv_2_zero_y: Tensor[(1), int8], %v4_conv_2_scale: Tensor[(16), float32], %v5_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v5_conv_0_bias: Tensor[(48), int32], %v5_conv_0_zero_x: Tensor[(1), int8], %v5_conv_0_zero_y: Tensor[(1), int8], %v5_conv_0_scale: Tensor[(48), float32], %v5_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v5_conv_1_bias: Tensor[(48), int32], %v5_conv_1_zero_x: Tensor[(1), int8], %v5_conv_1_zero_y: Tensor[(1), int8], %v5_conv_1_scale: Tensor[(48), float32], %v5_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v5_conv_2_bias: Tensor[(16), int32], %v5_conv_2_zero_x: Tensor[(1), int8], %v5_conv_2_zero_y: Tensor[(1), int8], %v5_conv_2_scale: Tensor[(16), float32], %v5_qadd_zero_x1: Tensor[(1), int8], %v5_qadd_zero_x2: Tensor[(1), int8], %v5_qadd_scale_x1: Tensor[(1), float32], %v5_qadd_scale_x2: Tensor[(1), float32], %v5_qadd_zero_y: Tensor[(1), int8], %v5_qadd_scale_y: Tensor[(1), float32], %v6_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v6_conv_0_bias: Tensor[(48), int32], %v6_conv_0_zero_x: Tensor[(1), int8], %v6_conv_0_zero_y: Tensor[(1), int8], %v6_conv_0_scale: Tensor[(48), float32], %v6_conv_1_weight: Tensor[(48, 1, 5, 5), int8], %v6_conv_1_bias: Tensor[(48), int32], %v6_conv_1_zero_x: Tensor[(1), int8], %v6_conv_1_zero_y: Tensor[(1), int8], %v6_conv_1_scale: Tensor[(48), float32], %v6_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v6_conv_2_bias: Tensor[(16), int32], %v6_conv_2_zero_x: Tensor[(1), int8], %v6_conv_2_zero_y: Tensor[(1), int8], %v6_conv_2_scale: Tensor[(16), float32], %v6_qadd_zero_x1: Tensor[(1), int8], %v6_qadd_zero_x2: Tensor[(1), int8], %v6_qadd_scale_x1: Tensor[(1), float32], %v6_qadd_scale_x2: Tensor[(1), float32], %v6_qadd_zero_y: Tensor[(1), int8], %v6_qadd_scale_y: Tensor[(1), float32], %v7_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v7_conv_0_bias: Tensor[(48), int32], %v7_conv_0_zero_x: Tensor[(1), int8], %v7_conv_0_zero_y: Tensor[(1), int8], %v7_conv_0_scale: Tensor[(48), float32], %v7_conv_1_weight: Tensor[(48, 1, 5, 5), int8], %v7_conv_1_bias: Tensor[(48), int32], %v7_conv_1_zero_x: Tensor[(1), int8], %v7_conv_1_zero_y: Tensor[(1), int8], %v7_conv_1_scale: Tensor[(48), float32], %v7_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v7_conv_2_bias: Tensor[(16), int32], %v7_conv_2_zero_x: Tensor[(1), int8], %v7_conv_2_zero_y: Tensor[(1), int8], %v7_conv_2_scale: Tensor[(16), float32], %v7_qadd_zero_x1: Tensor[(1), int8], %v7_qadd_zero_x2: Tensor[(1), int8], %v7_qadd_scale_x1: Tensor[(1), float32], %v7_qadd_scale_x2: Tensor[(1), float32], %v7_qadd_zero_y: Tensor[(1), int8], %v7_qadd_scale_y: Tensor[(1), float32], %v8_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v8_conv_0_bias: Tensor[(96), int32], %v8_conv_0_zero_x: Tensor[(1), int8], %v8_conv_0_zero_y: Tensor[(1), int8], %v8_conv_0_scale: Tensor[(96), float32], %v8_conv_1_weight: Tensor[(96, 1, 7, 7), int8], %v8_conv_1_bias: Tensor[(96), int32], %v8_conv_1_zero_x: Tensor[(1), int8], %v8_conv_1_zero_y: Tensor[(1), int8], %v8_conv_1_scale: Tensor[(96), float32], %v8_conv_2_weight: Tensor[(24, 96, 1, 1), int8], %v8_conv_2_bias: Tensor[(24), int32], %v8_conv_2_zero_x: Tensor[(1), int8], %v8_conv_2_zero_y: Tensor[(1), int8], %v8_conv_2_scale: Tensor[(24), float32], %v9_conv_0_weight: Tensor[(72, 24, 1, 1), int8], %v9_conv_0_bias: Tensor[(72), int32], %v9_conv_0_zero_x: Tensor[(1), int8], %v9_conv_0_zero_y: Tensor[(1), int8], %v9_conv_0_scale: Tensor[(72), float32], %v9_conv_1_weight: Tensor[(72, 1, 5, 5), int8], %v9_conv_1_bias: Tensor[(72), int32], %v9_conv_1_zero_x: Tensor[(1), int8], %v9_conv_1_zero_y: Tensor[(1), int8], %v9_conv_1_scale: Tensor[(72), float32], %v9_conv_2_weight: Tensor[(24, 72, 1, 1), int8], %v9_conv_2_bias: Tensor[(24), int32], %v9_conv_2_zero_x: Tensor[(1), int8], %v9_conv_2_zero_y: Tensor[(1), int8], %v9_conv_2_scale: Tensor[(24), float32], %v9_qadd_zero_x1: Tensor[(1), int8], %v9_qadd_zero_x2: Tensor[(1), int8], %v9_qadd_scale_x1: Tensor[(1), float32], %v9_qadd_scale_x2: Tensor[(1), float32], %v9_qadd_zero_y: Tensor[(1), int8], %v9_qadd_scale_y: Tensor[(1), float32], %v10_conv_0_weight: Tensor[(72, 24, 1, 1), int8], %v10_conv_0_bias: Tensor[(72), int32], %v10_conv_0_zero_x: Tensor[(1), int8], %v10_conv_0_zero_y: Tensor[(1), int8], %v10_conv_0_scale: Tensor[(72), float32], %v10_conv_1_weight: Tensor[(72, 1, 5, 5), int8], %v10_conv_1_bias: Tensor[(72), int32], %v10_conv_1_zero_x: Tensor[(1), int8], %v10_conv_1_zero_y: Tensor[(1), int8], %v10_conv_1_scale: Tensor[(72), float32], %v10_conv_2_weight: Tensor[(24, 72, 1, 1), int8], %v10_conv_2_bias: Tensor[(24), int32], %v10_conv_2_zero_x: Tensor[(1), int8], %v10_conv_2_zero_y: Tensor[(1), int8], %v10_conv_2_scale: Tensor[(24), float32], %v10_qadd_zero_x1: Tensor[(1), int8], %v10_qadd_zero_x2: Tensor[(1), int8], %v10_qadd_scale_x1: Tensor[(1), float32], %v10_qadd_scale_x2: Tensor[(1), float32], %v10_qadd_zero_y: Tensor[(1), int8], %v10_qadd_scale_y: Tensor[(1), float32], %v11_conv_0_weight: Tensor[(72, 24, 1, 1), int8], %v11_conv_0_bias: Tensor[(72), int32], %v11_conv_0_zero_x: Tensor[(1), int8], %v11_conv_0_zero_y: Tensor[(1), int8], %v11_conv_0_scale: Tensor[(72), float32], %v11_conv_1_weight: Tensor[(72, 1, 5, 5), int8], %v11_conv_1_bias: Tensor[(72), int32], %v11_conv_1_zero_x: Tensor[(1), int8], %v11_conv_1_zero_y: Tensor[(1), int8], %v11_conv_1_scale: Tensor[(72), float32], %v11_conv_2_weight: Tensor[(24, 72, 1, 1), int8], %v11_conv_2_bias: Tensor[(24), int32], %v11_conv_2_zero_x: Tensor[(1), int8], %v11_conv_2_zero_y: Tensor[(1), int8], %v11_conv_2_scale: Tensor[(24), float32], %v11_qadd_zero_x1: Tensor[(1), int8], %v11_qadd_zero_x2: Tensor[(1), int8], %v11_qadd_scale_x1: Tensor[(1), float32], %v11_qadd_scale_x2: Tensor[(1), float32], %v11_qadd_zero_y: Tensor[(1), int8], %v11_qadd_scale_y: Tensor[(1), float32], %v12_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v12_conv_0_bias: Tensor[(144), int32], %v12_conv_0_zero_x: Tensor[(1), int8], %v12_conv_0_zero_y: Tensor[(1), int8], %v12_conv_0_scale: Tensor[(144), float32], %v12_conv_1_weight: Tensor[(144, 1, 5, 5), int8], %v12_conv_1_bias: Tensor[(144), int32], %v12_conv_1_zero_x: Tensor[(1), int8], %v12_conv_1_zero_y: Tensor[(1), int8], %v12_conv_1_scale: Tensor[(144), float32], %v12_conv_2_weight: Tensor[(32, 144, 1, 1), int8], %v12_conv_2_bias: Tensor[(32), int32], %v12_conv_2_zero_x: Tensor[(1), int8], %v12_conv_2_zero_y: Tensor[(1), int8], %v12_conv_2_scale: Tensor[(32), float32], %v13_conv_0_weight: Tensor[(96, 32, 1, 1), int8], %v13_conv_0_bias: Tensor[(96), int32], %v13_conv_0_zero_x: Tensor[(1), int8], %v13_conv_0_zero_y: Tensor[(1), int8], %v13_conv_0_scale: Tensor[(96), float32], %v13_conv_1_weight: Tensor[(96, 1, 5, 5), int8], %v13_conv_1_bias: Tensor[(96), int32], %v13_conv_1_zero_x: Tensor[(1), int8], %v13_conv_1_zero_y: Tensor[(1), int8], %v13_conv_1_scale: Tensor[(96), float32], %v13_conv_2_weight: Tensor[(32, 96, 1, 1), int8], %v13_conv_2_bias: Tensor[(32), int32], %v13_conv_2_zero_x: Tensor[(1), int8], %v13_conv_2_zero_y: Tensor[(1), int8], %v13_conv_2_scale: Tensor[(32), float32], %v13_qadd_zero_x1: Tensor[(1), int8], %v13_qadd_zero_x2: Tensor[(1), int8], %v13_qadd_scale_x1: Tensor[(1), float32], %v13_qadd_scale_x2: Tensor[(1), float32], %v13_qadd_zero_y: Tensor[(1), int8], %v13_qadd_scale_y: Tensor[(1), float32], %v14_conv_0_weight: Tensor[(96, 32, 1, 1), int8], %v14_conv_0_bias: Tensor[(96), int32], %v14_conv_0_zero_x: Tensor[(1), int8], %v14_conv_0_zero_y: Tensor[(1), int8], %v14_conv_0_scale: Tensor[(96), float32], %v14_conv_1_weight: Tensor[(96, 1, 5, 5), int8], %v14_conv_1_bias: Tensor[(96), int32], %v14_conv_1_zero_x: Tensor[(1), int8], %v14_conv_1_zero_y: Tensor[(1), int8], %v14_conv_1_scale: Tensor[(96), float32], %v14_conv_2_weight: Tensor[(32, 96, 1, 1), int8], %v14_conv_2_bias: Tensor[(32), int32], %v14_conv_2_zero_x: Tensor[(1), int8], %v14_conv_2_zero_y: Tensor[(1), int8], %v14_conv_2_scale: Tensor[(32), float32], %v14_qadd_zero_x1: Tensor[(1), int8], %v14_qadd_zero_x2: Tensor[(1), int8], %v14_qadd_scale_x1: Tensor[(1), float32], %v14_qadd_scale_x2: Tensor[(1), float32], %v14_qadd_zero_y: Tensor[(1), int8], %v14_qadd_scale_y: Tensor[(1), float32], %v15_conv_0_weight: Tensor[(96, 32, 1, 1), int8], %v15_conv_0_bias: Tensor[(96), int32], %v15_conv_0_zero_x: Tensor[(1), int8], %v15_conv_0_zero_y: Tensor[(1), int8], %v15_conv_0_scale: Tensor[(96), float32], %v15_conv_1_weight: Tensor[(96, 1, 5, 5), int8], %v15_conv_1_bias: Tensor[(96), int32], %v15_conv_1_zero_x: Tensor[(1), int8], %v15_conv_1_zero_y: Tensor[(1), int8], %v15_conv_1_scale: Tensor[(96), float32], %v15_conv_2_weight: Tensor[(32, 96, 1, 1), int8], %v15_conv_2_bias: Tensor[(32), int32], %v15_conv_2_zero_x: Tensor[(1), int8], %v15_conv_2_zero_y: Tensor[(1), int8], %v15_conv_2_scale: Tensor[(32), float32], %v15_qadd_zero_x1: Tensor[(1), int8], %v15_qadd_zero_x2: Tensor[(1), int8], %v15_qadd_scale_x1: Tensor[(1), float32], %v15_qadd_scale_x2: Tensor[(1), float32], %v15_qadd_zero_y: Tensor[(1), int8], %v15_qadd_scale_y: Tensor[(1), float32], %v16_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v16_conv_0_bias: Tensor[(192), int32], %v16_conv_0_zero_x: Tensor[(1), int8], %v16_conv_0_zero_y: Tensor[(1), int8], %v16_conv_0_scale: Tensor[(192), float32], %v16_conv_1_weight: Tensor[(192, 1, 7, 7), int8], %v16_conv_1_bias: Tensor[(192), int32], %v16_conv_1_zero_x: Tensor[(1), int8], %v16_conv_1_zero_y: Tensor[(1), int8], %v16_conv_1_scale: Tensor[(192), float32], %v16_conv_2_weight: Tensor[(64, 192, 1, 1), int8], %v16_conv_2_bias: Tensor[(64), int32], %v16_conv_2_zero_x: Tensor[(1), int8], %v16_conv_2_zero_y: Tensor[(1), int8], %v16_conv_2_scale: Tensor[(64), float32], %v17_conv_0_weight: Tensor[(384, 64, 1, 1), int8], %v17_conv_0_bias: Tensor[(384), int32], %v17_conv_0_zero_x: Tensor[(1), int8], %v17_conv_0_zero_y: Tensor[(1), int8], %v17_conv_0_scale: Tensor[(384), float32], %v17_conv_1_weight: Tensor[(384, 1, 7, 7), int8], %v17_conv_1_bias: Tensor[(384), int32], %v17_conv_1_zero_x: Tensor[(1), int8], %v17_conv_1_zero_y: Tensor[(1), int8], %v17_conv_1_scale: Tensor[(384), float32], %v17_conv_2_weight: Tensor[(64, 384, 1, 1), int8], %v17_conv_2_bias: Tensor[(64), int32], %v17_conv_2_zero_x: Tensor[(1), int8], %v17_conv_2_zero_y: Tensor[(1), int8], %v17_conv_2_scale: Tensor[(64), float32], %v17_qadd_zero_x1: Tensor[(1), int8], %v17_qadd_zero_x2: Tensor[(1), int8], %v17_qadd_scale_x1: Tensor[(1), float32], %v17_qadd_scale_x2: Tensor[(1), float32], %v17_qadd_zero_y: Tensor[(1), int8], %v17_qadd_scale_y: Tensor[(1), float32], %v18_conv_0_weight: Tensor[(192, 64, 1, 1), int8], %v18_conv_0_bias: Tensor[(192), int32], %v18_conv_0_zero_x: Tensor[(1), int8], %v18_conv_0_zero_y: Tensor[(1), int8], %v18_conv_0_scale: Tensor[(192), float32], %v18_conv_1_weight: Tensor[(192, 1, 7, 7), int8], %v18_conv_1_bias: Tensor[(192), int32], %v18_conv_1_zero_x: Tensor[(1), int8], %v18_conv_1_zero_y: Tensor[(1), int8], %v18_conv_1_scale: Tensor[(192), float32], %v18_conv_2_weight: Tensor[(64, 192, 1, 1), int8], %v18_conv_2_bias: Tensor[(64), int32], %v18_conv_2_zero_x: Tensor[(1), int8], %v18_conv_2_zero_y: Tensor[(1), int8], %v18_conv_2_scale: Tensor[(64), float32], %v18_qadd_zero_x1: Tensor[(1), int8], %v18_qadd_zero_x2: Tensor[(1), int8], %v18_qadd_scale_x1: Tensor[(1), float32], %v18_qadd_scale_x2: Tensor[(1), float32], %v18_qadd_zero_y: Tensor[(1), int8], %v18_qadd_scale_y: Tensor[(1), float32], %v19_conv_0_weight: Tensor[(192, 64, 1, 1), int8], %v19_conv_0_bias: Tensor[(192), int32], %v19_conv_0_zero_x: Tensor[(1), int8], %v19_conv_0_zero_y: Tensor[(1), int8], %v19_conv_0_scale: Tensor[(192), float32], %v19_conv_1_weight: Tensor[(192, 1, 7, 7), int8], %v19_conv_1_bias: Tensor[(192), int32], %v19_conv_1_zero_x: Tensor[(1), int8], %v19_conv_1_zero_y: Tensor[(1), int8], %v19_conv_1_scale: Tensor[(192), float32], %v19_conv_2_weight: Tensor[(64, 192, 1, 1), int8], %v19_conv_2_bias: Tensor[(64), int32], %v19_conv_2_zero_x: Tensor[(1), int8], %v19_conv_2_zero_y: Tensor[(1), int8], %v19_conv_2_scale: Tensor[(64), float32], %v19_qadd_zero_x1: Tensor[(1), int8], %v19_qadd_zero_x2: Tensor[(1), int8], %v19_qadd_scale_x1: Tensor[(1), float32], %v19_qadd_scale_x2: Tensor[(1), float32], %v19_qadd_zero_y: Tensor[(1), int8], %v19_qadd_scale_y: Tensor[(1), float32], %v20_conv_0_weight: Tensor[(384, 64, 1, 1), int8], %v20_conv_0_bias: Tensor[(384), int32], %v20_conv_0_zero_x: Tensor[(1), int8], %v20_conv_0_zero_y: Tensor[(1), int8], %v20_conv_0_scale: Tensor[(384), float32], %v20_conv_1_weight: Tensor[(384, 1, 7, 7), int8], %v20_conv_1_bias: Tensor[(384), int32], %v20_conv_1_zero_x: Tensor[(1), int8], %v20_conv_1_zero_y: Tensor[(1), int8], %v20_conv_1_scale: Tensor[(384), float32], %v20_conv_2_weight: Tensor[(96, 384, 1, 1), int8], %v20_conv_2_bias: Tensor[(96), int32], %v20_conv_2_zero_x: Tensor[(1), int8], %v20_conv_2_zero_y: Tensor[(1), int8], %v20_conv_2_scale: Tensor[(96), float32], %v21_weight: Tensor[(10, 96, 1, 1), int8], %v21_bias: Tensor[(10), int32], %v21_zero_x: Tensor[(1), int8], %v21_zero_y: Tensor[(1), int8], %v21_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), int32], Tensor[(10, 96, 1, 1), int8], Tensor[(96), int32], Tensor[(384), int32], Tensor[(384), float32], Tensor[(384, 32, 1, 1), float32], Tensor[(64), int32], Tensor[(192), int32], Tensor[(192), float32], Tensor[(192, 16, 1, 1), float32], Tensor[(64), int32], Tensor[(192), int32], Tensor[(192), float32], Tensor[(192, 32, 1, 1), float32], Tensor[(64), int32], Tensor[(384), int32], Tensor[(384), int32], Tensor[(64), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(96), int32], Tensor[(96), int32], Tensor[(96, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(96), int32], Tensor[(96), int32], Tensor[(96, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(96), int32], Tensor[(96), float32], Tensor[(96, 8, 1, 1), float32], Tensor[(32), int32], Tensor[(144), int32], Tensor[(144), float32], Tensor[(144, 12, 1, 1), float32], Tensor[(24), int32]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1 = nn.mcutruncate(%0) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[1, 1, 1, 1], groups=16) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %3 = nn.mcutruncate(%2) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %5 = nn.mcutruncate(%4) /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 64, 64), int32] */;
  %7 = nn.mcutruncate(%6) /* ty=Tensor[(1, 24, 64, 64), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, strides=[2, 2], padding=[2, 2, 2, 2], groups=24) /* ty=Tensor[(1, 24, 32, 32), int32] */;
  %9 = nn.mcutruncate(%8) /* ty=Tensor[(1, 24, 32, 32), int8] */;
  %10 = nn.mcuconv2d(%9, %v2_conv_2_weight, %v2_conv_2_bias, %v2_conv_2_zero_x, %v2_conv_2_zero_y, %v2_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %11 = nn.mcutruncate(%10) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %13 = nn.mcutruncate(%12) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %14 = nn.mcuconv2d(%13, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %15 = nn.mcutruncate(%14) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %16 = nn.mcuconv2d(%15, %v3_conv_2_weight, %v3_conv_2_bias, %v3_conv_2_zero_x, %v3_conv_2_zero_y, %v3_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %17 = nn.mcutruncate(%16) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %18 = nn.mcuadd(%11, %17, %v3_qadd_zero_x1, %v3_qadd_zero_x2, %v3_qadd_scale_x1, %v3_qadd_scale_x2, %v3_qadd_zero_y, %v3_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %19 = nn.mcutruncate(%18) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %20 = nn.mcuconv2d(%19, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %21 = nn.mcutruncate(%20) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %22 = nn.mcuconv2d(%21, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %23 = nn.mcutruncate(%22) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %24 = nn.mcuconv2d(%23, %v4_conv_2_weight, %v4_conv_2_bias, %v4_conv_2_zero_x, %v4_conv_2_zero_y, %v4_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %25 = nn.mcutruncate(%24) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %26 = nn.mcuconv2d(%25, %v5_conv_0_weight, %v5_conv_0_bias, %v5_conv_0_zero_x, %v5_conv_0_zero_y, %v5_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %27 = nn.mcutruncate(%26) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %28 = nn.mcuconv2d(%27, %v5_conv_1_weight, %v5_conv_1_bias, %v5_conv_1_zero_x, %v5_conv_1_zero_y, %v5_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %29 = nn.mcutruncate(%28) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %30 = nn.mcuconv2d(%29, %v5_conv_2_weight, %v5_conv_2_bias, %v5_conv_2_zero_x, %v5_conv_2_zero_y, %v5_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %31 = nn.mcutruncate(%30) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %32 = nn.mcuadd(%25, %31, %v5_qadd_zero_x1, %v5_qadd_zero_x2, %v5_qadd_scale_x1, %v5_qadd_scale_x2, %v5_qadd_zero_y, %v5_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %33 = nn.mcutruncate(%32) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %34 = nn.mcuconv2d(%33, %v6_conv_0_weight, %v6_conv_0_bias, %v6_conv_0_zero_x, %v6_conv_0_zero_y, %v6_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %35 = nn.mcutruncate(%34) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %36 = nn.mcuconv2d(%35, %v6_conv_1_weight, %v6_conv_1_bias, %v6_conv_1_zero_x, %v6_conv_1_zero_y, %v6_conv_1_scale, padding=[2, 2, 2, 2], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %37 = nn.mcutruncate(%36) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %38 = nn.mcuconv2d(%37, %v6_conv_2_weight, %v6_conv_2_bias, %v6_conv_2_zero_x, %v6_conv_2_zero_y, %v6_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %39 = nn.mcutruncate(%38) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %40 = nn.mcuadd(%33, %39, %v6_qadd_zero_x1, %v6_qadd_zero_x2, %v6_qadd_scale_x1, %v6_qadd_scale_x2, %v6_qadd_zero_y, %v6_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %41 = nn.mcutruncate(%40) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %42 = nn.mcuconv2d(%41, %v7_conv_0_weight, %v7_conv_0_bias, %v7_conv_0_zero_x, %v7_conv_0_zero_y, %v7_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %43 = nn.mcutruncate(%42) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %44 = nn.mcuconv2d(%43, %v7_conv_1_weight, %v7_conv_1_bias, %v7_conv_1_zero_x, %v7_conv_1_zero_y, %v7_conv_1_scale, padding=[2, 2, 2, 2], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %45 = nn.mcutruncate(%44) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %46 = nn.mcuconv2d(%45, %v7_conv_2_weight, %v7_conv_2_bias, %v7_conv_2_zero_x, %v7_conv_2_zero_y, %v7_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %47 = nn.mcutruncate(%46) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %48 = nn.mcuadd(%41, %47, %v7_qadd_zero_x1, %v7_qadd_zero_x2, %v7_qadd_scale_x1, %v7_qadd_scale_x2, %v7_qadd_zero_y, %v7_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %49 = nn.mcutruncate(%48) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %50 = nn.mcuconv2d(%49, %v8_conv_0_weight, %v8_conv_0_bias, %v8_conv_0_zero_x, %v8_conv_0_zero_y, %v8_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %51 = nn.mcutruncate(%50) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %52 = nn.mcuconv2d(%51, %v8_conv_1_weight, %v8_conv_1_bias, %v8_conv_1_zero_x, %v8_conv_1_zero_y, %v8_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %53 = nn.mcutruncate(%52) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %54 = nn.mcuconv2d(%53, %v8_conv_2_weight, %v8_conv_2_bias, %v8_conv_2_zero_x, %v8_conv_2_zero_y, %v8_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %55 = nn.mcutruncate(%54) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %56 = nn.mcuconv2d(%55, %v9_conv_0_weight, %v9_conv_0_bias, %v9_conv_0_zero_x, %v9_conv_0_zero_y, %v9_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %57 = nn.mcutruncate(%56) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %58 = nn.mcuconv2d(%57, %v9_conv_1_weight, %v9_conv_1_bias, %v9_conv_1_zero_x, %v9_conv_1_zero_y, %v9_conv_1_scale, padding=[2, 2, 2, 2], groups=72) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %59 = nn.mcutruncate(%58) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %60 = nn.mcuconv2d(%59, %v9_conv_2_weight, %v9_conv_2_bias, %v9_conv_2_zero_x, %v9_conv_2_zero_y, %v9_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %61 = nn.mcutruncate(%60) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %62 = nn.mcuadd(%55, %61, %v9_qadd_zero_x1, %v9_qadd_zero_x2, %v9_qadd_scale_x1, %v9_qadd_scale_x2, %v9_qadd_zero_y, %v9_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %63 = nn.mcutruncate(%62) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %64 = nn.mcuconv2d(%63, %v10_conv_0_weight, %v10_conv_0_bias, %v10_conv_0_zero_x, %v10_conv_0_zero_y, %v10_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %65 = nn.mcutruncate(%64) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %66 = nn.mcuconv2d(%65, %v10_conv_1_weight, %v10_conv_1_bias, %v10_conv_1_zero_x, %v10_conv_1_zero_y, %v10_conv_1_scale, padding=[2, 2, 2, 2], groups=72) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %67 = nn.mcutruncate(%66) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %68 = nn.mcuconv2d(%67, %v10_conv_2_weight, %v10_conv_2_bias, %v10_conv_2_zero_x, %v10_conv_2_zero_y, %v10_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %69 = nn.mcutruncate(%68) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %70 = nn.mcuadd(%63, %69, %v10_qadd_zero_x1, %v10_qadd_zero_x2, %v10_qadd_scale_x1, %v10_qadd_scale_x2, %v10_qadd_zero_y, %v10_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %71 = nn.mcutruncate(%70) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %72 = nn.mcuconv2d(%71, %v11_conv_0_weight, %v11_conv_0_bias, %v11_conv_0_zero_x, %v11_conv_0_zero_y, %v11_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %73 = nn.mcutruncate(%72) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %74 = nn.mcuconv2d(%73, %v11_conv_1_weight, %v11_conv_1_bias, %v11_conv_1_zero_x, %v11_conv_1_zero_y, %v11_conv_1_scale, padding=[2, 2, 2, 2], groups=72) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %75 = nn.mcutruncate(%74) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %76 = nn.mcuconv2d(%75, %v11_conv_2_weight, %v11_conv_2_bias, %v11_conv_2_zero_x, %v11_conv_2_zero_y, %v11_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %77 = nn.mcutruncate(%76) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %78 = nn.mcuadd(%71, %77, %v11_qadd_zero_x1, %v11_qadd_zero_x2, %v11_qadd_scale_x1, %v11_qadd_scale_x2, %v11_qadd_zero_y, %v11_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %79 = nn.mcutruncate(%78) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %80 = nn.mcuconv2d(%79, %v12_conv_0_weight, %v12_conv_0_bias, %v12_conv_0_zero_x, %v12_conv_0_zero_y, %v12_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %81 = nn.mcutruncate(%80) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %82 = nn.mcuconv2d(%81, %v12_conv_1_weight, %v12_conv_1_bias, %v12_conv_1_zero_x, %v12_conv_1_zero_y, %v12_conv_1_scale, padding=[2, 2, 2, 2], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %83 = nn.mcutruncate(%82) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %84 = nn.mcuconv2d(%83, %v12_conv_2_weight, %v12_conv_2_bias, %v12_conv_2_zero_x, %v12_conv_2_zero_y, %v12_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %85 = nn.mcutruncate(%84) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %86 = nn.mcuconv2d(%85, %v13_conv_0_weight, %v13_conv_0_bias, %v13_conv_0_zero_x, %v13_conv_0_zero_y, %v13_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %87 = nn.mcutruncate(%86) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %88 = nn.mcuconv2d(%87, %v13_conv_1_weight, %v13_conv_1_bias, %v13_conv_1_zero_x, %v13_conv_1_zero_y, %v13_conv_1_scale, padding=[2, 2, 2, 2], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %89 = nn.mcutruncate(%88) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %90 = nn.mcuconv2d(%89, %v13_conv_2_weight, %v13_conv_2_bias, %v13_conv_2_zero_x, %v13_conv_2_zero_y, %v13_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %91 = nn.mcutruncate(%90) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %92 = nn.mcuadd(%85, %91, %v13_qadd_zero_x1, %v13_qadd_zero_x2, %v13_qadd_scale_x1, %v13_qadd_scale_x2, %v13_qadd_zero_y, %v13_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %93 = nn.mcutruncate(%92) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %94 = nn.mcuconv2d(%93, %v14_conv_0_weight, %v14_conv_0_bias, %v14_conv_0_zero_x, %v14_conv_0_zero_y, %v14_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %95 = nn.mcutruncate(%94) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %96 = nn.mcuconv2d(%95, %v14_conv_1_weight, %v14_conv_1_bias, %v14_conv_1_zero_x, %v14_conv_1_zero_y, %v14_conv_1_scale, padding=[2, 2, 2, 2], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %97 = nn.mcutruncate(%96) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %98 = nn.mcuconv2d(%97, %v14_conv_2_weight, %v14_conv_2_bias, %v14_conv_2_zero_x, %v14_conv_2_zero_y, %v14_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %99 = nn.mcutruncate(%98) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %100 = nn.mcuadd(%93, %99, %v14_qadd_zero_x1, %v14_qadd_zero_x2, %v14_qadd_scale_x1, %v14_qadd_scale_x2, %v14_qadd_zero_y, %v14_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %101 = nn.mcutruncate(%100) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %102 = nn.mcuconv2d(%101, %v15_conv_0_weight, %v15_conv_0_bias, %v15_conv_0_zero_x, %v15_conv_0_zero_y, %v15_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %103 = nn.mcutruncate(%102) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %104 = nn.mcuconv2d(%103, %v15_conv_1_weight, %v15_conv_1_bias, %v15_conv_1_zero_x, %v15_conv_1_zero_y, %v15_conv_1_scale, padding=[2, 2, 2, 2], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %105 = nn.mcutruncate(%104) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %106 = nn.mcuconv2d(%105, %v15_conv_2_weight, %v15_conv_2_bias, %v15_conv_2_zero_x, %v15_conv_2_zero_y, %v15_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %107 = nn.mcutruncate(%106) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %108 = nn.mcuadd(%101, %107, %v15_qadd_zero_x1, %v15_qadd_zero_x2, %v15_qadd_scale_x1, %v15_qadd_scale_x2, %v15_qadd_zero_y, %v15_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %109 = nn.mcutruncate(%108) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %110 = nn.mcuconv2d(%109, %v16_conv_0_weight, %v16_conv_0_bias, %v16_conv_0_zero_x, %v16_conv_0_zero_y, %v16_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %111 = nn.mcutruncate(%110) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %112 = nn.mcuconv2d(%111, %v16_conv_1_weight, %v16_conv_1_bias, %v16_conv_1_zero_x, %v16_conv_1_zero_y, %v16_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=192) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %113 = nn.mcutruncate(%112) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %114 = nn.mcuconv2d(%113, %v16_conv_2_weight, %v16_conv_2_bias, %v16_conv_2_zero_x, %v16_conv_2_zero_y, %v16_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %115 = nn.mcutruncate(%114) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %116 = nn.mcuconv2d(%115, %v17_conv_0_weight, %v17_conv_0_bias, %v17_conv_0_zero_x, %v17_conv_0_zero_y, %v17_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %117 = nn.mcutruncate(%116) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %118 = nn.mcuconv2d(%117, %v17_conv_1_weight, %v17_conv_1_bias, %v17_conv_1_zero_x, %v17_conv_1_zero_y, %v17_conv_1_scale, padding=[3, 3, 3, 3], groups=384) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %119 = nn.mcutruncate(%118) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %120 = nn.mcuconv2d(%119, %v17_conv_2_weight, %v17_conv_2_bias, %v17_conv_2_zero_x, %v17_conv_2_zero_y, %v17_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %121 = nn.mcutruncate(%120) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %122 = nn.mcuadd(%115, %121, %v17_qadd_zero_x1, %v17_qadd_zero_x2, %v17_qadd_scale_x1, %v17_qadd_scale_x2, %v17_qadd_zero_y, %v17_qadd_scale_y, axis=0) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %123 = nn.mcutruncate(%122) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %124 = nn.mcuconv2d(%123, %v18_conv_0_weight, %v18_conv_0_bias, %v18_conv_0_zero_x, %v18_conv_0_zero_y, %v18_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %125 = nn.mcutruncate(%124) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %126 = nn.mcuconv2d(%125, %v18_conv_1_weight, %v18_conv_1_bias, %v18_conv_1_zero_x, %v18_conv_1_zero_y, %v18_conv_1_scale, padding=[3, 3, 3, 3], groups=192) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %127 = nn.mcutruncate(%126) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %128 = nn.mcuconv2d(%127, %v18_conv_2_weight, %v18_conv_2_bias, %v18_conv_2_zero_x, %v18_conv_2_zero_y, %v18_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %129 = nn.mcutruncate(%128) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %130 = nn.mcuadd(%123, %129, %v18_qadd_zero_x1, %v18_qadd_zero_x2, %v18_qadd_scale_x1, %v18_qadd_scale_x2, %v18_qadd_zero_y, %v18_qadd_scale_y, axis=0) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %131 = nn.mcutruncate(%130) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %132 = nn.mcuconv2d(%131, %v19_conv_0_weight, %v19_conv_0_bias, %v19_conv_0_zero_x, %v19_conv_0_zero_y, %v19_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %133 = nn.mcutruncate(%132) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %134 = nn.mcuconv2d(%133, %v19_conv_1_weight, %v19_conv_1_bias, %v19_conv_1_zero_x, %v19_conv_1_zero_y, %v19_conv_1_scale, padding=[3, 3, 3, 3], groups=192) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %135 = nn.mcutruncate(%134) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %136 = nn.mcuconv2d(%135, %v19_conv_2_weight, %v19_conv_2_bias, %v19_conv_2_zero_x, %v19_conv_2_zero_y, %v19_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %137 = nn.mcutruncate(%136) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %138 = nn.mcuadd(%131, %137, %v19_qadd_zero_x1, %v19_qadd_zero_x2, %v19_qadd_scale_x1, %v19_qadd_scale_x2, %v19_qadd_zero_y, %v19_qadd_scale_y, axis=0) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %139 = nn.mcutruncate(%138) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %140 = nn.mcuconv2d(%139, %v20_conv_0_weight, %v20_conv_0_bias, %v20_conv_0_zero_x, %v20_conv_0_zero_y, %v20_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %141 = nn.mcutruncate(%140) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %142 = nn.mcuconv2d(%141, %v20_conv_1_weight, %v20_conv_1_bias, %v20_conv_1_zero_x, %v20_conv_1_zero_y, %v20_conv_1_scale, padding=[3, 3, 3, 3], groups=384) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %143 = nn.mcutruncate(%142) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %144 = nn.mcuconv2d(%143, %v20_conv_2_weight, %v20_conv_2_bias, %v20_conv_2_zero_x, %v20_conv_2_zero_y, %v20_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %145 = nn.mcutruncate(%144) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %146 = mcumean(%145, axis=[2, 3], keepdims=True) /* ty=Tensor[(1, 96, 1, 1), int8] */;
  %147 = nn.mcuconv2d(%146, %v21_weight, %v21_bias, %v21_zero_x, %v21_zero_y, %v21_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %148 = nn.mcutruncate(%147) /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %149 = reshape(%148, newshape=[0, 0]) /* ty=Tensor[(1, 10), int8] */;
  %150 = cast(%149, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %151 = nn.log_softmax(%150) /* ty=Tensor[(1, 10), float32] */;
  %152 = greater_equal(%147, -128 /* ty=int32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %153 = less_equal(%147, 127 /* ty=int32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %154 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %155 = negative(%154) /* ty=float32 */;
  %156 = multiply(%155, %label) /* ty=Tensor[(1, 10), float32] */;
  %157 = sum(%156, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %158 = exp(%151) /* ty=Tensor[(1, 10), float32] */;
  %159 = multiply(%157, %158) /* ty=Tensor[(1, 10), float32] */;
  %160 = subtract(%156, %159) /* ty=Tensor[(1, 10), float32] */;
  %161 = multiply(%152, %153) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %162 = reshape(%160, newshape=[1, 10, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %163 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %164 = where(%161, %162, %163) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %165 = cast(%164, dtype="int32") /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %166 = reshape(%146, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 1, 1), int8] */;
  %167 = tile(%164, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 960, 1, 1), float32] */;
  %168 = cast(%166, dtype="float32") /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %169 = reshape(%167, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(960, 1, 1, 1), float32] */;
  %170 = nn.conv2d(%168, %169, padding=[0, 0, 0, 0], groups=96, out_dtype="float32") /* ty=Tensor[(1, 960, 1, 1), float32] */;
  %171 = reshape(%170, newshape=[1, 96, 10, 1, 1]) /* ty=Tensor[(1, 96, 10, 1, 1), float32] */;
  %172 = sum(%171, axis=[0]) /* ty=Tensor[(96, 10, 1, 1), float32] */;
  %173 = transpose(%172, axes=[1, 0, 2, 3]) /* ty=Tensor[(10, 96, 1, 1), float32] */;
  %174 = abs(%173) /* ty=Tensor[(10, 96, 1, 1), float32] */;
  %175 = max(%174, axis=[1], keepdims=True) /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %176 = divide(%175, 127f /* ty=float32 */) /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %177 = divide(%173, %176) /* ty=Tensor[(10, 96, 1, 1), float32] */;
  %178 = greater_equal(%144, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %179 = less_equal(%144, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %180 = cast(%v21_weight, dtype="float32") /* ty=Tensor[(10, 96, 1, 1), float32] */;
  %181 = nn.conv2d_transpose(%164, %180, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %182 = abs(%181) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %183 = max(%182, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %184 = divide(%183, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %185 = divide(%181, %184) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %186 = cast(%185, dtype="int8") /* ty=Tensor[(1, 96, 1, 1), int8] */;
  %187 = cast(%186, dtype="float32") /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %188 = multiply(%187, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %189 = ones(shape=[1, 96, 4, 4], dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %190 = multiply(%178, %179) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %191 = multiply(%188, %189) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %192 = zeros(shape=[1, 96, 4, 4], dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %193 = where(%190, %191, %192) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %194 = cast(%193, dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %195 = greater_equal(%142, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %196 = less_equal(%142, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %197 = cast(%v20_conv_2_weight, dtype="float32") /* ty=Tensor[(96, 384, 1, 1), float32] */;
  %198 = nn.conv2d_transpose(%193, %197, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %199 = abs(%198) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %200 = max(%199, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %201 = divide(%200, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %202 = divide(%198, %201) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %203 = multiply(%195, %196) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %204 = cast(%202, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %205 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %206 = where(%203, %204, %205) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %207 = cast(%206, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %208 = greater_equal(%140, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %209 = less_equal(%140, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %210 = nn.conv2d_transpose(%206, %v20_conv_1_weight, channels=384, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=384, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %211 = abs(%210) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %212 = max(%211, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %213 = divide(%212, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %214 = divide(%210, %213) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %215 = multiply(%208, %209) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %216 = cast(%214, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %217 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %218 = where(%215, %216, %217) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %219 = cast(%218, dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %220 = reshape(%v20_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %221 = multiply(%219, %220) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %222 = cast(%139, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %223 = strided_slice(%222, begin=[0, 0, 0, 0], end=[1, 32, 4, 4], strides=[1], axes=None) /* ty=Tensor[(1, 32, 4, 4), float32] */;
  %224 = tile(%221, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 12288, 4, 4), float32] */;
  %225 = reshape(%223, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 4, 4), float32] */;
  %226 = reshape(%224, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(12288, 1, 4, 4), float32] */;
  %227 = nn.conv2d(%225, %226, padding=[0, 0, 0, 0], groups=32) /* ty=Tensor[(1, 12288, 1, 1), float32] */;
  %228 = reshape(%227, newshape=[1, 32, 384, 1, 1]) /* ty=Tensor[(1, 32, 384, 1, 1), float32] */;
  %229 = sum(%228, axis=[0]) /* ty=Tensor[(32, 384, 1, 1), float32] */;
  %230 = greater_equal(%136, -128 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %231 = less_equal(%136, 127 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %232 = greater_equal(%138, meta[relay.Constant][0] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %233 = less_equal(%138, meta[relay.Constant][1] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %234 = cast(%v20_conv_0_weight, dtype="float32") /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %235 = multiply(%232, %233) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %236 = nn.conv2d_transpose(%221, %234, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %237 = zeros(shape=[1, 64, 4, 4], dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %238 = where(%235, %236, %237) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %239 = reshape(%v19_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %240 = divide(%238, %239) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %241 = reshape(%v19_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %242 = multiply(%230, %231) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %243 = multiply(%240, %241) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %244 = zeros(shape=[1, 64, 4, 4], dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %245 = where(%242, %243, %244) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %246 = cast(%245, dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %247 = greater_equal(%134, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %248 = less_equal(%134, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %249 = cast(%v19_conv_2_weight, dtype="float32") /* ty=Tensor[(64, 192, 1, 1), float32] */;
  %250 = nn.conv2d_transpose(%245, %249, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %251 = abs(%250) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %252 = max(%251, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %253 = divide(%252, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %254 = divide(%250, %253) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %255 = multiply(%247, %248) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %256 = cast(%254, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %257 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %258 = where(%255, %256, %257) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %259 = cast(%258, dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %260 = greater_equal(%132, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %261 = less_equal(%132, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %262 = nn.conv2d_transpose(%258, %v19_conv_1_weight, channels=192, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %263 = abs(%262) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %264 = max(%263, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %265 = divide(%264, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %266 = divide(%262, %265) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %267 = multiply(%260, %261) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %268 = cast(%266, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %269 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %270 = where(%267, %268, %269) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %271 = cast(%270, dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %272 = reshape(%v19_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %273 = multiply(%271, %272) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %274 = cast(%131, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %275 = strided_slice(%274, begin=[0, 0, 0, 0], end=[1, 16, 4, 4], strides=[1], axes=None) /* ty=Tensor[(1, 16, 4, 4), float32] */;
  %276 = tile(%273, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 3072, 4, 4), float32] */;
  %277 = reshape(%275, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 4, 4), float32] */;
  %278 = reshape(%276, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3072, 1, 4, 4), float32] */;
  %279 = nn.conv2d(%277, %278, padding=[0, 0, 0, 0], groups=16) /* ty=Tensor[(1, 3072, 1, 1), float32] */;
  %280 = reshape(%279, newshape=[1, 16, 192, 1, 1]) /* ty=Tensor[(1, 16, 192, 1, 1), float32] */;
  %281 = sum(%280, axis=[0]) /* ty=Tensor[(16, 192, 1, 1), float32] */;
  %282 = greater_equal(%128, -128 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %283 = less_equal(%128, 127 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %284 = greater_equal(%130, meta[relay.Constant][2] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %285 = less_equal(%130, meta[relay.Constant][3] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %286 = cast(%v19_conv_0_weight, dtype="float32") /* ty=Tensor[(192, 64, 1, 1), float32] */;
  %287 = multiply(%284, %285) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %288 = nn.conv2d_transpose(%273, %286, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %289 = zeros(shape=[1, 64, 4, 4], dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %290 = where(%287, %288, %289) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %291 = reshape(%v18_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %292 = divide(%290, %291) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %293 = reshape(%v18_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %294 = multiply(%282, %283) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %295 = multiply(%292, %293) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %296 = zeros(shape=[1, 64, 4, 4], dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %297 = where(%294, %295, %296) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %298 = cast(%297, dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %299 = greater_equal(%126, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %300 = less_equal(%126, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %301 = cast(%v18_conv_2_weight, dtype="float32") /* ty=Tensor[(64, 192, 1, 1), float32] */;
  %302 = nn.conv2d_transpose(%297, %301, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %303 = abs(%302) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %304 = max(%303, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %305 = divide(%304, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %306 = divide(%302, %305) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %307 = multiply(%299, %300) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %308 = cast(%306, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %309 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %310 = where(%307, %308, %309) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %311 = cast(%310, dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %312 = greater_equal(%124, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %313 = less_equal(%124, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %314 = nn.conv2d_transpose(%310, %v18_conv_1_weight, channels=192, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %315 = abs(%314) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %316 = max(%315, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %317 = divide(%316, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %318 = divide(%314, %317) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %319 = multiply(%312, %313) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %320 = cast(%318, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %321 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %322 = where(%319, %320, %321) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %323 = cast(%322, dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %324 = reshape(%v18_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %325 = multiply(%323, %324) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %326 = cast(%123, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %327 = strided_slice(%326, begin=[0, 0, 0, 0], end=[1, 32, 4, 4], strides=[1], axes=None) /* ty=Tensor[(1, 32, 4, 4), float32] */;
  %328 = tile(%325, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 4, 4), float32] */;
  %329 = reshape(%327, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 4, 4), float32] */;
  %330 = reshape(%328, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 4, 4), float32] */;
  %331 = nn.conv2d(%329, %330, padding=[0, 0, 0, 0], groups=32) /* ty=Tensor[(1, 6144, 1, 1), float32] */;
  %332 = reshape(%331, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), float32] */;
  %333 = sum(%332, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %334 = greater_equal(%120, -128 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %335 = less_equal(%120, 127 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %336 = greater_equal(%122, meta[relay.Constant][4] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %337 = less_equal(%122, meta[relay.Constant][5] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %338 = cast(%v18_conv_0_weight, dtype="float32") /* ty=Tensor[(192, 64, 1, 1), float32] */;
  %339 = multiply(%336, %337) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %340 = nn.conv2d_transpose(%325, %338, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %341 = zeros(shape=[1, 64, 4, 4], dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %342 = where(%339, %340, %341) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %343 = reshape(%v17_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %344 = divide(%342, %343) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %345 = reshape(%v17_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %346 = multiply(%334, %335) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %347 = multiply(%344, %345) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %348 = zeros(shape=[1, 64, 4, 4], dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %349 = where(%346, %347, %348) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %350 = cast(%349, dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %351 = greater_equal(%118, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %352 = less_equal(%118, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %353 = cast(%v17_conv_2_weight, dtype="float32") /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %354 = nn.conv2d_transpose(%349, %353, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %355 = abs(%354) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %356 = max(%355, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %357 = divide(%356, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %358 = divide(%354, %357) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %359 = multiply(%351, %352) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %360 = cast(%358, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %361 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %362 = where(%359, %360, %361) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %363 = cast(%362, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %364 = greater_equal(%116, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %365 = less_equal(%116, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %366 = nn.conv2d_transpose(%362, %v17_conv_1_weight, channels=384, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=384, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %367 = abs(%366) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %368 = max(%367, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %369 = divide(%368, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %370 = divide(%366, %369) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %371 = multiply(%364, %365) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %372 = cast(%370, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %373 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %374 = where(%371, %372, %373) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %375 = cast(%374, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %376 = greater_equal(%114, -128 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %377 = less_equal(%114, 127 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %378 = nn.conv2d_transpose(%374, %v17_conv_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %379 = abs(%378) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %380 = max(%379, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %381 = divide(%380, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %382 = divide(%378, %381) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %383 = multiply(%376, %377) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %384 = cast(%382, dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %385 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %386 = where(%383, %384, %385) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %387 = cast(%386, dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %388 = greater_equal(%112, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %389 = less_equal(%112, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %390 = nn.conv2d_transpose(%386, %v16_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %391 = abs(%390) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %392 = max(%391, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %393 = divide(%392, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %394 = divide(%390, %393) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %395 = multiply(%388, %389) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %396 = cast(%394, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %397 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %398 = where(%395, %396, %397) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %399 = cast(%398, dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %400 = greater_equal(%110, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %401 = less_equal(%110, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %402 = nn.conv2d_transpose(%398, %v16_conv_1_weight, channels=192, kernel_size=[7, 7], strides=[2, 2], output_padding=[1, 1], padding=[3, 3, 3, 3], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %403 = abs(%402) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %404 = max(%403, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %405 = divide(%404, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %406 = divide(%402, %405) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %407 = multiply(%400, %401) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %408 = cast(%406, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %409 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %410 = where(%407, %408, %409) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %411 = cast(%410, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %412 = tile(%410, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 8, 8), int8] */;
  %413 = reshape(%109, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %414 = reshape(%412, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 8, 8), int8] */;
  %415 = nn.conv2d(%413, %414, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %416 = reshape(%415, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), int32] */;
  %417 = sum(%416, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %418 = transpose(%417, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %419 = abs(%418) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %420 = max(%419, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %421 = divide(%420, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %422 = divide(%418, %421) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %423 = greater_equal(%106, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %424 = less_equal(%106, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %425 = greater_equal(%108, meta[relay.Constant][6] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %426 = less_equal(%108, meta[relay.Constant][7] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %427 = nn.conv2d_transpose(%410, %v16_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %428 = abs(%427) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %429 = max(%428, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %430 = divide(%429, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %431 = divide(%427, %430) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %432 = multiply(%425, %426) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %433 = cast(%431, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %434 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %435 = where(%432, %433, %434) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %436 = cast(%435, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %437 = reshape(%v15_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %438 = divide(%436, %437) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %439 = reshape(%v15_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %440 = multiply(%438, %439) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %441 = multiply(%423, %424) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %442 = cast(%440, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %443 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %444 = where(%441, %442, %443) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %445 = cast(%444, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %446 = greater_equal(%104, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %447 = less_equal(%104, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %448 = nn.conv2d_transpose(%444, %v15_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %449 = abs(%448) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %450 = max(%449, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %451 = divide(%450, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %452 = divide(%448, %451) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %453 = multiply(%446, %447) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %454 = cast(%452, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %455 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %456 = where(%453, %454, %455) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %457 = cast(%456, dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %458 = greater_equal(%102, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %459 = less_equal(%102, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %460 = nn.conv2d_transpose(%456, %v15_conv_1_weight, channels=96, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=96, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %461 = abs(%460) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %462 = max(%461, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %463 = divide(%462, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %464 = divide(%460, %463) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %465 = multiply(%458, %459) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %466 = cast(%464, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %467 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %468 = where(%465, %466, %467) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %469 = cast(%468, dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %470 = tile(%468, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 3072, 8, 8), int8] */;
  %471 = reshape(%101, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %472 = reshape(%470, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3072, 1, 8, 8), int8] */;
  %473 = nn.conv2d(%471, %472, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* ty=Tensor[(1, 3072, 1, 1), int32] */;
  %474 = reshape(%473, newshape=[1, 32, 96, 1, 1]) /* ty=Tensor[(1, 32, 96, 1, 1), int32] */;
  %475 = sum(%474, axis=[0]) /* ty=Tensor[(32, 96, 1, 1), int32] */;
  %476 = transpose(%475, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %477 = abs(%476) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %478 = max(%477, axis=[1], keepdims=True) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %479 = divide(%478, 127 /* ty=int32 */) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %480 = divide(%476, %479) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %481 = greater_equal(%98, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %482 = less_equal(%98, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %483 = greater_equal(%100, meta[relay.Constant][8] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %484 = less_equal(%100, meta[relay.Constant][9] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %485 = nn.conv2d_transpose(%468, %v15_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %486 = abs(%485) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %487 = max(%486, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %488 = divide(%487, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %489 = divide(%485, %488) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %490 = multiply(%483, %484) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %491 = cast(%489, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %492 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %493 = where(%490, %491, %492) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %494 = cast(%493, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %495 = reshape(%v14_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %496 = divide(%494, %495) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %497 = reshape(%v14_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %498 = multiply(%496, %497) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %499 = multiply(%481, %482) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %500 = cast(%498, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %501 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %502 = where(%499, %500, %501) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %503 = cast(%502, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %504 = greater_equal(%96, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %505 = less_equal(%96, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %506 = nn.conv2d_transpose(%502, %v14_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %507 = abs(%506) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %508 = max(%507, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %509 = divide(%508, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %510 = divide(%506, %509) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %511 = multiply(%504, %505) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %512 = cast(%510, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %513 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %514 = where(%511, %512, %513) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %515 = cast(%514, dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %516 = greater_equal(%94, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %517 = less_equal(%94, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %518 = nn.conv2d_transpose(%514, %v14_conv_1_weight, channels=96, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=96, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %519 = abs(%518) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %520 = max(%519, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %521 = divide(%520, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %522 = divide(%518, %521) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %523 = multiply(%516, %517) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %524 = cast(%522, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %525 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %526 = where(%523, %524, %525) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %527 = cast(%526, dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %528 = tile(%526, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 3072, 8, 8), int8] */;
  %529 = reshape(%93, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %530 = reshape(%528, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3072, 1, 8, 8), int8] */;
  %531 = nn.conv2d(%529, %530, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* ty=Tensor[(1, 3072, 1, 1), int32] */;
  %532 = reshape(%531, newshape=[1, 32, 96, 1, 1]) /* ty=Tensor[(1, 32, 96, 1, 1), int32] */;
  %533 = sum(%532, axis=[0]) /* ty=Tensor[(32, 96, 1, 1), int32] */;
  %534 = transpose(%533, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %535 = abs(%534) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %536 = max(%535, axis=[1], keepdims=True) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %537 = divide(%536, 127 /* ty=int32 */) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %538 = divide(%534, %537) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %539 = greater_equal(%90, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %540 = less_equal(%90, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %541 = greater_equal(%92, meta[relay.Constant][10] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %542 = less_equal(%92, meta[relay.Constant][11] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %543 = nn.conv2d_transpose(%526, %v14_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %544 = abs(%543) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %545 = max(%544, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %546 = divide(%545, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %547 = divide(%543, %546) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %548 = multiply(%541, %542) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %549 = cast(%547, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %550 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %551 = where(%548, %549, %550) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %552 = cast(%551, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %553 = reshape(%v13_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %554 = divide(%552, %553) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %555 = reshape(%v13_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %556 = multiply(%554, %555) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %557 = multiply(%539, %540) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %558 = cast(%556, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %559 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %560 = where(%557, %558, %559) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %561 = cast(%560, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %562 = greater_equal(%88, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %563 = less_equal(%88, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %564 = nn.conv2d_transpose(%560, %v13_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %565 = abs(%564) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %566 = max(%565, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %567 = divide(%566, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %568 = divide(%564, %567) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %569 = multiply(%562, %563) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %570 = cast(%568, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %571 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %572 = where(%569, %570, %571) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %573 = cast(%572, dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %574 = greater_equal(%86, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %575 = less_equal(%86, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %576 = nn.conv2d_transpose(%572, %v13_conv_1_weight, channels=96, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=96, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %577 = abs(%576) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %578 = max(%577, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %579 = divide(%578, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %580 = divide(%576, %579) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %581 = multiply(%574, %575) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %582 = cast(%580, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %583 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %584 = where(%581, %582, %583) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %585 = cast(%584, dtype="float32") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %586 = reshape(%v13_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %587 = multiply(%585, %586) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %588 = cast(%85, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %589 = strided_slice(%588, begin=[0, 0, 0, 0], end=[1, 8, 8, 8], strides=[1], axes=None) /* ty=Tensor[(1, 8, 8, 8), float32] */;
  %590 = tile(%587, reps=[1, 8, 1, 1]) /* ty=Tensor[(1, 768, 8, 8), float32] */;
  %591 = reshape(%589, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 8, 8, 8), float32] */;
  %592 = reshape(%590, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 8, 8), float32] */;
  %593 = nn.conv2d(%591, %592, padding=[0, 0, 0, 0], groups=8) /* ty=Tensor[(1, 768, 1, 1), float32] */;
  %594 = reshape(%593, newshape=[1, 8, 96, 1, 1]) /* ty=Tensor[(1, 8, 96, 1, 1), float32] */;
  %595 = sum(%594, axis=[0]) /* ty=Tensor[(8, 96, 1, 1), float32] */;
  %596 = greater_equal(%84, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %597 = less_equal(%84, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %598 = cast(%v13_conv_0_weight, dtype="float32") /* ty=Tensor[(96, 32, 1, 1), float32] */;
  %599 = multiply(%596, %597) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %600 = nn.conv2d_transpose(%587, %598, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %601 = zeros(shape=[1, 32, 8, 8], dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %602 = where(%599, %600, %601) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %603 = cast(%602, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %604 = greater_equal(%82, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %605 = less_equal(%82, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %606 = cast(%v12_conv_2_weight, dtype="float32") /* ty=Tensor[(32, 144, 1, 1), float32] */;
  %607 = nn.conv2d_transpose(%602, %606, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %608 = abs(%607) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %609 = max(%608, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), float32] */;
  %610 = divide(%609, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 8, 8), float32] */;
  %611 = divide(%607, %610) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %612 = multiply(%604, %605) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %613 = cast(%611, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %614 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %615 = where(%612, %613, %614) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %616 = cast(%615, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %617 = greater_equal(%80, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %618 = less_equal(%80, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %619 = nn.conv2d_transpose(%615, %v12_conv_1_weight, channels=144, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=144, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %620 = abs(%619) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %621 = max(%620, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %622 = divide(%621, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %623 = divide(%619, %622) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %624 = multiply(%617, %618) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %625 = cast(%623, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %626 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %627 = where(%624, %625, %626) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %628 = cast(%627, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %629 = reshape(%v12_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 144, 1, 1), float32] */;
  %630 = multiply(%628, %629) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %631 = cast(%79, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %632 = strided_slice(%631, begin=[0, 0, 0, 0], end=[1, 12, 8, 8], strides=[1], axes=None) /* ty=Tensor[(1, 12, 8, 8), float32] */;
  %633 = tile(%630, reps=[1, 12, 1, 1]) /* ty=Tensor[(1, 1728, 8, 8), float32] */;
  %634 = reshape(%632, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 12, 8, 8), float32] */;
  %635 = reshape(%633, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1728, 1, 8, 8), float32] */;
  %636 = nn.conv2d(%634, %635, padding=[0, 0, 0, 0], groups=12) /* ty=Tensor[(1, 1728, 1, 1), float32] */;
  %637 = reshape(%636, newshape=[1, 12, 144, 1, 1]) /* ty=Tensor[(1, 12, 144, 1, 1), float32] */;
  %638 = sum(%637, axis=[0]) /* ty=Tensor[(12, 144, 1, 1), float32] */;
  %639 = greater_equal(%76, -128 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %640 = less_equal(%76, 127 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %641 = greater_equal(%78, meta[relay.Constant][12] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %642 = less_equal(%78, meta[relay.Constant][13] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %643 = cast(%v12_conv_0_weight, dtype="float32") /* ty=Tensor[(144, 24, 1, 1), float32] */;
  %644 = multiply(%641, %642) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %645 = nn.conv2d_transpose(%630, %643, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %646 = zeros(shape=[1, 24, 8, 8], dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %647 = where(%644, %645, %646) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %648 = reshape(%v11_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %649 = divide(%647, %648) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %650 = reshape(%v11_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %651 = multiply(%639, %640) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %652 = multiply(%649, %650) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %653 = zeros(shape=[1, 24, 8, 8], dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %654 = where(%651, %652, %653) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %655 = cast(%654, dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %656 = nn.cross_entropy_with_logits(%151, %label) /* ty=float32 */;
  %657 = sum(%165, axis=[1], exclude=True) /* ty=Tensor[(10), int32] */;
  %658 = cast(%177, dtype="int8") /* ty=Tensor[(10, 96, 1, 1), int8] */;
  %659 = sum(%194, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %660 = sum(%207, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %661 = sum(%221, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %662 = transpose(%229, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 32, 1, 1), float32] */;
  %663 = sum(%246, axis=[1], exclude=True) /* ty=Tensor[(64), int32] */;
  %664 = sum(%259, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %665 = sum(%273, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %666 = transpose(%281, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 16, 1, 1), float32] */;
  %667 = sum(%298, axis=[1], exclude=True) /* ty=Tensor[(64), int32] */;
  %668 = sum(%311, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %669 = sum(%325, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %670 = transpose(%333, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %671 = sum(%350, axis=[1], exclude=True) /* ty=Tensor[(64), int32] */;
  %672 = sum(%363, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %673 = sum(%375, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %674 = sum(%387, axis=[1], exclude=True) /* ty=Tensor[(64), int32] */;
  %675 = sum(%399, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %676 = sum(%411, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %677 = cast(%422, dtype="int8") /* ty=Tensor[(192, 32, 1, 1), int8] */;
  %678 = sum(%445, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %679 = sum(%457, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %680 = sum(%469, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %681 = cast(%480, dtype="int8") /* ty=Tensor[(96, 32, 1, 1), int8] */;
  %682 = sum(%503, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %683 = sum(%515, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %684 = sum(%527, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %685 = cast(%538, dtype="int8") /* ty=Tensor[(96, 32, 1, 1), int8] */;
  %686 = sum(%561, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %687 = sum(%573, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %688 = sum(%587, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %689 = transpose(%595, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 8, 1, 1), float32] */;
  %690 = sum(%603, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %691 = sum(%616, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %692 = sum(%630, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %693 = transpose(%638, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 12, 1, 1), float32] */;
  %694 = sum(%655, axis=[1], exclude=True) /* ty=Tensor[(24), int32] */;
  (%656, %657, %658, %659, %660, %661, %662, %663, %664, %665, %666, %667, %668, %669, %670, %671, %672, %673, %674, %675, %676, %677, %678, %679, %680, %681, %682, %683, %684, %685, %686, %687, %688, %689, %690, %691, %692, %693, %694)
}

