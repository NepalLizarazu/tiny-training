def @main(%input: Tensor[(1, 3, 128, 128), int8], %v0_weight: Tensor[(16, 3, 3, 3), int8], %v0_bias: Tensor[(16), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(16), float32], %v1_conv_0_weight: Tensor[(16, 1, 3, 3), int8], %v1_conv_0_bias: Tensor[(16), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(16), float32], %v1_conv_1_weight: Tensor[(8, 16, 1, 1), int8], %v1_conv_1_bias: Tensor[(8), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(8), float32], %v2_conv_0_weight: Tensor[(24, 8, 1, 1), int8], %v2_conv_0_bias: Tensor[(24), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(24), float32], %v2_conv_1_weight: Tensor[(24, 1, 5, 5), int8], %v2_conv_1_bias: Tensor[(24), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(24), float32], %v2_conv_2_weight: Tensor[(16, 24, 1, 1), int8], %v2_conv_2_bias: Tensor[(16), int32], %v2_conv_2_zero_x: Tensor[(1), int8], %v2_conv_2_zero_y: Tensor[(1), int8], %v2_conv_2_scale: Tensor[(16), float32], %v3_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v3_conv_0_bias: Tensor[(48), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(48), float32], %v3_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v3_conv_1_bias: Tensor[(48), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(48), float32], %v3_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v3_conv_2_bias: Tensor[(16), int32], %v3_conv_2_zero_x: Tensor[(1), int8], %v3_conv_2_zero_y: Tensor[(1), int8], %v3_conv_2_scale: Tensor[(16), float32], %v3_qadd_zero_x1: Tensor[(1), int8], %v3_qadd_zero_x2: Tensor[(1), int8], %v3_qadd_scale_x1: Tensor[(1), float32], %v3_qadd_scale_x2: Tensor[(1), float32], %v3_qadd_zero_y: Tensor[(1), int8], %v3_qadd_scale_y: Tensor[(1), float32], %v4_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v4_conv_0_bias: Tensor[(48), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(48), float32], %v4_conv_1_weight: Tensor[(48, 1, 7, 7), int8], %v4_conv_1_bias: Tensor[(48), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(48), float32], %v4_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v4_conv_2_bias: Tensor[(16), int32], %v4_conv_2_zero_x: Tensor[(1), int8], %v4_conv_2_zero_y: Tensor[(1), int8], %v4_conv_2_scale: Tensor[(16), float32], %v5_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v5_conv_0_bias: Tensor[(48), int32], %v5_conv_0_zero_x: Tensor[(1), int8], %v5_conv_0_zero_y: Tensor[(1), int8], %v5_conv_0_scale: Tensor[(48), float32], %v5_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v5_conv_1_bias: Tensor[(48), int32], %v5_conv_1_zero_x: Tensor[(1), int8], %v5_conv_1_zero_y: Tensor[(1), int8], %v5_conv_1_scale: Tensor[(48), float32], %v5_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v5_conv_2_bias: Tensor[(16), int32], %v5_conv_2_zero_x: Tensor[(1), int8], %v5_conv_2_zero_y: Tensor[(1), int8], %v5_conv_2_scale: Tensor[(16), float32], %v5_qadd_zero_x1: Tensor[(1), int8], %v5_qadd_zero_x2: Tensor[(1), int8], %v5_qadd_scale_x1: Tensor[(1), float32], %v5_qadd_scale_x2: Tensor[(1), float32], %v5_qadd_zero_y: Tensor[(1), int8], %v5_qadd_scale_y: Tensor[(1), float32], %v6_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v6_conv_0_bias: Tensor[(48), int32], %v6_conv_0_zero_x: Tensor[(1), int8], %v6_conv_0_zero_y: Tensor[(1), int8], %v6_conv_0_scale: Tensor[(48), float32], %v6_conv_1_weight: Tensor[(48, 1, 5, 5), int8], %v6_conv_1_bias: Tensor[(48), int32], %v6_conv_1_zero_x: Tensor[(1), int8], %v6_conv_1_zero_y: Tensor[(1), int8], %v6_conv_1_scale: Tensor[(48), float32], %v6_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v6_conv_2_bias: Tensor[(16), int32], %v6_conv_2_zero_x: Tensor[(1), int8], %v6_conv_2_zero_y: Tensor[(1), int8], %v6_conv_2_scale: Tensor[(16), float32], %v6_qadd_zero_x1: Tensor[(1), int8], %v6_qadd_zero_x2: Tensor[(1), int8], %v6_qadd_scale_x1: Tensor[(1), float32], %v6_qadd_scale_x2: Tensor[(1), float32], %v6_qadd_zero_y: Tensor[(1), int8], %v6_qadd_scale_y: Tensor[(1), float32], %v7_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v7_conv_0_bias: Tensor[(48), int32], %v7_conv_0_zero_x: Tensor[(1), int8], %v7_conv_0_zero_y: Tensor[(1), int8], %v7_conv_0_scale: Tensor[(48), float32], %v7_conv_1_weight: Tensor[(48, 1, 5, 5), int8], %v7_conv_1_bias: Tensor[(48), int32], %v7_conv_1_zero_x: Tensor[(1), int8], %v7_conv_1_zero_y: Tensor[(1), int8], %v7_conv_1_scale: Tensor[(48), float32], %v7_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v7_conv_2_bias: Tensor[(16), int32], %v7_conv_2_zero_x: Tensor[(1), int8], %v7_conv_2_zero_y: Tensor[(1), int8], %v7_conv_2_scale: Tensor[(16), float32], %v7_qadd_zero_x1: Tensor[(1), int8], %v7_qadd_zero_x2: Tensor[(1), int8], %v7_qadd_scale_x1: Tensor[(1), float32], %v7_qadd_scale_x2: Tensor[(1), float32], %v7_qadd_zero_y: Tensor[(1), int8], %v7_qadd_scale_y: Tensor[(1), float32], %v8_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v8_conv_0_bias: Tensor[(96), int32], %v8_conv_0_zero_x: Tensor[(1), int8], %v8_conv_0_zero_y: Tensor[(1), int8], %v8_conv_0_scale: Tensor[(96), float32], %v8_conv_1_weight: Tensor[(96, 1, 7, 7), int8], %v8_conv_1_bias: Tensor[(96), int32], %v8_conv_1_zero_x: Tensor[(1), int8], %v8_conv_1_zero_y: Tensor[(1), int8], %v8_conv_1_scale: Tensor[(96), float32], %v8_conv_2_weight: Tensor[(24, 96, 1, 1), int8], %v8_conv_2_bias: Tensor[(24), int32], %v8_conv_2_zero_x: Tensor[(1), int8], %v8_conv_2_zero_y: Tensor[(1), int8], %v8_conv_2_scale: Tensor[(24), float32], %v9_conv_0_weight: Tensor[(72, 24, 1, 1), int8], %v9_conv_0_bias: Tensor[(72), int32], %v9_conv_0_zero_x: Tensor[(1), int8], %v9_conv_0_zero_y: Tensor[(1), int8], %v9_conv_0_scale: Tensor[(72), float32], %v9_conv_1_weight: Tensor[(72, 1, 5, 5), int8], %v9_conv_1_bias: Tensor[(72), int32], %v9_conv_1_zero_x: Tensor[(1), int8], %v9_conv_1_zero_y: Tensor[(1), int8], %v9_conv_1_scale: Tensor[(72), float32], %v9_conv_2_weight: Tensor[(24, 72, 1, 1), int8], %v9_conv_2_bias: Tensor[(24), int32], %v9_conv_2_zero_x: Tensor[(1), int8], %v9_conv_2_zero_y: Tensor[(1), int8], %v9_conv_2_scale: Tensor[(24), float32], %v9_qadd_zero_x1: Tensor[(1), int8], %v9_qadd_zero_x2: Tensor[(1), int8], %v9_qadd_scale_x1: Tensor[(1), float32], %v9_qadd_scale_x2: Tensor[(1), float32], %v9_qadd_zero_y: Tensor[(1), int8], %v9_qadd_scale_y: Tensor[(1), float32], %v10_conv_0_weight: Tensor[(72, 24, 1, 1), int8], %v10_conv_0_bias: Tensor[(72), int32], %v10_conv_0_zero_x: Tensor[(1), int8], %v10_conv_0_zero_y: Tensor[(1), int8], %v10_conv_0_scale: Tensor[(72), float32], %v10_conv_1_weight: Tensor[(72, 1, 5, 5), int8], %v10_conv_1_bias: Tensor[(72), int32], %v10_conv_1_zero_x: Tensor[(1), int8], %v10_conv_1_zero_y: Tensor[(1), int8], %v10_conv_1_scale: Tensor[(72), float32], %v10_conv_2_weight: Tensor[(24, 72, 1, 1), int8], %v10_conv_2_bias: Tensor[(24), int32], %v10_conv_2_zero_x: Tensor[(1), int8], %v10_conv_2_zero_y: Tensor[(1), int8], %v10_conv_2_scale: Tensor[(24), float32], %v10_qadd_zero_x1: Tensor[(1), int8], %v10_qadd_zero_x2: Tensor[(1), int8], %v10_qadd_scale_x1: Tensor[(1), float32], %v10_qadd_scale_x2: Tensor[(1), float32], %v10_qadd_zero_y: Tensor[(1), int8], %v10_qadd_scale_y: Tensor[(1), float32], %v11_conv_0_weight: Tensor[(72, 24, 1, 1), int8], %v11_conv_0_bias: Tensor[(72), int32], %v11_conv_0_zero_x: Tensor[(1), int8], %v11_conv_0_zero_y: Tensor[(1), int8], %v11_conv_0_scale: Tensor[(72), float32], %v11_conv_1_weight: Tensor[(72, 1, 5, 5), int8], %v11_conv_1_bias: Tensor[(72), int32], %v11_conv_1_zero_x: Tensor[(1), int8], %v11_conv_1_zero_y: Tensor[(1), int8], %v11_conv_1_scale: Tensor[(72), float32], %v11_conv_2_weight: Tensor[(24, 72, 1, 1), int8], %v11_conv_2_bias: Tensor[(24), int32], %v11_conv_2_zero_x: Tensor[(1), int8], %v11_conv_2_zero_y: Tensor[(1), int8], %v11_conv_2_scale: Tensor[(24), float32], %v11_qadd_zero_x1: Tensor[(1), int8], %v11_qadd_zero_x2: Tensor[(1), int8], %v11_qadd_scale_x1: Tensor[(1), float32], %v11_qadd_scale_x2: Tensor[(1), float32], %v11_qadd_zero_y: Tensor[(1), int8], %v11_qadd_scale_y: Tensor[(1), float32], %v12_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v12_conv_0_bias: Tensor[(144), int32], %v12_conv_0_zero_x: Tensor[(1), int8], %v12_conv_0_zero_y: Tensor[(1), int8], %v12_conv_0_scale: Tensor[(144), float32], %v12_conv_1_weight: Tensor[(144, 1, 5, 5), int8], %v12_conv_1_bias: Tensor[(144), int32], %v12_conv_1_zero_x: Tensor[(1), int8], %v12_conv_1_zero_y: Tensor[(1), int8], %v12_conv_1_scale: Tensor[(144), float32], %v12_conv_2_weight: Tensor[(32, 144, 1, 1), int8], %v12_conv_2_bias: Tensor[(32), int32], %v12_conv_2_zero_x: Tensor[(1), int8], %v12_conv_2_zero_y: Tensor[(1), int8], %v12_conv_2_scale: Tensor[(32), float32], %v13_conv_0_weight: Tensor[(96, 32, 1, 1), int8], %v13_conv_0_bias: Tensor[(96), int32], %v13_conv_0_zero_x: Tensor[(1), int8], %v13_conv_0_zero_y: Tensor[(1), int8], %v13_conv_0_scale: Tensor[(96), float32], %v13_conv_1_weight: Tensor[(96, 1, 5, 5), int8], %v13_conv_1_bias: Tensor[(96), int32], %v13_conv_1_zero_x: Tensor[(1), int8], %v13_conv_1_zero_y: Tensor[(1), int8], %v13_conv_1_scale: Tensor[(96), float32], %v13_conv_2_weight: Tensor[(32, 96, 1, 1), int8], %v13_conv_2_bias: Tensor[(32), int32], %v13_conv_2_zero_x: Tensor[(1), int8], %v13_conv_2_zero_y: Tensor[(1), int8], %v13_conv_2_scale: Tensor[(32), float32], %v13_qadd_zero_x1: Tensor[(1), int8], %v13_qadd_zero_x2: Tensor[(1), int8], %v13_qadd_scale_x1: Tensor[(1), float32], %v13_qadd_scale_x2: Tensor[(1), float32], %v13_qadd_zero_y: Tensor[(1), int8], %v13_qadd_scale_y: Tensor[(1), float32], %v14_conv_0_weight: Tensor[(96, 32, 1, 1), int8], %v14_conv_0_bias: Tensor[(96), int32], %v14_conv_0_zero_x: Tensor[(1), int8], %v14_conv_0_zero_y: Tensor[(1), int8], %v14_conv_0_scale: Tensor[(96), float32], %v14_conv_1_weight: Tensor[(96, 1, 5, 5), int8], %v14_conv_1_bias: Tensor[(96), int32], %v14_conv_1_zero_x: Tensor[(1), int8], %v14_conv_1_zero_y: Tensor[(1), int8], %v14_conv_1_scale: Tensor[(96), float32], %v14_conv_2_weight: Tensor[(32, 96, 1, 1), int8], %v14_conv_2_bias: Tensor[(32), int32], %v14_conv_2_zero_x: Tensor[(1), int8], %v14_conv_2_zero_y: Tensor[(1), int8], %v14_conv_2_scale: Tensor[(32), float32], %v14_qadd_zero_x1: Tensor[(1), int8], %v14_qadd_zero_x2: Tensor[(1), int8], %v14_qadd_scale_x1: Tensor[(1), float32], %v14_qadd_scale_x2: Tensor[(1), float32], %v14_qadd_zero_y: Tensor[(1), int8], %v14_qadd_scale_y: Tensor[(1), float32], %v15_conv_0_weight: Tensor[(96, 32, 1, 1), int8], %v15_conv_0_bias: Tensor[(96), int32], %v15_conv_0_zero_x: Tensor[(1), int8], %v15_conv_0_zero_y: Tensor[(1), int8], %v15_conv_0_scale: Tensor[(96), float32], %v15_conv_1_weight: Tensor[(96, 1, 5, 5), int8], %v15_conv_1_bias: Tensor[(96), int32], %v15_conv_1_zero_x: Tensor[(1), int8], %v15_conv_1_zero_y: Tensor[(1), int8], %v15_conv_1_scale: Tensor[(96), float32], %v15_conv_2_weight: Tensor[(32, 96, 1, 1), int8], %v15_conv_2_bias: Tensor[(32), int32], %v15_conv_2_zero_x: Tensor[(1), int8], %v15_conv_2_zero_y: Tensor[(1), int8], %v15_conv_2_scale: Tensor[(32), float32], %v15_qadd_zero_x1: Tensor[(1), int8], %v15_qadd_zero_x2: Tensor[(1), int8], %v15_qadd_scale_x1: Tensor[(1), float32], %v15_qadd_scale_x2: Tensor[(1), float32], %v15_qadd_zero_y: Tensor[(1), int8], %v15_qadd_scale_y: Tensor[(1), float32], %v16_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v16_conv_0_bias: Tensor[(192), int32], %v16_conv_0_zero_x: Tensor[(1), int8], %v16_conv_0_zero_y: Tensor[(1), int8], %v16_conv_0_scale: Tensor[(192), float32], %v16_conv_1_weight: Tensor[(192, 1, 7, 7), int8], %v16_conv_1_bias: Tensor[(192), int32], %v16_conv_1_zero_x: Tensor[(1), int8], %v16_conv_1_zero_y: Tensor[(1), int8], %v16_conv_1_scale: Tensor[(192), float32], %v16_conv_2_weight: Tensor[(64, 192, 1, 1), int8], %v16_conv_2_bias: Tensor[(64), int32], %v16_conv_2_zero_x: Tensor[(1), int8], %v16_conv_2_zero_y: Tensor[(1), int8], %v16_conv_2_scale: Tensor[(64), float32], %v17_conv_0_weight: Tensor[(384, 64, 1, 1), int8], %v17_conv_0_bias: Tensor[(384), int32], %v17_conv_0_zero_x: Tensor[(1), int8], %v17_conv_0_zero_y: Tensor[(1), int8], %v17_conv_0_scale: Tensor[(384), float32], %v17_conv_1_weight: Tensor[(384, 1, 7, 7), int8], %v17_conv_1_bias: Tensor[(384), int32], %v17_conv_1_zero_x: Tensor[(1), int8], %v17_conv_1_zero_y: Tensor[(1), int8], %v17_conv_1_scale: Tensor[(384), float32], %v17_conv_2_weight: Tensor[(64, 384, 1, 1), int8], %v17_conv_2_bias: Tensor[(64), int32], %v17_conv_2_zero_x: Tensor[(1), int8], %v17_conv_2_zero_y: Tensor[(1), int8], %v17_conv_2_scale: Tensor[(64), float32], %v17_qadd_zero_x1: Tensor[(1), int8], %v17_qadd_zero_x2: Tensor[(1), int8], %v17_qadd_scale_x1: Tensor[(1), float32], %v17_qadd_scale_x2: Tensor[(1), float32], %v17_qadd_zero_y: Tensor[(1), int8], %v17_qadd_scale_y: Tensor[(1), float32], %v18_conv_0_weight: Tensor[(192, 64, 1, 1), int8], %v18_conv_0_bias: Tensor[(192), int32], %v18_conv_0_zero_x: Tensor[(1), int8], %v18_conv_0_zero_y: Tensor[(1), int8], %v18_conv_0_scale: Tensor[(192), float32], %v18_conv_1_weight: Tensor[(192, 1, 7, 7), int8], %v18_conv_1_bias: Tensor[(192), int32], %v18_conv_1_zero_x: Tensor[(1), int8], %v18_conv_1_zero_y: Tensor[(1), int8], %v18_conv_1_scale: Tensor[(192), float32], %v18_conv_2_weight: Tensor[(64, 192, 1, 1), int8], %v18_conv_2_bias: Tensor[(64), int32], %v18_conv_2_zero_x: Tensor[(1), int8], %v18_conv_2_zero_y: Tensor[(1), int8], %v18_conv_2_scale: Tensor[(64), float32], %v18_qadd_zero_x1: Tensor[(1), int8], %v18_qadd_zero_x2: Tensor[(1), int8], %v18_qadd_scale_x1: Tensor[(1), float32], %v18_qadd_scale_x2: Tensor[(1), float32], %v18_qadd_zero_y: Tensor[(1), int8], %v18_qadd_scale_y: Tensor[(1), float32], %v19_conv_0_weight: Tensor[(192, 64, 1, 1), int8], %v19_conv_0_bias: Tensor[(192), int32], %v19_conv_0_zero_x: Tensor[(1), int8], %v19_conv_0_zero_y: Tensor[(1), int8], %v19_conv_0_scale: Tensor[(192), float32], %v19_conv_1_weight: Tensor[(192, 1, 7, 7), int8], %v19_conv_1_bias: Tensor[(192), int32], %v19_conv_1_zero_x: Tensor[(1), int8], %v19_conv_1_zero_y: Tensor[(1), int8], %v19_conv_1_scale: Tensor[(192), float32], %v19_conv_2_weight: Tensor[(64, 192, 1, 1), int8], %v19_conv_2_bias: Tensor[(64), int32], %v19_conv_2_zero_x: Tensor[(1), int8], %v19_conv_2_zero_y: Tensor[(1), int8], %v19_conv_2_scale: Tensor[(64), float32], %v19_qadd_zero_x1: Tensor[(1), int8], %v19_qadd_zero_x2: Tensor[(1), int8], %v19_qadd_scale_x1: Tensor[(1), float32], %v19_qadd_scale_x2: Tensor[(1), float32], %v19_qadd_zero_y: Tensor[(1), int8], %v19_qadd_scale_y: Tensor[(1), float32], %v20_conv_0_weight: Tensor[(384, 64, 1, 1), int8], %v20_conv_0_bias: Tensor[(384), int32], %v20_conv_0_zero_x: Tensor[(1), int8], %v20_conv_0_zero_y: Tensor[(1), int8], %v20_conv_0_scale: Tensor[(384), float32], %v20_conv_1_weight: Tensor[(384, 1, 7, 7), int8], %v20_conv_1_bias: Tensor[(384), int32], %v20_conv_1_zero_x: Tensor[(1), int8], %v20_conv_1_zero_y: Tensor[(1), int8], %v20_conv_1_scale: Tensor[(384), float32], %v20_conv_2_weight: Tensor[(96, 384, 1, 1), int8], %v20_conv_2_bias: Tensor[(96), int32], %v20_conv_2_zero_x: Tensor[(1), int8], %v20_conv_2_zero_y: Tensor[(1), int8], %v20_conv_2_scale: Tensor[(96), float32], %v21_weight: Tensor[(10, 96, 1, 1), int8], %v21_bias: Tensor[(10), int32], %v21_zero_x: Tensor[(1), int8], %v21_zero_y: Tensor[(1), int8], %v21_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), int32], Tensor[(10, 96, 1, 1), int8], Tensor[(96), int32], Tensor[(384), int32], Tensor[(384), int32], Tensor[(384, 64, 1, 1), int8], Tensor[(64), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 64, 1, 1), int8], Tensor[(64), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 64, 1, 1), int8], Tensor[(64), int32], Tensor[(384), int32], Tensor[(384), float32], Tensor[(384, 32, 1, 1), float32], Tensor[(64), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(96), int32], Tensor[(96), int32], Tensor[(96, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(96), int32], Tensor[(96), int32], Tensor[(96, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(96), int32], Tensor[(96), int32], Tensor[(96, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(144), int32], Tensor[(144), int32], Tensor[(24), int32], Tensor[(72), int32], Tensor[(72), int32], Tensor[(24), int32], Tensor[(72), int32]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1 = nn.mcutruncate(%0) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[1, 1, 1, 1], groups=16) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %3 = nn.mcutruncate(%2) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %5 = nn.mcutruncate(%4) /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 64, 64), int32] */;
  %7 = nn.mcutruncate(%6) /* ty=Tensor[(1, 24, 64, 64), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, strides=[2, 2], padding=[2, 2, 2, 2], groups=24) /* ty=Tensor[(1, 24, 32, 32), int32] */;
  %9 = nn.mcutruncate(%8) /* ty=Tensor[(1, 24, 32, 32), int8] */;
  %10 = nn.mcuconv2d(%9, %v2_conv_2_weight, %v2_conv_2_bias, %v2_conv_2_zero_x, %v2_conv_2_zero_y, %v2_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %11 = nn.mcutruncate(%10) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %13 = nn.mcutruncate(%12) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %14 = nn.mcuconv2d(%13, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %15 = nn.mcutruncate(%14) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %16 = nn.mcuconv2d(%15, %v3_conv_2_weight, %v3_conv_2_bias, %v3_conv_2_zero_x, %v3_conv_2_zero_y, %v3_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %17 = nn.mcutruncate(%16) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %18 = nn.mcuadd(%11, %17, %v3_qadd_zero_x1, %v3_qadd_zero_x2, %v3_qadd_scale_x1, %v3_qadd_scale_x2, %v3_qadd_zero_y, %v3_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %19 = nn.mcutruncate(%18) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %20 = nn.mcuconv2d(%19, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %21 = nn.mcutruncate(%20) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %22 = nn.mcuconv2d(%21, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %23 = nn.mcutruncate(%22) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %24 = nn.mcuconv2d(%23, %v4_conv_2_weight, %v4_conv_2_bias, %v4_conv_2_zero_x, %v4_conv_2_zero_y, %v4_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %25 = nn.mcutruncate(%24) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %26 = nn.mcuconv2d(%25, %v5_conv_0_weight, %v5_conv_0_bias, %v5_conv_0_zero_x, %v5_conv_0_zero_y, %v5_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %27 = nn.mcutruncate(%26) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %28 = nn.mcuconv2d(%27, %v5_conv_1_weight, %v5_conv_1_bias, %v5_conv_1_zero_x, %v5_conv_1_zero_y, %v5_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %29 = nn.mcutruncate(%28) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %30 = nn.mcuconv2d(%29, %v5_conv_2_weight, %v5_conv_2_bias, %v5_conv_2_zero_x, %v5_conv_2_zero_y, %v5_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %31 = nn.mcutruncate(%30) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %32 = nn.mcuadd(%25, %31, %v5_qadd_zero_x1, %v5_qadd_zero_x2, %v5_qadd_scale_x1, %v5_qadd_scale_x2, %v5_qadd_zero_y, %v5_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %33 = nn.mcutruncate(%32) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %34 = nn.mcuconv2d(%33, %v6_conv_0_weight, %v6_conv_0_bias, %v6_conv_0_zero_x, %v6_conv_0_zero_y, %v6_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %35 = nn.mcutruncate(%34) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %36 = nn.mcuconv2d(%35, %v6_conv_1_weight, %v6_conv_1_bias, %v6_conv_1_zero_x, %v6_conv_1_zero_y, %v6_conv_1_scale, padding=[2, 2, 2, 2], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %37 = nn.mcutruncate(%36) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %38 = nn.mcuconv2d(%37, %v6_conv_2_weight, %v6_conv_2_bias, %v6_conv_2_zero_x, %v6_conv_2_zero_y, %v6_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %39 = nn.mcutruncate(%38) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %40 = nn.mcuadd(%33, %39, %v6_qadd_zero_x1, %v6_qadd_zero_x2, %v6_qadd_scale_x1, %v6_qadd_scale_x2, %v6_qadd_zero_y, %v6_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %41 = nn.mcutruncate(%40) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %42 = nn.mcuconv2d(%41, %v7_conv_0_weight, %v7_conv_0_bias, %v7_conv_0_zero_x, %v7_conv_0_zero_y, %v7_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %43 = nn.mcutruncate(%42) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %44 = nn.mcuconv2d(%43, %v7_conv_1_weight, %v7_conv_1_bias, %v7_conv_1_zero_x, %v7_conv_1_zero_y, %v7_conv_1_scale, padding=[2, 2, 2, 2], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %45 = nn.mcutruncate(%44) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %46 = nn.mcuconv2d(%45, %v7_conv_2_weight, %v7_conv_2_bias, %v7_conv_2_zero_x, %v7_conv_2_zero_y, %v7_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %47 = nn.mcutruncate(%46) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %48 = nn.mcuadd(%41, %47, %v7_qadd_zero_x1, %v7_qadd_zero_x2, %v7_qadd_scale_x1, %v7_qadd_scale_x2, %v7_qadd_zero_y, %v7_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %49 = nn.mcutruncate(%48) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %50 = nn.mcuconv2d(%49, %v8_conv_0_weight, %v8_conv_0_bias, %v8_conv_0_zero_x, %v8_conv_0_zero_y, %v8_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %51 = nn.mcutruncate(%50) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %52 = nn.mcuconv2d(%51, %v8_conv_1_weight, %v8_conv_1_bias, %v8_conv_1_zero_x, %v8_conv_1_zero_y, %v8_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %53 = nn.mcutruncate(%52) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %54 = nn.mcuconv2d(%53, %v8_conv_2_weight, %v8_conv_2_bias, %v8_conv_2_zero_x, %v8_conv_2_zero_y, %v8_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %55 = nn.mcutruncate(%54) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %56 = nn.mcuconv2d(%55, %v9_conv_0_weight, %v9_conv_0_bias, %v9_conv_0_zero_x, %v9_conv_0_zero_y, %v9_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %57 = nn.mcutruncate(%56) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %58 = nn.mcuconv2d(%57, %v9_conv_1_weight, %v9_conv_1_bias, %v9_conv_1_zero_x, %v9_conv_1_zero_y, %v9_conv_1_scale, padding=[2, 2, 2, 2], groups=72) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %59 = nn.mcutruncate(%58) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %60 = nn.mcuconv2d(%59, %v9_conv_2_weight, %v9_conv_2_bias, %v9_conv_2_zero_x, %v9_conv_2_zero_y, %v9_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %61 = nn.mcutruncate(%60) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %62 = nn.mcuadd(%55, %61, %v9_qadd_zero_x1, %v9_qadd_zero_x2, %v9_qadd_scale_x1, %v9_qadd_scale_x2, %v9_qadd_zero_y, %v9_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %63 = nn.mcutruncate(%62) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %64 = nn.mcuconv2d(%63, %v10_conv_0_weight, %v10_conv_0_bias, %v10_conv_0_zero_x, %v10_conv_0_zero_y, %v10_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %65 = nn.mcutruncate(%64) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %66 = nn.mcuconv2d(%65, %v10_conv_1_weight, %v10_conv_1_bias, %v10_conv_1_zero_x, %v10_conv_1_zero_y, %v10_conv_1_scale, padding=[2, 2, 2, 2], groups=72) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %67 = nn.mcutruncate(%66) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %68 = nn.mcuconv2d(%67, %v10_conv_2_weight, %v10_conv_2_bias, %v10_conv_2_zero_x, %v10_conv_2_zero_y, %v10_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %69 = nn.mcutruncate(%68) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %70 = nn.mcuadd(%63, %69, %v10_qadd_zero_x1, %v10_qadd_zero_x2, %v10_qadd_scale_x1, %v10_qadd_scale_x2, %v10_qadd_zero_y, %v10_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %71 = nn.mcutruncate(%70) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %72 = nn.mcuconv2d(%71, %v11_conv_0_weight, %v11_conv_0_bias, %v11_conv_0_zero_x, %v11_conv_0_zero_y, %v11_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %73 = nn.mcutruncate(%72) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %74 = nn.mcuconv2d(%73, %v11_conv_1_weight, %v11_conv_1_bias, %v11_conv_1_zero_x, %v11_conv_1_zero_y, %v11_conv_1_scale, padding=[2, 2, 2, 2], groups=72) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %75 = nn.mcutruncate(%74) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %76 = nn.mcuconv2d(%75, %v11_conv_2_weight, %v11_conv_2_bias, %v11_conv_2_zero_x, %v11_conv_2_zero_y, %v11_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %77 = nn.mcutruncate(%76) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %78 = nn.mcuadd(%71, %77, %v11_qadd_zero_x1, %v11_qadd_zero_x2, %v11_qadd_scale_x1, %v11_qadd_scale_x2, %v11_qadd_zero_y, %v11_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %79 = nn.mcutruncate(%78) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %80 = nn.mcuconv2d(%79, %v12_conv_0_weight, %v12_conv_0_bias, %v12_conv_0_zero_x, %v12_conv_0_zero_y, %v12_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %81 = nn.mcutruncate(%80) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %82 = nn.mcuconv2d(%81, %v12_conv_1_weight, %v12_conv_1_bias, %v12_conv_1_zero_x, %v12_conv_1_zero_y, %v12_conv_1_scale, padding=[2, 2, 2, 2], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %83 = nn.mcutruncate(%82) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %84 = nn.mcuconv2d(%83, %v12_conv_2_weight, %v12_conv_2_bias, %v12_conv_2_zero_x, %v12_conv_2_zero_y, %v12_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %85 = nn.mcutruncate(%84) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %86 = nn.mcuconv2d(%85, %v13_conv_0_weight, %v13_conv_0_bias, %v13_conv_0_zero_x, %v13_conv_0_zero_y, %v13_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %87 = nn.mcutruncate(%86) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %88 = nn.mcuconv2d(%87, %v13_conv_1_weight, %v13_conv_1_bias, %v13_conv_1_zero_x, %v13_conv_1_zero_y, %v13_conv_1_scale, padding=[2, 2, 2, 2], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %89 = nn.mcutruncate(%88) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %90 = nn.mcuconv2d(%89, %v13_conv_2_weight, %v13_conv_2_bias, %v13_conv_2_zero_x, %v13_conv_2_zero_y, %v13_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %91 = nn.mcutruncate(%90) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %92 = nn.mcuadd(%85, %91, %v13_qadd_zero_x1, %v13_qadd_zero_x2, %v13_qadd_scale_x1, %v13_qadd_scale_x2, %v13_qadd_zero_y, %v13_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %93 = nn.mcutruncate(%92) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %94 = nn.mcuconv2d(%93, %v14_conv_0_weight, %v14_conv_0_bias, %v14_conv_0_zero_x, %v14_conv_0_zero_y, %v14_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %95 = nn.mcutruncate(%94) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %96 = nn.mcuconv2d(%95, %v14_conv_1_weight, %v14_conv_1_bias, %v14_conv_1_zero_x, %v14_conv_1_zero_y, %v14_conv_1_scale, padding=[2, 2, 2, 2], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %97 = nn.mcutruncate(%96) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %98 = nn.mcuconv2d(%97, %v14_conv_2_weight, %v14_conv_2_bias, %v14_conv_2_zero_x, %v14_conv_2_zero_y, %v14_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %99 = nn.mcutruncate(%98) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %100 = nn.mcuadd(%93, %99, %v14_qadd_zero_x1, %v14_qadd_zero_x2, %v14_qadd_scale_x1, %v14_qadd_scale_x2, %v14_qadd_zero_y, %v14_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %101 = nn.mcutruncate(%100) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %102 = nn.mcuconv2d(%101, %v15_conv_0_weight, %v15_conv_0_bias, %v15_conv_0_zero_x, %v15_conv_0_zero_y, %v15_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %103 = nn.mcutruncate(%102) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %104 = nn.mcuconv2d(%103, %v15_conv_1_weight, %v15_conv_1_bias, %v15_conv_1_zero_x, %v15_conv_1_zero_y, %v15_conv_1_scale, padding=[2, 2, 2, 2], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %105 = nn.mcutruncate(%104) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %106 = nn.mcuconv2d(%105, %v15_conv_2_weight, %v15_conv_2_bias, %v15_conv_2_zero_x, %v15_conv_2_zero_y, %v15_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %107 = nn.mcutruncate(%106) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %108 = nn.mcuadd(%101, %107, %v15_qadd_zero_x1, %v15_qadd_zero_x2, %v15_qadd_scale_x1, %v15_qadd_scale_x2, %v15_qadd_zero_y, %v15_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %109 = nn.mcutruncate(%108) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %110 = nn.mcuconv2d(%109, %v16_conv_0_weight, %v16_conv_0_bias, %v16_conv_0_zero_x, %v16_conv_0_zero_y, %v16_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %111 = nn.mcutruncate(%110) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %112 = nn.mcuconv2d(%111, %v16_conv_1_weight, %v16_conv_1_bias, %v16_conv_1_zero_x, %v16_conv_1_zero_y, %v16_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=192) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %113 = nn.mcutruncate(%112) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %114 = nn.mcuconv2d(%113, %v16_conv_2_weight, %v16_conv_2_bias, %v16_conv_2_zero_x, %v16_conv_2_zero_y, %v16_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %115 = nn.mcutruncate(%114) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %116 = nn.mcuconv2d(%115, %v17_conv_0_weight, %v17_conv_0_bias, %v17_conv_0_zero_x, %v17_conv_0_zero_y, %v17_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %117 = nn.mcutruncate(%116) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %118 = nn.mcuconv2d(%117, %v17_conv_1_weight, %v17_conv_1_bias, %v17_conv_1_zero_x, %v17_conv_1_zero_y, %v17_conv_1_scale, padding=[3, 3, 3, 3], groups=384) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %119 = nn.mcutruncate(%118) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %120 = nn.mcuconv2d(%119, %v17_conv_2_weight, %v17_conv_2_bias, %v17_conv_2_zero_x, %v17_conv_2_zero_y, %v17_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %121 = nn.mcutruncate(%120) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %122 = nn.mcuadd(%115, %121, %v17_qadd_zero_x1, %v17_qadd_zero_x2, %v17_qadd_scale_x1, %v17_qadd_scale_x2, %v17_qadd_zero_y, %v17_qadd_scale_y, axis=0) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %123 = nn.mcutruncate(%122) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %124 = nn.mcuconv2d(%123, %v18_conv_0_weight, %v18_conv_0_bias, %v18_conv_0_zero_x, %v18_conv_0_zero_y, %v18_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %125 = nn.mcutruncate(%124) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %126 = nn.mcuconv2d(%125, %v18_conv_1_weight, %v18_conv_1_bias, %v18_conv_1_zero_x, %v18_conv_1_zero_y, %v18_conv_1_scale, padding=[3, 3, 3, 3], groups=192) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %127 = nn.mcutruncate(%126) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %128 = nn.mcuconv2d(%127, %v18_conv_2_weight, %v18_conv_2_bias, %v18_conv_2_zero_x, %v18_conv_2_zero_y, %v18_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %129 = nn.mcutruncate(%128) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %130 = nn.mcuadd(%123, %129, %v18_qadd_zero_x1, %v18_qadd_zero_x2, %v18_qadd_scale_x1, %v18_qadd_scale_x2, %v18_qadd_zero_y, %v18_qadd_scale_y, axis=0) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %131 = nn.mcutruncate(%130) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %132 = nn.mcuconv2d(%131, %v19_conv_0_weight, %v19_conv_0_bias, %v19_conv_0_zero_x, %v19_conv_0_zero_y, %v19_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %133 = nn.mcutruncate(%132) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %134 = nn.mcuconv2d(%133, %v19_conv_1_weight, %v19_conv_1_bias, %v19_conv_1_zero_x, %v19_conv_1_zero_y, %v19_conv_1_scale, padding=[3, 3, 3, 3], groups=192) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %135 = nn.mcutruncate(%134) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %136 = nn.mcuconv2d(%135, %v19_conv_2_weight, %v19_conv_2_bias, %v19_conv_2_zero_x, %v19_conv_2_zero_y, %v19_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %137 = nn.mcutruncate(%136) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %138 = nn.mcuadd(%131, %137, %v19_qadd_zero_x1, %v19_qadd_zero_x2, %v19_qadd_scale_x1, %v19_qadd_scale_x2, %v19_qadd_zero_y, %v19_qadd_scale_y, axis=0) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %139 = nn.mcutruncate(%138) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %140 = nn.mcuconv2d(%139, %v20_conv_0_weight, %v20_conv_0_bias, %v20_conv_0_zero_x, %v20_conv_0_zero_y, %v20_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %141 = nn.mcutruncate(%140) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %142 = nn.mcuconv2d(%141, %v20_conv_1_weight, %v20_conv_1_bias, %v20_conv_1_zero_x, %v20_conv_1_zero_y, %v20_conv_1_scale, padding=[3, 3, 3, 3], groups=384) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %143 = nn.mcutruncate(%142) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %144 = nn.mcuconv2d(%143, %v20_conv_2_weight, %v20_conv_2_bias, %v20_conv_2_zero_x, %v20_conv_2_zero_y, %v20_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %145 = nn.mcutruncate(%144) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %146 = mcumean(%145, axis=[2, 3], keepdims=True) /* ty=Tensor[(1, 96, 1, 1), int8] */;
  %147 = nn.mcuconv2d(%146, %v21_weight, %v21_bias, %v21_zero_x, %v21_zero_y, %v21_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %148 = nn.mcutruncate(%147) /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %149 = reshape(%148, newshape=[0, 0]) /* ty=Tensor[(1, 10), int8] */;
  %150 = cast(%149, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %151 = nn.log_softmax(%150) /* ty=Tensor[(1, 10), float32] */;
  %152 = greater_equal(%147, -128 /* ty=int32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %153 = less_equal(%147, 127 /* ty=int32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %154 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %155 = negative(%154) /* ty=float32 */;
  %156 = multiply(%155, %label) /* ty=Tensor[(1, 10), float32] */;
  %157 = sum(%156, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %158 = exp(%151) /* ty=Tensor[(1, 10), float32] */;
  %159 = multiply(%157, %158) /* ty=Tensor[(1, 10), float32] */;
  %160 = subtract(%156, %159) /* ty=Tensor[(1, 10), float32] */;
  %161 = multiply(%152, %153) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %162 = reshape(%160, newshape=[1, 10, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %163 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %164 = where(%161, %162, %163) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %165 = cast(%164, dtype="int32") /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %166 = reshape(%146, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 1, 1), int8] */;
  %167 = tile(%164, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 960, 1, 1), float32] */;
  %168 = cast(%166, dtype="float32") /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %169 = reshape(%167, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(960, 1, 1, 1), float32] */;
  %170 = nn.conv2d(%168, %169, padding=[0, 0, 0, 0], groups=96, out_dtype="float32") /* ty=Tensor[(1, 960, 1, 1), float32] */;
  %171 = reshape(%170, newshape=[1, 96, 10, 1, 1]) /* ty=Tensor[(1, 96, 10, 1, 1), float32] */;
  %172 = sum(%171, axis=[0]) /* ty=Tensor[(96, 10, 1, 1), float32] */;
  %173 = transpose(%172, axes=[1, 0, 2, 3]) /* ty=Tensor[(10, 96, 1, 1), float32] */;
  %174 = abs(%173) /* ty=Tensor[(10, 96, 1, 1), float32] */;
  %175 = max(%174, axis=[1], keepdims=True) /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %176 = divide(%175, 127f /* ty=float32 */) /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %177 = divide(%173, %176) /* ty=Tensor[(10, 96, 1, 1), float32] */;
  %178 = greater_equal(%144, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %179 = less_equal(%144, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %180 = cast(%v21_weight, dtype="float32") /* ty=Tensor[(10, 96, 1, 1), float32] */;
  %181 = nn.conv2d_transpose(%164, %180, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %182 = abs(%181) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %183 = max(%182, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %184 = divide(%183, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %185 = divide(%181, %184) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %186 = cast(%185, dtype="int8") /* ty=Tensor[(1, 96, 1, 1), int8] */;
  %187 = cast(%186, dtype="float32") /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %188 = multiply(%187, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %189 = ones(shape=[1, 96, 4, 4], dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %190 = multiply(%178, %179) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %191 = multiply(%188, %189) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %192 = zeros(shape=[1, 96, 4, 4], dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %193 = where(%190, %191, %192) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %194 = cast(%193, dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %195 = greater_equal(%142, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %196 = less_equal(%142, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %197 = cast(%v20_conv_2_weight, dtype="float32") /* ty=Tensor[(96, 384, 1, 1), float32] */;
  %198 = nn.conv2d_transpose(%193, %197, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %199 = abs(%198) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %200 = max(%199, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %201 = divide(%200, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %202 = divide(%198, %201) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %203 = multiply(%195, %196) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %204 = cast(%202, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %205 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %206 = where(%203, %204, %205) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %207 = cast(%206, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %208 = greater_equal(%140, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %209 = less_equal(%140, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %210 = nn.conv2d_transpose(%206, %v20_conv_1_weight, channels=384, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=384, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %211 = abs(%210) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %212 = max(%211, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %213 = divide(%212, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %214 = divide(%210, %213) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %215 = multiply(%208, %209) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %216 = cast(%214, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %217 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %218 = where(%215, %216, %217) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %219 = cast(%218, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %220 = tile(%218, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 24576, 4, 4), int8] */;
  %221 = reshape(%139, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %222 = reshape(%220, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 4, 4), int8] */;
  %223 = nn.conv2d(%221, %222, padding=[0, 0, 0, 0], groups=64, out_dtype="int32") /* ty=Tensor[(1, 24576, 1, 1), int32] */;
  %224 = reshape(%223, newshape=[1, 64, 384, 1, 1]) /* ty=Tensor[(1, 64, 384, 1, 1), int32] */;
  %225 = sum(%224, axis=[0]) /* ty=Tensor[(64, 384, 1, 1), int32] */;
  %226 = transpose(%225, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 64, 1, 1), int32] */;
  %227 = abs(%226) /* ty=Tensor[(384, 64, 1, 1), int32] */;
  %228 = max(%227, axis=[1], keepdims=True) /* ty=Tensor[(384, 1, 1, 1), int32] */;
  %229 = divide(%228, 127 /* ty=int32 */) /* ty=Tensor[(384, 1, 1, 1), int32] */;
  %230 = divide(%226, %229) /* ty=Tensor[(384, 64, 1, 1), int32] */;
  %231 = greater_equal(%136, -128 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %232 = less_equal(%136, 127 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %233 = greater_equal(%138, meta[relay.Constant][0] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %234 = less_equal(%138, meta[relay.Constant][1] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %235 = nn.conv2d_transpose(%218, %v20_conv_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %236 = abs(%235) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %237 = max(%236, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %238 = divide(%237, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %239 = divide(%235, %238) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %240 = multiply(%233, %234) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %241 = cast(%239, dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %242 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %243 = where(%240, %241, %242) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %244 = cast(%243, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %245 = reshape(%v19_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %246 = divide(%244, %245) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %247 = reshape(%v19_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %248 = multiply(%246, %247) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %249 = multiply(%231, %232) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %250 = cast(%248, dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %251 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %252 = where(%249, %250, %251) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %253 = cast(%252, dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %254 = greater_equal(%134, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %255 = less_equal(%134, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %256 = nn.conv2d_transpose(%252, %v19_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %257 = abs(%256) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %258 = max(%257, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %259 = divide(%258, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %260 = divide(%256, %259) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %261 = multiply(%254, %255) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %262 = cast(%260, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %263 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %264 = where(%261, %262, %263) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %265 = cast(%264, dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %266 = greater_equal(%132, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %267 = less_equal(%132, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %268 = nn.conv2d_transpose(%264, %v19_conv_1_weight, channels=192, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %269 = abs(%268) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %270 = max(%269, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %271 = divide(%270, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %272 = divide(%268, %271) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %273 = multiply(%266, %267) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %274 = cast(%272, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %275 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %276 = where(%273, %274, %275) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %277 = cast(%276, dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %278 = tile(%276, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 12288, 4, 4), int8] */;
  %279 = reshape(%131, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %280 = reshape(%278, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(12288, 1, 4, 4), int8] */;
  %281 = nn.conv2d(%279, %280, padding=[0, 0, 0, 0], groups=64, out_dtype="int32") /* ty=Tensor[(1, 12288, 1, 1), int32] */;
  %282 = reshape(%281, newshape=[1, 64, 192, 1, 1]) /* ty=Tensor[(1, 64, 192, 1, 1), int32] */;
  %283 = sum(%282, axis=[0]) /* ty=Tensor[(64, 192, 1, 1), int32] */;
  %284 = transpose(%283, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 64, 1, 1), int32] */;
  %285 = abs(%284) /* ty=Tensor[(192, 64, 1, 1), int32] */;
  %286 = max(%285, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %287 = divide(%286, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %288 = divide(%284, %287) /* ty=Tensor[(192, 64, 1, 1), int32] */;
  %289 = greater_equal(%128, -128 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %290 = less_equal(%128, 127 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %291 = greater_equal(%130, meta[relay.Constant][2] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %292 = less_equal(%130, meta[relay.Constant][3] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %293 = nn.conv2d_transpose(%276, %v19_conv_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %294 = abs(%293) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %295 = max(%294, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %296 = divide(%295, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %297 = divide(%293, %296) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %298 = multiply(%291, %292) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %299 = cast(%297, dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %300 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %301 = where(%298, %299, %300) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %302 = cast(%301, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %303 = reshape(%v18_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %304 = divide(%302, %303) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %305 = reshape(%v18_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %306 = multiply(%304, %305) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %307 = multiply(%289, %290) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %308 = cast(%306, dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %309 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %310 = where(%307, %308, %309) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %311 = cast(%310, dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %312 = greater_equal(%126, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %313 = less_equal(%126, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %314 = nn.conv2d_transpose(%310, %v18_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %315 = abs(%314) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %316 = max(%315, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %317 = divide(%316, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %318 = divide(%314, %317) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %319 = multiply(%312, %313) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %320 = cast(%318, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %321 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %322 = where(%319, %320, %321) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %323 = cast(%322, dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %324 = greater_equal(%124, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %325 = less_equal(%124, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %326 = nn.conv2d_transpose(%322, %v18_conv_1_weight, channels=192, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %327 = abs(%326) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %328 = max(%327, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %329 = divide(%328, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %330 = divide(%326, %329) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %331 = multiply(%324, %325) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %332 = cast(%330, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %333 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %334 = where(%331, %332, %333) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %335 = cast(%334, dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %336 = tile(%334, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 12288, 4, 4), int8] */;
  %337 = reshape(%123, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %338 = reshape(%336, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(12288, 1, 4, 4), int8] */;
  %339 = nn.conv2d(%337, %338, padding=[0, 0, 0, 0], groups=64, out_dtype="int32") /* ty=Tensor[(1, 12288, 1, 1), int32] */;
  %340 = reshape(%339, newshape=[1, 64, 192, 1, 1]) /* ty=Tensor[(1, 64, 192, 1, 1), int32] */;
  %341 = sum(%340, axis=[0]) /* ty=Tensor[(64, 192, 1, 1), int32] */;
  %342 = transpose(%341, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 64, 1, 1), int32] */;
  %343 = abs(%342) /* ty=Tensor[(192, 64, 1, 1), int32] */;
  %344 = max(%343, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %345 = divide(%344, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %346 = divide(%342, %345) /* ty=Tensor[(192, 64, 1, 1), int32] */;
  %347 = greater_equal(%120, -128 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %348 = less_equal(%120, 127 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %349 = greater_equal(%122, meta[relay.Constant][4] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %350 = less_equal(%122, meta[relay.Constant][5] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %351 = nn.conv2d_transpose(%334, %v18_conv_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %352 = abs(%351) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %353 = max(%352, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %354 = divide(%353, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %355 = divide(%351, %354) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %356 = multiply(%349, %350) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %357 = cast(%355, dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %358 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %359 = where(%356, %357, %358) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %360 = cast(%359, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %361 = reshape(%v17_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %362 = divide(%360, %361) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %363 = reshape(%v17_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %364 = multiply(%362, %363) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %365 = multiply(%347, %348) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %366 = cast(%364, dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %367 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %368 = where(%365, %366, %367) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %369 = cast(%368, dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %370 = greater_equal(%118, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %371 = less_equal(%118, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %372 = nn.conv2d_transpose(%368, %v17_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %373 = abs(%372) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %374 = max(%373, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %375 = divide(%374, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %376 = divide(%372, %375) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %377 = multiply(%370, %371) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %378 = cast(%376, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %379 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %380 = where(%377, %378, %379) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %381 = cast(%380, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %382 = greater_equal(%116, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %383 = less_equal(%116, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %384 = nn.conv2d_transpose(%380, %v17_conv_1_weight, channels=384, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=384, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %385 = abs(%384) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %386 = max(%385, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %387 = divide(%386, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %388 = divide(%384, %387) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %389 = multiply(%382, %383) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %390 = cast(%388, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %391 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %392 = where(%389, %390, %391) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %393 = cast(%392, dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %394 = reshape(%v17_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %395 = multiply(%393, %394) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %396 = cast(%115, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %397 = strided_slice(%396, begin=[0, 0, 0, 0], end=[1, 32, 4, 4], strides=[1], axes=None) /* ty=Tensor[(1, 32, 4, 4), float32] */;
  %398 = tile(%395, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 12288, 4, 4), float32] */;
  %399 = reshape(%397, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 4, 4), float32] */;
  %400 = reshape(%398, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(12288, 1, 4, 4), float32] */;
  %401 = nn.conv2d(%399, %400, padding=[0, 0, 0, 0], groups=32) /* ty=Tensor[(1, 12288, 1, 1), float32] */;
  %402 = reshape(%401, newshape=[1, 32, 384, 1, 1]) /* ty=Tensor[(1, 32, 384, 1, 1), float32] */;
  %403 = sum(%402, axis=[0]) /* ty=Tensor[(32, 384, 1, 1), float32] */;
  %404 = greater_equal(%114, -128 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %405 = less_equal(%114, 127 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %406 = cast(%v17_conv_0_weight, dtype="float32") /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %407 = multiply(%404, %405) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %408 = nn.conv2d_transpose(%395, %406, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %409 = zeros(shape=[1, 64, 4, 4], dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %410 = where(%407, %408, %409) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %411 = cast(%410, dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %412 = greater_equal(%112, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %413 = less_equal(%112, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %414 = cast(%v16_conv_2_weight, dtype="float32") /* ty=Tensor[(64, 192, 1, 1), float32] */;
  %415 = nn.conv2d_transpose(%410, %414, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %416 = abs(%415) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %417 = max(%416, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %418 = divide(%417, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %419 = divide(%415, %418) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %420 = multiply(%412, %413) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %421 = cast(%419, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %422 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %423 = where(%420, %421, %422) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %424 = cast(%423, dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %425 = greater_equal(%110, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %426 = less_equal(%110, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %427 = nn.conv2d_transpose(%423, %v16_conv_1_weight, channels=192, kernel_size=[7, 7], strides=[2, 2], output_padding=[1, 1], padding=[3, 3, 3, 3], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %428 = abs(%427) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %429 = max(%428, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %430 = divide(%429, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %431 = divide(%427, %430) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %432 = multiply(%425, %426) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %433 = cast(%431, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %434 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %435 = where(%432, %433, %434) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %436 = cast(%435, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %437 = tile(%435, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 8, 8), int8] */;
  %438 = reshape(%109, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %439 = reshape(%437, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 8, 8), int8] */;
  %440 = nn.conv2d(%438, %439, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %441 = reshape(%440, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), int32] */;
  %442 = sum(%441, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %443 = transpose(%442, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %444 = abs(%443) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %445 = max(%444, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %446 = divide(%445, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %447 = divide(%443, %446) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %448 = greater_equal(%106, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %449 = less_equal(%106, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %450 = greater_equal(%108, meta[relay.Constant][6] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %451 = less_equal(%108, meta[relay.Constant][7] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %452 = nn.conv2d_transpose(%435, %v16_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %453 = abs(%452) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %454 = max(%453, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %455 = divide(%454, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %456 = divide(%452, %455) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %457 = multiply(%450, %451) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %458 = cast(%456, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %459 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %460 = where(%457, %458, %459) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %461 = cast(%460, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %462 = reshape(%v15_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %463 = divide(%461, %462) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %464 = reshape(%v15_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %465 = multiply(%463, %464) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %466 = multiply(%448, %449) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %467 = cast(%465, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %468 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %469 = where(%466, %467, %468) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %470 = cast(%469, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %471 = greater_equal(%104, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %472 = less_equal(%104, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %473 = nn.conv2d_transpose(%469, %v15_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %474 = abs(%473) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %475 = max(%474, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %476 = divide(%475, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %477 = divide(%473, %476) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %478 = multiply(%471, %472) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %479 = cast(%477, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %480 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %481 = where(%478, %479, %480) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %482 = cast(%481, dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %483 = greater_equal(%102, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %484 = less_equal(%102, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %485 = nn.conv2d_transpose(%481, %v15_conv_1_weight, channels=96, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=96, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %486 = abs(%485) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %487 = max(%486, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %488 = divide(%487, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %489 = divide(%485, %488) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %490 = multiply(%483, %484) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %491 = cast(%489, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %492 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %493 = where(%490, %491, %492) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %494 = cast(%493, dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %495 = tile(%493, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 3072, 8, 8), int8] */;
  %496 = reshape(%101, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %497 = reshape(%495, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3072, 1, 8, 8), int8] */;
  %498 = nn.conv2d(%496, %497, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* ty=Tensor[(1, 3072, 1, 1), int32] */;
  %499 = reshape(%498, newshape=[1, 32, 96, 1, 1]) /* ty=Tensor[(1, 32, 96, 1, 1), int32] */;
  %500 = sum(%499, axis=[0]) /* ty=Tensor[(32, 96, 1, 1), int32] */;
  %501 = transpose(%500, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %502 = abs(%501) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %503 = max(%502, axis=[1], keepdims=True) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %504 = divide(%503, 127 /* ty=int32 */) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %505 = divide(%501, %504) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %506 = greater_equal(%98, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %507 = less_equal(%98, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %508 = greater_equal(%100, meta[relay.Constant][8] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %509 = less_equal(%100, meta[relay.Constant][9] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %510 = nn.conv2d_transpose(%493, %v15_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %511 = abs(%510) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %512 = max(%511, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %513 = divide(%512, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %514 = divide(%510, %513) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %515 = multiply(%508, %509) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %516 = cast(%514, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %517 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %518 = where(%515, %516, %517) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %519 = cast(%518, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %520 = reshape(%v14_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %521 = divide(%519, %520) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %522 = reshape(%v14_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %523 = multiply(%521, %522) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %524 = multiply(%506, %507) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %525 = cast(%523, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %526 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %527 = where(%524, %525, %526) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %528 = cast(%527, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %529 = greater_equal(%96, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %530 = less_equal(%96, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %531 = nn.conv2d_transpose(%527, %v14_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %532 = abs(%531) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %533 = max(%532, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %534 = divide(%533, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %535 = divide(%531, %534) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %536 = multiply(%529, %530) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %537 = cast(%535, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %538 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %539 = where(%536, %537, %538) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %540 = cast(%539, dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %541 = greater_equal(%94, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %542 = less_equal(%94, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %543 = nn.conv2d_transpose(%539, %v14_conv_1_weight, channels=96, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=96, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %544 = abs(%543) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %545 = max(%544, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %546 = divide(%545, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %547 = divide(%543, %546) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %548 = multiply(%541, %542) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %549 = cast(%547, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %550 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %551 = where(%548, %549, %550) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %552 = cast(%551, dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %553 = tile(%551, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 3072, 8, 8), int8] */;
  %554 = reshape(%93, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %555 = reshape(%553, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3072, 1, 8, 8), int8] */;
  %556 = nn.conv2d(%554, %555, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* ty=Tensor[(1, 3072, 1, 1), int32] */;
  %557 = reshape(%556, newshape=[1, 32, 96, 1, 1]) /* ty=Tensor[(1, 32, 96, 1, 1), int32] */;
  %558 = sum(%557, axis=[0]) /* ty=Tensor[(32, 96, 1, 1), int32] */;
  %559 = transpose(%558, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %560 = abs(%559) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %561 = max(%560, axis=[1], keepdims=True) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %562 = divide(%561, 127 /* ty=int32 */) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %563 = divide(%559, %562) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %564 = greater_equal(%90, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %565 = less_equal(%90, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %566 = greater_equal(%92, meta[relay.Constant][10] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %567 = less_equal(%92, meta[relay.Constant][11] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %568 = nn.conv2d_transpose(%551, %v14_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %569 = abs(%568) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %570 = max(%569, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %571 = divide(%570, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %572 = divide(%568, %571) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %573 = multiply(%566, %567) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %574 = cast(%572, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %575 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %576 = where(%573, %574, %575) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %577 = cast(%576, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %578 = reshape(%v13_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %579 = divide(%577, %578) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %580 = reshape(%v13_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %581 = multiply(%579, %580) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %582 = multiply(%564, %565) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %583 = cast(%581, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %584 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %585 = where(%582, %583, %584) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %586 = cast(%585, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %587 = greater_equal(%88, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %588 = less_equal(%88, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %589 = nn.conv2d_transpose(%585, %v13_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %590 = abs(%589) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %591 = max(%590, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %592 = divide(%591, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %593 = divide(%589, %592) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %594 = multiply(%587, %588) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %595 = cast(%593, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %596 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %597 = where(%594, %595, %596) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %598 = cast(%597, dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %599 = greater_equal(%86, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %600 = less_equal(%86, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %601 = nn.conv2d_transpose(%597, %v13_conv_1_weight, channels=96, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=96, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %602 = abs(%601) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %603 = max(%602, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %604 = divide(%603, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %605 = divide(%601, %604) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %606 = multiply(%599, %600) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %607 = cast(%605, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %608 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %609 = where(%606, %607, %608) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %610 = cast(%609, dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %611 = tile(%609, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 3072, 8, 8), int8] */;
  %612 = reshape(%85, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %613 = reshape(%611, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3072, 1, 8, 8), int8] */;
  %614 = nn.conv2d(%612, %613, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* ty=Tensor[(1, 3072, 1, 1), int32] */;
  %615 = reshape(%614, newshape=[1, 32, 96, 1, 1]) /* ty=Tensor[(1, 32, 96, 1, 1), int32] */;
  %616 = sum(%615, axis=[0]) /* ty=Tensor[(32, 96, 1, 1), int32] */;
  %617 = transpose(%616, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %618 = abs(%617) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %619 = max(%618, axis=[1], keepdims=True) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %620 = divide(%619, 127 /* ty=int32 */) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %621 = divide(%617, %620) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %622 = greater_equal(%84, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %623 = less_equal(%84, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %624 = nn.conv2d_transpose(%609, %v13_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %625 = abs(%624) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %626 = max(%625, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %627 = divide(%626, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %628 = divide(%624, %627) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %629 = multiply(%622, %623) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %630 = cast(%628, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %631 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %632 = where(%629, %630, %631) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %633 = cast(%632, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %634 = greater_equal(%82, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %635 = less_equal(%82, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %636 = nn.conv2d_transpose(%632, %v12_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %637 = abs(%636) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %638 = max(%637, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %639 = divide(%638, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %640 = divide(%636, %639) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %641 = multiply(%634, %635) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %642 = cast(%640, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %643 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %644 = where(%641, %642, %643) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %645 = cast(%644, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %646 = greater_equal(%80, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %647 = less_equal(%80, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %648 = nn.conv2d_transpose(%644, %v12_conv_1_weight, channels=144, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=144, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %649 = abs(%648) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %650 = max(%649, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %651 = divide(%650, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %652 = divide(%648, %651) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %653 = multiply(%646, %647) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %654 = cast(%652, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %655 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %656 = where(%653, %654, %655) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %657 = cast(%656, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %658 = greater_equal(%76, -128 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %659 = less_equal(%76, 127 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %660 = greater_equal(%78, meta[relay.Constant][12] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %661 = less_equal(%78, meta[relay.Constant][13] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %662 = nn.conv2d_transpose(%656, %v12_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %663 = abs(%662) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %664 = max(%663, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %665 = divide(%664, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %666 = divide(%662, %665) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %667 = multiply(%660, %661) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %668 = cast(%666, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %669 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %670 = where(%667, %668, %669) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %671 = cast(%670, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %672 = reshape(%v11_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %673 = divide(%671, %672) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %674 = reshape(%v11_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %675 = multiply(%673, %674) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %676 = multiply(%658, %659) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %677 = cast(%675, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %678 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %679 = where(%676, %677, %678) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %680 = cast(%679, dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %681 = greater_equal(%74, -128 /* ty=int32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %682 = less_equal(%74, 127 /* ty=int32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %683 = nn.conv2d_transpose(%679, %v11_conv_2_weight, channels=72, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %684 = abs(%683) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %685 = max(%684, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %686 = divide(%685, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %687 = divide(%683, %686) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %688 = multiply(%681, %682) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %689 = cast(%687, dtype="int8") /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %690 = zeros(shape=[1, 72, 8, 8], dtype="int8") /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %691 = where(%688, %689, %690) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %692 = cast(%691, dtype="int32") /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %693 = greater_equal(%72, -128 /* ty=int32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %694 = less_equal(%72, 127 /* ty=int32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %695 = nn.conv2d_transpose(%691, %v11_conv_1_weight, channels=72, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=72, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %696 = abs(%695) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %697 = max(%696, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %698 = divide(%697, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %699 = divide(%695, %698) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %700 = multiply(%693, %694) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %701 = cast(%699, dtype="int8") /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %702 = zeros(shape=[1, 72, 8, 8], dtype="int8") /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %703 = where(%700, %701, %702) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %704 = cast(%703, dtype="int32") /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %705 = greater_equal(%68, -128 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %706 = less_equal(%68, 127 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %707 = greater_equal(%70, meta[relay.Constant][14] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %708 = less_equal(%70, meta[relay.Constant][15] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %709 = nn.conv2d_transpose(%703, %v11_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %710 = abs(%709) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %711 = max(%710, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %712 = divide(%711, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %713 = divide(%709, %712) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %714 = multiply(%707, %708) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %715 = cast(%713, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %716 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %717 = where(%714, %715, %716) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %718 = cast(%717, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %719 = reshape(%v10_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %720 = divide(%718, %719) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %721 = reshape(%v10_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %722 = multiply(%720, %721) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %723 = multiply(%705, %706) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %724 = cast(%722, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %725 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %726 = where(%723, %724, %725) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %727 = cast(%726, dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %728 = greater_equal(%66, -128 /* ty=int32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %729 = less_equal(%66, 127 /* ty=int32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %730 = nn.conv2d_transpose(%726, %v10_conv_2_weight, channels=72, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %731 = abs(%730) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %732 = max(%731, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %733 = divide(%732, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %734 = divide(%730, %733) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %735 = multiply(%728, %729) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %736 = cast(%734, dtype="int8") /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %737 = zeros(shape=[1, 72, 8, 8], dtype="int8") /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %738 = where(%735, %736, %737) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %739 = cast(%738, dtype="int32") /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %740 = nn.cross_entropy_with_logits(%151, %label) /* ty=float32 */;
  %741 = sum(%165, axis=[1], exclude=True) /* ty=Tensor[(10), int32] */;
  %742 = cast(%177, dtype="int8") /* ty=Tensor[(10, 96, 1, 1), int8] */;
  %743 = sum(%194, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %744 = sum(%207, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %745 = sum(%219, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %746 = cast(%230, dtype="int8") /* ty=Tensor[(384, 64, 1, 1), int8] */;
  %747 = sum(%253, axis=[1], exclude=True) /* ty=Tensor[(64), int32] */;
  %748 = sum(%265, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %749 = sum(%277, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %750 = cast(%288, dtype="int8") /* ty=Tensor[(192, 64, 1, 1), int8] */;
  %751 = sum(%311, axis=[1], exclude=True) /* ty=Tensor[(64), int32] */;
  %752 = sum(%323, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %753 = sum(%335, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %754 = cast(%346, dtype="int8") /* ty=Tensor[(192, 64, 1, 1), int8] */;
  %755 = sum(%369, axis=[1], exclude=True) /* ty=Tensor[(64), int32] */;
  %756 = sum(%381, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %757 = sum(%395, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %758 = transpose(%403, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 32, 1, 1), float32] */;
  %759 = sum(%411, axis=[1], exclude=True) /* ty=Tensor[(64), int32] */;
  %760 = sum(%424, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %761 = sum(%436, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %762 = cast(%447, dtype="int8") /* ty=Tensor[(192, 32, 1, 1), int8] */;
  %763 = sum(%470, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %764 = sum(%482, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %765 = sum(%494, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %766 = cast(%505, dtype="int8") /* ty=Tensor[(96, 32, 1, 1), int8] */;
  %767 = sum(%528, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %768 = sum(%540, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %769 = sum(%552, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %770 = cast(%563, dtype="int8") /* ty=Tensor[(96, 32, 1, 1), int8] */;
  %771 = sum(%586, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %772 = sum(%598, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %773 = sum(%610, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %774 = cast(%621, dtype="int8") /* ty=Tensor[(96, 32, 1, 1), int8] */;
  %775 = sum(%633, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %776 = sum(%645, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %777 = sum(%657, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %778 = sum(%680, axis=[1], exclude=True) /* ty=Tensor[(24), int32] */;
  %779 = sum(%692, axis=[1], exclude=True) /* ty=Tensor[(72), int32] */;
  %780 = sum(%704, axis=[1], exclude=True) /* ty=Tensor[(72), int32] */;
  %781 = sum(%727, axis=[1], exclude=True) /* ty=Tensor[(24), int32] */;
  %782 = sum(%739, axis=[1], exclude=True) /* ty=Tensor[(72), int32] */;
  (%740, %741, %742, %743, %744, %745, %746, %747, %748, %749, %750, %751, %752, %753, %754, %755, %756, %757, %758, %759, %760, %761, %762, %763, %764, %765, %766, %767, %768, %769, %770, %771, %772, %773, %774, %775, %776, %777, %778, %779, %780, %781, %782)
}

