def @main(%input: Tensor[(1, 3, 128, 128), int8], %v0_weight: Tensor[(16, 3, 3, 3), int8], %v0_bias: Tensor[(16), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(16), float32], %v1_conv_0_weight: Tensor[(16, 1, 3, 3), int8], %v1_conv_0_bias: Tensor[(16), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(16), float32], %v1_conv_1_weight: Tensor[(8, 16, 1, 1), int8], %v1_conv_1_bias: Tensor[(8), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(8), float32], %v2_conv_0_weight: Tensor[(24, 8, 1, 1), int8], %v2_conv_0_bias: Tensor[(24), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(24), float32], %v2_conv_1_weight: Tensor[(24, 1, 5, 5), int8], %v2_conv_1_bias: Tensor[(24), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(24), float32], %v2_conv_2_weight: Tensor[(16, 24, 1, 1), int8], %v2_conv_2_bias: Tensor[(16), int32], %v2_conv_2_zero_x: Tensor[(1), int8], %v2_conv_2_zero_y: Tensor[(1), int8], %v2_conv_2_scale: Tensor[(16), float32], %v3_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v3_conv_0_bias: Tensor[(48), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(48), float32], %v3_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v3_conv_1_bias: Tensor[(48), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(48), float32], %v3_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v3_conv_2_bias: Tensor[(16), int32], %v3_conv_2_zero_x: Tensor[(1), int8], %v3_conv_2_zero_y: Tensor[(1), int8], %v3_conv_2_scale: Tensor[(16), float32], %v3_qadd_zero_x1: Tensor[(1), int8], %v3_qadd_zero_x2: Tensor[(1), int8], %v3_qadd_scale_x1: Tensor[(1), float32], %v3_qadd_scale_x2: Tensor[(1), float32], %v3_qadd_zero_y: Tensor[(1), int8], %v3_qadd_scale_y: Tensor[(1), float32], %v4_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v4_conv_0_bias: Tensor[(48), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(48), float32], %v4_conv_1_weight: Tensor[(48, 1, 7, 7), int8], %v4_conv_1_bias: Tensor[(48), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(48), float32], %v4_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v4_conv_2_bias: Tensor[(16), int32], %v4_conv_2_zero_x: Tensor[(1), int8], %v4_conv_2_zero_y: Tensor[(1), int8], %v4_conv_2_scale: Tensor[(16), float32], %v5_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v5_conv_0_bias: Tensor[(48), int32], %v5_conv_0_zero_x: Tensor[(1), int8], %v5_conv_0_zero_y: Tensor[(1), int8], %v5_conv_0_scale: Tensor[(48), float32], %v5_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v5_conv_1_bias: Tensor[(48), int32], %v5_conv_1_zero_x: Tensor[(1), int8], %v5_conv_1_zero_y: Tensor[(1), int8], %v5_conv_1_scale: Tensor[(48), float32], %v5_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v5_conv_2_bias: Tensor[(16), int32], %v5_conv_2_zero_x: Tensor[(1), int8], %v5_conv_2_zero_y: Tensor[(1), int8], %v5_conv_2_scale: Tensor[(16), float32], %v5_qadd_zero_x1: Tensor[(1), int8], %v5_qadd_zero_x2: Tensor[(1), int8], %v5_qadd_scale_x1: Tensor[(1), float32], %v5_qadd_scale_x2: Tensor[(1), float32], %v5_qadd_zero_y: Tensor[(1), int8], %v5_qadd_scale_y: Tensor[(1), float32], %v6_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v6_conv_0_bias: Tensor[(48), int32], %v6_conv_0_zero_x: Tensor[(1), int8], %v6_conv_0_zero_y: Tensor[(1), int8], %v6_conv_0_scale: Tensor[(48), float32], %v6_conv_1_weight: Tensor[(48, 1, 5, 5), int8], %v6_conv_1_bias: Tensor[(48), int32], %v6_conv_1_zero_x: Tensor[(1), int8], %v6_conv_1_zero_y: Tensor[(1), int8], %v6_conv_1_scale: Tensor[(48), float32], %v6_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v6_conv_2_bias: Tensor[(16), int32], %v6_conv_2_zero_x: Tensor[(1), int8], %v6_conv_2_zero_y: Tensor[(1), int8], %v6_conv_2_scale: Tensor[(16), float32], %v6_qadd_zero_x1: Tensor[(1), int8], %v6_qadd_zero_x2: Tensor[(1), int8], %v6_qadd_scale_x1: Tensor[(1), float32], %v6_qadd_scale_x2: Tensor[(1), float32], %v6_qadd_zero_y: Tensor[(1), int8], %v6_qadd_scale_y: Tensor[(1), float32], %v7_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v7_conv_0_bias: Tensor[(48), int32], %v7_conv_0_zero_x: Tensor[(1), int8], %v7_conv_0_zero_y: Tensor[(1), int8], %v7_conv_0_scale: Tensor[(48), float32], %v7_conv_1_weight: Tensor[(48, 1, 5, 5), int8], %v7_conv_1_bias: Tensor[(48), int32], %v7_conv_1_zero_x: Tensor[(1), int8], %v7_conv_1_zero_y: Tensor[(1), int8], %v7_conv_1_scale: Tensor[(48), float32], %v7_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v7_conv_2_bias: Tensor[(16), int32], %v7_conv_2_zero_x: Tensor[(1), int8], %v7_conv_2_zero_y: Tensor[(1), int8], %v7_conv_2_scale: Tensor[(16), float32], %v7_qadd_zero_x1: Tensor[(1), int8], %v7_qadd_zero_x2: Tensor[(1), int8], %v7_qadd_scale_x1: Tensor[(1), float32], %v7_qadd_scale_x2: Tensor[(1), float32], %v7_qadd_zero_y: Tensor[(1), int8], %v7_qadd_scale_y: Tensor[(1), float32], %v8_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v8_conv_0_bias: Tensor[(96), int32], %v8_conv_0_zero_x: Tensor[(1), int8], %v8_conv_0_zero_y: Tensor[(1), int8], %v8_conv_0_scale: Tensor[(96), float32], %v8_conv_1_weight: Tensor[(96, 1, 7, 7), int8], %v8_conv_1_bias: Tensor[(96), int32], %v8_conv_1_zero_x: Tensor[(1), int8], %v8_conv_1_zero_y: Tensor[(1), int8], %v8_conv_1_scale: Tensor[(96), float32], %v8_conv_2_weight: Tensor[(24, 96, 1, 1), int8], %v8_conv_2_bias: Tensor[(24), int32], %v8_conv_2_zero_x: Tensor[(1), int8], %v8_conv_2_zero_y: Tensor[(1), int8], %v8_conv_2_scale: Tensor[(24), float32], %v9_conv_0_weight: Tensor[(72, 24, 1, 1), int8], %v9_conv_0_bias: Tensor[(72), int32], %v9_conv_0_zero_x: Tensor[(1), int8], %v9_conv_0_zero_y: Tensor[(1), int8], %v9_conv_0_scale: Tensor[(72), float32], %v9_conv_1_weight: Tensor[(72, 1, 5, 5), int8], %v9_conv_1_bias: Tensor[(72), int32], %v9_conv_1_zero_x: Tensor[(1), int8], %v9_conv_1_zero_y: Tensor[(1), int8], %v9_conv_1_scale: Tensor[(72), float32], %v9_conv_2_weight: Tensor[(24, 72, 1, 1), int8], %v9_conv_2_bias: Tensor[(24), int32], %v9_conv_2_zero_x: Tensor[(1), int8], %v9_conv_2_zero_y: Tensor[(1), int8], %v9_conv_2_scale: Tensor[(24), float32], %v9_qadd_zero_x1: Tensor[(1), int8], %v9_qadd_zero_x2: Tensor[(1), int8], %v9_qadd_scale_x1: Tensor[(1), float32], %v9_qadd_scale_x2: Tensor[(1), float32], %v9_qadd_zero_y: Tensor[(1), int8], %v9_qadd_scale_y: Tensor[(1), float32], %v10_conv_0_weight: Tensor[(72, 24, 1, 1), int8], %v10_conv_0_bias: Tensor[(72), int32], %v10_conv_0_zero_x: Tensor[(1), int8], %v10_conv_0_zero_y: Tensor[(1), int8], %v10_conv_0_scale: Tensor[(72), float32], %v10_conv_1_weight: Tensor[(72, 1, 5, 5), int8], %v10_conv_1_bias: Tensor[(72), int32], %v10_conv_1_zero_x: Tensor[(1), int8], %v10_conv_1_zero_y: Tensor[(1), int8], %v10_conv_1_scale: Tensor[(72), float32], %v10_conv_2_weight: Tensor[(24, 72, 1, 1), int8], %v10_conv_2_bias: Tensor[(24), int32], %v10_conv_2_zero_x: Tensor[(1), int8], %v10_conv_2_zero_y: Tensor[(1), int8], %v10_conv_2_scale: Tensor[(24), float32], %v10_qadd_zero_x1: Tensor[(1), int8], %v10_qadd_zero_x2: Tensor[(1), int8], %v10_qadd_scale_x1: Tensor[(1), float32], %v10_qadd_scale_x2: Tensor[(1), float32], %v10_qadd_zero_y: Tensor[(1), int8], %v10_qadd_scale_y: Tensor[(1), float32], %v11_conv_0_weight: Tensor[(72, 24, 1, 1), int8], %v11_conv_0_bias: Tensor[(72), int32], %v11_conv_0_zero_x: Tensor[(1), int8], %v11_conv_0_zero_y: Tensor[(1), int8], %v11_conv_0_scale: Tensor[(72), float32], %v11_conv_1_weight: Tensor[(72, 1, 5, 5), int8], %v11_conv_1_bias: Tensor[(72), int32], %v11_conv_1_zero_x: Tensor[(1), int8], %v11_conv_1_zero_y: Tensor[(1), int8], %v11_conv_1_scale: Tensor[(72), float32], %v11_conv_2_weight: Tensor[(24, 72, 1, 1), int8], %v11_conv_2_bias: Tensor[(24), int32], %v11_conv_2_zero_x: Tensor[(1), int8], %v11_conv_2_zero_y: Tensor[(1), int8], %v11_conv_2_scale: Tensor[(24), float32], %v11_qadd_zero_x1: Tensor[(1), int8], %v11_qadd_zero_x2: Tensor[(1), int8], %v11_qadd_scale_x1: Tensor[(1), float32], %v11_qadd_scale_x2: Tensor[(1), float32], %v11_qadd_zero_y: Tensor[(1), int8], %v11_qadd_scale_y: Tensor[(1), float32], %v12_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v12_conv_0_bias: Tensor[(144), int32], %v12_conv_0_zero_x: Tensor[(1), int8], %v12_conv_0_zero_y: Tensor[(1), int8], %v12_conv_0_scale: Tensor[(144), float32], %v12_conv_1_weight: Tensor[(144, 1, 5, 5), int8], %v12_conv_1_bias: Tensor[(144), int32], %v12_conv_1_zero_x: Tensor[(1), int8], %v12_conv_1_zero_y: Tensor[(1), int8], %v12_conv_1_scale: Tensor[(144), float32], %v12_conv_2_weight: Tensor[(32, 144, 1, 1), int8], %v12_conv_2_bias: Tensor[(32), int32], %v12_conv_2_zero_x: Tensor[(1), int8], %v12_conv_2_zero_y: Tensor[(1), int8], %v12_conv_2_scale: Tensor[(32), float32], %v13_conv_0_weight: Tensor[(96, 32, 1, 1), int8], %v13_conv_0_bias: Tensor[(96), int32], %v13_conv_0_zero_x: Tensor[(1), int8], %v13_conv_0_zero_y: Tensor[(1), int8], %v13_conv_0_scale: Tensor[(96), float32], %v13_conv_1_weight: Tensor[(96, 1, 5, 5), int8], %v13_conv_1_bias: Tensor[(96), int32], %v13_conv_1_zero_x: Tensor[(1), int8], %v13_conv_1_zero_y: Tensor[(1), int8], %v13_conv_1_scale: Tensor[(96), float32], %v13_conv_2_weight: Tensor[(32, 96, 1, 1), int8], %v13_conv_2_bias: Tensor[(32), int32], %v13_conv_2_zero_x: Tensor[(1), int8], %v13_conv_2_zero_y: Tensor[(1), int8], %v13_conv_2_scale: Tensor[(32), float32], %v13_qadd_zero_x1: Tensor[(1), int8], %v13_qadd_zero_x2: Tensor[(1), int8], %v13_qadd_scale_x1: Tensor[(1), float32], %v13_qadd_scale_x2: Tensor[(1), float32], %v13_qadd_zero_y: Tensor[(1), int8], %v13_qadd_scale_y: Tensor[(1), float32], %v14_conv_0_weight: Tensor[(96, 32, 1, 1), int8], %v14_conv_0_bias: Tensor[(96), int32], %v14_conv_0_zero_x: Tensor[(1), int8], %v14_conv_0_zero_y: Tensor[(1), int8], %v14_conv_0_scale: Tensor[(96), float32], %v14_conv_1_weight: Tensor[(96, 1, 5, 5), int8], %v14_conv_1_bias: Tensor[(96), int32], %v14_conv_1_zero_x: Tensor[(1), int8], %v14_conv_1_zero_y: Tensor[(1), int8], %v14_conv_1_scale: Tensor[(96), float32], %v14_conv_2_weight: Tensor[(32, 96, 1, 1), int8], %v14_conv_2_bias: Tensor[(32), int32], %v14_conv_2_zero_x: Tensor[(1), int8], %v14_conv_2_zero_y: Tensor[(1), int8], %v14_conv_2_scale: Tensor[(32), float32], %v14_qadd_zero_x1: Tensor[(1), int8], %v14_qadd_zero_x2: Tensor[(1), int8], %v14_qadd_scale_x1: Tensor[(1), float32], %v14_qadd_scale_x2: Tensor[(1), float32], %v14_qadd_zero_y: Tensor[(1), int8], %v14_qadd_scale_y: Tensor[(1), float32], %v15_conv_0_weight: Tensor[(96, 32, 1, 1), int8], %v15_conv_0_bias: Tensor[(96), int32], %v15_conv_0_zero_x: Tensor[(1), int8], %v15_conv_0_zero_y: Tensor[(1), int8], %v15_conv_0_scale: Tensor[(96), float32], %v15_conv_1_weight: Tensor[(96, 1, 5, 5), int8], %v15_conv_1_bias: Tensor[(96), int32], %v15_conv_1_zero_x: Tensor[(1), int8], %v15_conv_1_zero_y: Tensor[(1), int8], %v15_conv_1_scale: Tensor[(96), float32], %v15_conv_2_weight: Tensor[(32, 96, 1, 1), int8], %v15_conv_2_bias: Tensor[(32), int32], %v15_conv_2_zero_x: Tensor[(1), int8], %v15_conv_2_zero_y: Tensor[(1), int8], %v15_conv_2_scale: Tensor[(32), float32], %v15_qadd_zero_x1: Tensor[(1), int8], %v15_qadd_zero_x2: Tensor[(1), int8], %v15_qadd_scale_x1: Tensor[(1), float32], %v15_qadd_scale_x2: Tensor[(1), float32], %v15_qadd_zero_y: Tensor[(1), int8], %v15_qadd_scale_y: Tensor[(1), float32], %v16_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v16_conv_0_bias: Tensor[(192), int32], %v16_conv_0_zero_x: Tensor[(1), int8], %v16_conv_0_zero_y: Tensor[(1), int8], %v16_conv_0_scale: Tensor[(192), float32], %v16_conv_1_weight: Tensor[(192, 1, 7, 7), int8], %v16_conv_1_bias: Tensor[(192), int32], %v16_conv_1_zero_x: Tensor[(1), int8], %v16_conv_1_zero_y: Tensor[(1), int8], %v16_conv_1_scale: Tensor[(192), float32], %v16_conv_2_weight: Tensor[(64, 192, 1, 1), int8], %v16_conv_2_bias: Tensor[(64), int32], %v16_conv_2_zero_x: Tensor[(1), int8], %v16_conv_2_zero_y: Tensor[(1), int8], %v16_conv_2_scale: Tensor[(64), float32], %v17_conv_0_weight: Tensor[(384, 64, 1, 1), int8], %v17_conv_0_bias: Tensor[(384), int32], %v17_conv_0_zero_x: Tensor[(1), int8], %v17_conv_0_zero_y: Tensor[(1), int8], %v17_conv_0_scale: Tensor[(384), float32], %v17_conv_1_weight: Tensor[(384, 1, 7, 7), int8], %v17_conv_1_bias: Tensor[(384), int32], %v17_conv_1_zero_x: Tensor[(1), int8], %v17_conv_1_zero_y: Tensor[(1), int8], %v17_conv_1_scale: Tensor[(384), float32], %v17_conv_2_weight: Tensor[(64, 384, 1, 1), int8], %v17_conv_2_bias: Tensor[(64), int32], %v17_conv_2_zero_x: Tensor[(1), int8], %v17_conv_2_zero_y: Tensor[(1), int8], %v17_conv_2_scale: Tensor[(64), float32], %v17_qadd_zero_x1: Tensor[(1), int8], %v17_qadd_zero_x2: Tensor[(1), int8], %v17_qadd_scale_x1: Tensor[(1), float32], %v17_qadd_scale_x2: Tensor[(1), float32], %v17_qadd_zero_y: Tensor[(1), int8], %v17_qadd_scale_y: Tensor[(1), float32], %v18_conv_0_weight: Tensor[(192, 64, 1, 1), int8], %v18_conv_0_bias: Tensor[(192), int32], %v18_conv_0_zero_x: Tensor[(1), int8], %v18_conv_0_zero_y: Tensor[(1), int8], %v18_conv_0_scale: Tensor[(192), float32], %v18_conv_1_weight: Tensor[(192, 1, 7, 7), int8], %v18_conv_1_bias: Tensor[(192), int32], %v18_conv_1_zero_x: Tensor[(1), int8], %v18_conv_1_zero_y: Tensor[(1), int8], %v18_conv_1_scale: Tensor[(192), float32], %v18_conv_2_weight: Tensor[(64, 192, 1, 1), int8], %v18_conv_2_bias: Tensor[(64), int32], %v18_conv_2_zero_x: Tensor[(1), int8], %v18_conv_2_zero_y: Tensor[(1), int8], %v18_conv_2_scale: Tensor[(64), float32], %v18_qadd_zero_x1: Tensor[(1), int8], %v18_qadd_zero_x2: Tensor[(1), int8], %v18_qadd_scale_x1: Tensor[(1), float32], %v18_qadd_scale_x2: Tensor[(1), float32], %v18_qadd_zero_y: Tensor[(1), int8], %v18_qadd_scale_y: Tensor[(1), float32], %v19_conv_0_weight: Tensor[(192, 64, 1, 1), int8], %v19_conv_0_bias: Tensor[(192), int32], %v19_conv_0_zero_x: Tensor[(1), int8], %v19_conv_0_zero_y: Tensor[(1), int8], %v19_conv_0_scale: Tensor[(192), float32], %v19_conv_1_weight: Tensor[(192, 1, 7, 7), int8], %v19_conv_1_bias: Tensor[(192), int32], %v19_conv_1_zero_x: Tensor[(1), int8], %v19_conv_1_zero_y: Tensor[(1), int8], %v19_conv_1_scale: Tensor[(192), float32], %v19_conv_2_weight: Tensor[(64, 192, 1, 1), int8], %v19_conv_2_bias: Tensor[(64), int32], %v19_conv_2_zero_x: Tensor[(1), int8], %v19_conv_2_zero_y: Tensor[(1), int8], %v19_conv_2_scale: Tensor[(64), float32], %v19_qadd_zero_x1: Tensor[(1), int8], %v19_qadd_zero_x2: Tensor[(1), int8], %v19_qadd_scale_x1: Tensor[(1), float32], %v19_qadd_scale_x2: Tensor[(1), float32], %v19_qadd_zero_y: Tensor[(1), int8], %v19_qadd_scale_y: Tensor[(1), float32], %v20_conv_0_weight: Tensor[(384, 64, 1, 1), int8], %v20_conv_0_bias: Tensor[(384), int32], %v20_conv_0_zero_x: Tensor[(1), int8], %v20_conv_0_zero_y: Tensor[(1), int8], %v20_conv_0_scale: Tensor[(384), float32], %v20_conv_1_weight: Tensor[(384, 1, 7, 7), int8], %v20_conv_1_bias: Tensor[(384), int32], %v20_conv_1_zero_x: Tensor[(1), int8], %v20_conv_1_zero_y: Tensor[(1), int8], %v20_conv_1_scale: Tensor[(384), float32], %v20_conv_2_weight: Tensor[(96, 384, 1, 1), int8], %v20_conv_2_bias: Tensor[(96), int32], %v20_conv_2_zero_x: Tensor[(1), int8], %v20_conv_2_zero_y: Tensor[(1), int8], %v20_conv_2_scale: Tensor[(96), float32], %v21_weight: Tensor[(10, 96, 1, 1), int8], %v21_bias: Tensor[(10), int32], %v21_zero_x: Tensor[(1), int8], %v21_zero_y: Tensor[(1), int8], %v21_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), float32], Tensor[(10, 96, 1, 1), float32], Tensor[(96), float32], Tensor[(96, 384, 1, 1), float32], Tensor[(384), float32], Tensor[(384, 1, 7, 7), float32], Tensor[(384), float32], Tensor[(384, 64, 1, 1), float32], Tensor[(64), float32], Tensor[(64, 192, 1, 1), float32], Tensor[(192), float32], Tensor[(192, 1, 7, 7), float32], Tensor[(192), float32], Tensor[(192, 64, 1, 1), float32], Tensor[(64), float32], Tensor[(64, 192, 1, 1), float32], Tensor[(192), float32], Tensor[(192, 1, 7, 7), float32], Tensor[(192), float32], Tensor[(192, 64, 1, 1), float32], Tensor[(64), float32], Tensor[(64, 384, 1, 1), float32], Tensor[(384), float32], Tensor[(384, 1, 7, 7), float32], Tensor[(384), float32], Tensor[(384, 64, 1, 1), float32], Tensor[(64), float32], Tensor[(64, 192, 1, 1), float32], Tensor[(192), float32], Tensor[(192, 1, 7, 7), float32], Tensor[(192), float32], Tensor[(192, 32, 1, 1), float32], Tensor[(32), float32], Tensor[(32, 96, 1, 1), float32], Tensor[(96), float32], Tensor[(96, 1, 5, 5), float32], Tensor[(96), float32], Tensor[(96, 32, 1, 1), float32], Tensor[(32), float32], Tensor[(32, 96, 1, 1), float32], Tensor[(96), float32], Tensor[(96, 1, 5, 5), float32], Tensor[(96), float32], Tensor[(96, 32, 1, 1), float32], Tensor[(32), float32], Tensor[(32, 96, 1, 1), float32], Tensor[(96), float32], Tensor[(96, 1, 5, 5), float32], Tensor[(96), float32], Tensor[(96, 32, 1, 1), float32], Tensor[(32), float32], Tensor[(32, 144, 1, 1), float32], Tensor[(144), float32], Tensor[(144, 1, 5, 5), float32], Tensor[(144), float32], Tensor[(144, 24, 1, 1), float32], Tensor[(24), float32], Tensor[(24, 72, 1, 1), float32], Tensor[(72), float32], Tensor[(72, 1, 5, 5), float32], Tensor[(72), float32], Tensor[(72, 24, 1, 1), float32], Tensor[(24), float32], Tensor[(24, 72, 1, 1), float32], Tensor[(72), float32], Tensor[(72, 1, 5, 5), float32], Tensor[(72), float32], Tensor[(72, 24, 1, 1), float32], Tensor[(24), float32], Tensor[(24, 72, 1, 1), float32], Tensor[(72), float32], Tensor[(72, 1, 5, 5), float32], Tensor[(72), float32], Tensor[(72, 24, 1, 1), float32], Tensor[(24), float32], Tensor[(24, 96, 1, 1), float32], Tensor[(96), float32], Tensor[(96, 1, 7, 7), float32], Tensor[(96), float32], Tensor[(96, 16, 1, 1), float32], Tensor[(16), float32], Tensor[(16, 48, 1, 1), float32], Tensor[(48), float32], Tensor[(48, 1, 5, 5), float32], Tensor[(48), float32], Tensor[(48, 16, 1, 1), float32], Tensor[(16), float32], Tensor[(16, 48, 1, 1), float32], Tensor[(48), float32], Tensor[(48, 1, 5, 5), float32], Tensor[(48), float32], Tensor[(48, 16, 1, 1), float32], Tensor[(16), float32], Tensor[(16, 48, 1, 1), float32], Tensor[(48), float32], Tensor[(48, 1, 3, 3), float32], Tensor[(48), float32], Tensor[(48, 16, 1, 1), float32], Tensor[(16), float32], Tensor[(16, 48, 1, 1), float32], Tensor[(48), float32], Tensor[(48, 1, 7, 7), float32], Tensor[(48), float32], Tensor[(48, 16, 1, 1), float32], Tensor[(16), float32], Tensor[(16, 48, 1, 1), float32], Tensor[(48), float32], Tensor[(48, 1, 3, 3), float32], Tensor[(48), float32], Tensor[(48, 16, 1, 1), float32], Tensor[(16), float32], Tensor[(16, 24, 1, 1), float32], Tensor[(24), float32], Tensor[(24, 1, 5, 5), float32], Tensor[(24), float32], Tensor[(24, 8, 1, 1), float32], Tensor[(8), float32], Tensor[(8, 16, 1, 1), float32], Tensor[(16), float32], Tensor[(16, 1, 3, 3), float32], Tensor[(16), float32], Tensor[(16, 3, 3, 3), float32]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1 = nn.mcutruncate(%0) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[1, 1, 1, 1], groups=16) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %3 = nn.mcutruncate(%2) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %5 = nn.mcutruncate(%4) /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 64, 64), int32] */;
  %7 = nn.mcutruncate(%6) /* ty=Tensor[(1, 24, 64, 64), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, strides=[2, 2], padding=[2, 2, 2, 2], groups=24) /* ty=Tensor[(1, 24, 32, 32), int32] */;
  %9 = nn.mcutruncate(%8) /* ty=Tensor[(1, 24, 32, 32), int8] */;
  %10 = nn.mcuconv2d(%9, %v2_conv_2_weight, %v2_conv_2_bias, %v2_conv_2_zero_x, %v2_conv_2_zero_y, %v2_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %11 = nn.mcutruncate(%10) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %13 = nn.mcutruncate(%12) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %14 = nn.mcuconv2d(%13, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %15 = nn.mcutruncate(%14) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %16 = nn.mcuconv2d(%15, %v3_conv_2_weight, %v3_conv_2_bias, %v3_conv_2_zero_x, %v3_conv_2_zero_y, %v3_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %17 = nn.mcutruncate(%16) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %18 = nn.mcuadd(%11, %17, %v3_qadd_zero_x1, %v3_qadd_zero_x2, %v3_qadd_scale_x1, %v3_qadd_scale_x2, %v3_qadd_zero_y, %v3_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %19 = nn.mcutruncate(%18) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %20 = nn.mcuconv2d(%19, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %21 = nn.mcutruncate(%20) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %22 = nn.mcuconv2d(%21, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %23 = nn.mcutruncate(%22) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %24 = nn.mcuconv2d(%23, %v4_conv_2_weight, %v4_conv_2_bias, %v4_conv_2_zero_x, %v4_conv_2_zero_y, %v4_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %25 = nn.mcutruncate(%24) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %26 = nn.mcuconv2d(%25, %v5_conv_0_weight, %v5_conv_0_bias, %v5_conv_0_zero_x, %v5_conv_0_zero_y, %v5_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %27 = nn.mcutruncate(%26) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %28 = nn.mcuconv2d(%27, %v5_conv_1_weight, %v5_conv_1_bias, %v5_conv_1_zero_x, %v5_conv_1_zero_y, %v5_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %29 = nn.mcutruncate(%28) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %30 = nn.mcuconv2d(%29, %v5_conv_2_weight, %v5_conv_2_bias, %v5_conv_2_zero_x, %v5_conv_2_zero_y, %v5_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %31 = nn.mcutruncate(%30) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %32 = nn.mcuadd(%25, %31, %v5_qadd_zero_x1, %v5_qadd_zero_x2, %v5_qadd_scale_x1, %v5_qadd_scale_x2, %v5_qadd_zero_y, %v5_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %33 = nn.mcutruncate(%32) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %34 = nn.mcuconv2d(%33, %v6_conv_0_weight, %v6_conv_0_bias, %v6_conv_0_zero_x, %v6_conv_0_zero_y, %v6_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %35 = nn.mcutruncate(%34) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %36 = nn.mcuconv2d(%35, %v6_conv_1_weight, %v6_conv_1_bias, %v6_conv_1_zero_x, %v6_conv_1_zero_y, %v6_conv_1_scale, padding=[2, 2, 2, 2], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %37 = nn.mcutruncate(%36) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %38 = nn.mcuconv2d(%37, %v6_conv_2_weight, %v6_conv_2_bias, %v6_conv_2_zero_x, %v6_conv_2_zero_y, %v6_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %39 = nn.mcutruncate(%38) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %40 = nn.mcuadd(%33, %39, %v6_qadd_zero_x1, %v6_qadd_zero_x2, %v6_qadd_scale_x1, %v6_qadd_scale_x2, %v6_qadd_zero_y, %v6_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %41 = nn.mcutruncate(%40) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %42 = nn.mcuconv2d(%41, %v7_conv_0_weight, %v7_conv_0_bias, %v7_conv_0_zero_x, %v7_conv_0_zero_y, %v7_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %43 = nn.mcutruncate(%42) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %44 = nn.mcuconv2d(%43, %v7_conv_1_weight, %v7_conv_1_bias, %v7_conv_1_zero_x, %v7_conv_1_zero_y, %v7_conv_1_scale, padding=[2, 2, 2, 2], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %45 = nn.mcutruncate(%44) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %46 = nn.mcuconv2d(%45, %v7_conv_2_weight, %v7_conv_2_bias, %v7_conv_2_zero_x, %v7_conv_2_zero_y, %v7_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %47 = nn.mcutruncate(%46) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %48 = nn.mcuadd(%41, %47, %v7_qadd_zero_x1, %v7_qadd_zero_x2, %v7_qadd_scale_x1, %v7_qadd_scale_x2, %v7_qadd_zero_y, %v7_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %49 = nn.mcutruncate(%48) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %50 = nn.mcuconv2d(%49, %v8_conv_0_weight, %v8_conv_0_bias, %v8_conv_0_zero_x, %v8_conv_0_zero_y, %v8_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %51 = nn.mcutruncate(%50) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %52 = nn.mcuconv2d(%51, %v8_conv_1_weight, %v8_conv_1_bias, %v8_conv_1_zero_x, %v8_conv_1_zero_y, %v8_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %53 = nn.mcutruncate(%52) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %54 = nn.mcuconv2d(%53, %v8_conv_2_weight, %v8_conv_2_bias, %v8_conv_2_zero_x, %v8_conv_2_zero_y, %v8_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %55 = nn.mcutruncate(%54) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %56 = nn.mcuconv2d(%55, %v9_conv_0_weight, %v9_conv_0_bias, %v9_conv_0_zero_x, %v9_conv_0_zero_y, %v9_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %57 = nn.mcutruncate(%56) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %58 = nn.mcuconv2d(%57, %v9_conv_1_weight, %v9_conv_1_bias, %v9_conv_1_zero_x, %v9_conv_1_zero_y, %v9_conv_1_scale, padding=[2, 2, 2, 2], groups=72) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %59 = nn.mcutruncate(%58) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %60 = nn.mcuconv2d(%59, %v9_conv_2_weight, %v9_conv_2_bias, %v9_conv_2_zero_x, %v9_conv_2_zero_y, %v9_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %61 = nn.mcutruncate(%60) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %62 = nn.mcuadd(%55, %61, %v9_qadd_zero_x1, %v9_qadd_zero_x2, %v9_qadd_scale_x1, %v9_qadd_scale_x2, %v9_qadd_zero_y, %v9_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %63 = nn.mcutruncate(%62) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %64 = nn.mcuconv2d(%63, %v10_conv_0_weight, %v10_conv_0_bias, %v10_conv_0_zero_x, %v10_conv_0_zero_y, %v10_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %65 = nn.mcutruncate(%64) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %66 = nn.mcuconv2d(%65, %v10_conv_1_weight, %v10_conv_1_bias, %v10_conv_1_zero_x, %v10_conv_1_zero_y, %v10_conv_1_scale, padding=[2, 2, 2, 2], groups=72) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %67 = nn.mcutruncate(%66) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %68 = nn.mcuconv2d(%67, %v10_conv_2_weight, %v10_conv_2_bias, %v10_conv_2_zero_x, %v10_conv_2_zero_y, %v10_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %69 = nn.mcutruncate(%68) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %70 = nn.mcuadd(%63, %69, %v10_qadd_zero_x1, %v10_qadd_zero_x2, %v10_qadd_scale_x1, %v10_qadd_scale_x2, %v10_qadd_zero_y, %v10_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %71 = nn.mcutruncate(%70) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %72 = nn.mcuconv2d(%71, %v11_conv_0_weight, %v11_conv_0_bias, %v11_conv_0_zero_x, %v11_conv_0_zero_y, %v11_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %73 = nn.mcutruncate(%72) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %74 = nn.mcuconv2d(%73, %v11_conv_1_weight, %v11_conv_1_bias, %v11_conv_1_zero_x, %v11_conv_1_zero_y, %v11_conv_1_scale, padding=[2, 2, 2, 2], groups=72) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %75 = nn.mcutruncate(%74) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %76 = nn.mcuconv2d(%75, %v11_conv_2_weight, %v11_conv_2_bias, %v11_conv_2_zero_x, %v11_conv_2_zero_y, %v11_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %77 = nn.mcutruncate(%76) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %78 = nn.mcuadd(%71, %77, %v11_qadd_zero_x1, %v11_qadd_zero_x2, %v11_qadd_scale_x1, %v11_qadd_scale_x2, %v11_qadd_zero_y, %v11_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %79 = nn.mcutruncate(%78) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %80 = nn.mcuconv2d(%79, %v12_conv_0_weight, %v12_conv_0_bias, %v12_conv_0_zero_x, %v12_conv_0_zero_y, %v12_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %81 = nn.mcutruncate(%80) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %82 = nn.mcuconv2d(%81, %v12_conv_1_weight, %v12_conv_1_bias, %v12_conv_1_zero_x, %v12_conv_1_zero_y, %v12_conv_1_scale, padding=[2, 2, 2, 2], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %83 = nn.mcutruncate(%82) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %84 = nn.mcuconv2d(%83, %v12_conv_2_weight, %v12_conv_2_bias, %v12_conv_2_zero_x, %v12_conv_2_zero_y, %v12_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %85 = nn.mcutruncate(%84) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %86 = nn.mcuconv2d(%85, %v13_conv_0_weight, %v13_conv_0_bias, %v13_conv_0_zero_x, %v13_conv_0_zero_y, %v13_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %87 = nn.mcutruncate(%86) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %88 = nn.mcuconv2d(%87, %v13_conv_1_weight, %v13_conv_1_bias, %v13_conv_1_zero_x, %v13_conv_1_zero_y, %v13_conv_1_scale, padding=[2, 2, 2, 2], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %89 = nn.mcutruncate(%88) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %90 = nn.mcuconv2d(%89, %v13_conv_2_weight, %v13_conv_2_bias, %v13_conv_2_zero_x, %v13_conv_2_zero_y, %v13_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %91 = nn.mcutruncate(%90) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %92 = nn.mcuadd(%85, %91, %v13_qadd_zero_x1, %v13_qadd_zero_x2, %v13_qadd_scale_x1, %v13_qadd_scale_x2, %v13_qadd_zero_y, %v13_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %93 = nn.mcutruncate(%92) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %94 = nn.mcuconv2d(%93, %v14_conv_0_weight, %v14_conv_0_bias, %v14_conv_0_zero_x, %v14_conv_0_zero_y, %v14_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %95 = nn.mcutruncate(%94) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %96 = nn.mcuconv2d(%95, %v14_conv_1_weight, %v14_conv_1_bias, %v14_conv_1_zero_x, %v14_conv_1_zero_y, %v14_conv_1_scale, padding=[2, 2, 2, 2], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %97 = nn.mcutruncate(%96) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %98 = nn.mcuconv2d(%97, %v14_conv_2_weight, %v14_conv_2_bias, %v14_conv_2_zero_x, %v14_conv_2_zero_y, %v14_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %99 = nn.mcutruncate(%98) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %100 = nn.mcuadd(%93, %99, %v14_qadd_zero_x1, %v14_qadd_zero_x2, %v14_qadd_scale_x1, %v14_qadd_scale_x2, %v14_qadd_zero_y, %v14_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %101 = nn.mcutruncate(%100) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %102 = nn.mcuconv2d(%101, %v15_conv_0_weight, %v15_conv_0_bias, %v15_conv_0_zero_x, %v15_conv_0_zero_y, %v15_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %103 = nn.mcutruncate(%102) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %104 = nn.mcuconv2d(%103, %v15_conv_1_weight, %v15_conv_1_bias, %v15_conv_1_zero_x, %v15_conv_1_zero_y, %v15_conv_1_scale, padding=[2, 2, 2, 2], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %105 = nn.mcutruncate(%104) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %106 = nn.mcuconv2d(%105, %v15_conv_2_weight, %v15_conv_2_bias, %v15_conv_2_zero_x, %v15_conv_2_zero_y, %v15_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %107 = nn.mcutruncate(%106) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %108 = nn.mcuadd(%101, %107, %v15_qadd_zero_x1, %v15_qadd_zero_x2, %v15_qadd_scale_x1, %v15_qadd_scale_x2, %v15_qadd_zero_y, %v15_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %109 = nn.mcutruncate(%108) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %110 = nn.mcuconv2d(%109, %v16_conv_0_weight, %v16_conv_0_bias, %v16_conv_0_zero_x, %v16_conv_0_zero_y, %v16_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %111 = nn.mcutruncate(%110) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %112 = nn.mcuconv2d(%111, %v16_conv_1_weight, %v16_conv_1_bias, %v16_conv_1_zero_x, %v16_conv_1_zero_y, %v16_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=192) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %113 = nn.mcutruncate(%112) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %114 = nn.mcuconv2d(%113, %v16_conv_2_weight, %v16_conv_2_bias, %v16_conv_2_zero_x, %v16_conv_2_zero_y, %v16_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %115 = nn.mcutruncate(%114) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %116 = nn.mcuconv2d(%115, %v17_conv_0_weight, %v17_conv_0_bias, %v17_conv_0_zero_x, %v17_conv_0_zero_y, %v17_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %117 = nn.mcutruncate(%116) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %118 = nn.mcuconv2d(%117, %v17_conv_1_weight, %v17_conv_1_bias, %v17_conv_1_zero_x, %v17_conv_1_zero_y, %v17_conv_1_scale, padding=[3, 3, 3, 3], groups=384) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %119 = nn.mcutruncate(%118) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %120 = nn.mcuconv2d(%119, %v17_conv_2_weight, %v17_conv_2_bias, %v17_conv_2_zero_x, %v17_conv_2_zero_y, %v17_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %121 = nn.mcutruncate(%120) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %122 = nn.mcuadd(%115, %121, %v17_qadd_zero_x1, %v17_qadd_zero_x2, %v17_qadd_scale_x1, %v17_qadd_scale_x2, %v17_qadd_zero_y, %v17_qadd_scale_y, axis=0) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %123 = nn.mcutruncate(%122) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %124 = nn.mcuconv2d(%123, %v18_conv_0_weight, %v18_conv_0_bias, %v18_conv_0_zero_x, %v18_conv_0_zero_y, %v18_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %125 = nn.mcutruncate(%124) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %126 = nn.mcuconv2d(%125, %v18_conv_1_weight, %v18_conv_1_bias, %v18_conv_1_zero_x, %v18_conv_1_zero_y, %v18_conv_1_scale, padding=[3, 3, 3, 3], groups=192) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %127 = nn.mcutruncate(%126) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %128 = nn.mcuconv2d(%127, %v18_conv_2_weight, %v18_conv_2_bias, %v18_conv_2_zero_x, %v18_conv_2_zero_y, %v18_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %129 = nn.mcutruncate(%128) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %130 = nn.mcuadd(%123, %129, %v18_qadd_zero_x1, %v18_qadd_zero_x2, %v18_qadd_scale_x1, %v18_qadd_scale_x2, %v18_qadd_zero_y, %v18_qadd_scale_y, axis=0) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %131 = nn.mcutruncate(%130) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %132 = nn.mcuconv2d(%131, %v19_conv_0_weight, %v19_conv_0_bias, %v19_conv_0_zero_x, %v19_conv_0_zero_y, %v19_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %133 = nn.mcutruncate(%132) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %134 = nn.mcuconv2d(%133, %v19_conv_1_weight, %v19_conv_1_bias, %v19_conv_1_zero_x, %v19_conv_1_zero_y, %v19_conv_1_scale, padding=[3, 3, 3, 3], groups=192) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %135 = nn.mcutruncate(%134) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %136 = nn.mcuconv2d(%135, %v19_conv_2_weight, %v19_conv_2_bias, %v19_conv_2_zero_x, %v19_conv_2_zero_y, %v19_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %137 = nn.mcutruncate(%136) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %138 = nn.mcuadd(%131, %137, %v19_qadd_zero_x1, %v19_qadd_zero_x2, %v19_qadd_scale_x1, %v19_qadd_scale_x2, %v19_qadd_zero_y, %v19_qadd_scale_y, axis=0) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %139 = nn.mcutruncate(%138) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %140 = nn.mcuconv2d(%139, %v20_conv_0_weight, %v20_conv_0_bias, %v20_conv_0_zero_x, %v20_conv_0_zero_y, %v20_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %141 = nn.mcutruncate(%140) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %142 = nn.mcuconv2d(%141, %v20_conv_1_weight, %v20_conv_1_bias, %v20_conv_1_zero_x, %v20_conv_1_zero_y, %v20_conv_1_scale, padding=[3, 3, 3, 3], groups=384) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %143 = nn.mcutruncate(%142) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %144 = nn.mcuconv2d(%143, %v20_conv_2_weight, %v20_conv_2_bias, %v20_conv_2_zero_x, %v20_conv_2_zero_y, %v20_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %145 = nn.mcutruncate(%144) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %146 = mcumean(%145, axis=[2, 3], keepdims=True) /* ty=Tensor[(1, 96, 1, 1), int8] */;
  %147 = nn.mcuconv2d(%146, %v21_weight, %v21_bias, %v21_zero_x, %v21_zero_y, %v21_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %148 = nn.mcutruncate(%147) /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %149 = reshape(%148, newshape=[0, 0]) /* ty=Tensor[(1, 10), int8] */;
  %150 = cast(%149, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %151 = nn.log_softmax(%150) /* ty=Tensor[(1, 10), float32] */;
  %152 = cast(%147, dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %153 = greater_equal(%152, -128f /* ty=float32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %154 = less_equal(%152, 127f /* ty=float32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %155 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %156 = negative(%155) /* ty=float32 */;
  %157 = multiply(%156, %label) /* ty=Tensor[(1, 10), float32] */;
  %158 = sum(%157, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %159 = exp(%151) /* ty=Tensor[(1, 10), float32] */;
  %160 = multiply(%158, %159) /* ty=Tensor[(1, 10), float32] */;
  %161 = subtract(%157, %160) /* ty=Tensor[(1, 10), float32] */;
  %162 = multiply(%153, %154) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %163 = reshape(%161, newshape=[1, 10, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %164 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %165 = where(%162, %163, %164) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %166 = reshape(%v21_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %167 = multiply(%165, %166) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %168 = cast(%146, dtype="float32") /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %169 = tile(%167, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 960, 1, 1), float32] */;
  %170 = reshape(%168, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %171 = reshape(%169, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(960, 1, 1, 1), float32] */;
  %172 = nn.conv2d(%170, %171, padding=[0, 0, 0, 0], groups=96) /* ty=Tensor[(1, 960, 1, 1), float32] */;
  %173 = reshape(%172, newshape=[1, 96, 10, 1, 1]) /* ty=Tensor[(1, 96, 10, 1, 1), float32] */;
  %174 = sum(%173, axis=[0]) /* ty=Tensor[(96, 10, 1, 1), float32] */;
  %175 = cast(%144, dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %176 = greater_equal(%175, -128f /* ty=float32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %177 = less_equal(%175, 127f /* ty=float32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %178 = cast(%v21_weight, dtype="float32") /* ty=Tensor[(10, 96, 1, 1), float32] */;
  %179 = nn.conv2d_transpose(%167, %178, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %180 = multiply(%179, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %181 = ones(shape=[1, 96, 4, 4], dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %182 = multiply(%176, %177) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %183 = multiply(%180, %181) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %184 = zeros(shape=[1, 96, 4, 4], dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %185 = where(%182, %183, %184) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %186 = reshape(%v20_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %187 = multiply(%185, %186) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %188 = cast(%143, dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %189 = tile(%187, reps=[1, 384, 1, 1]) /* ty=Tensor[(1, 36864, 4, 4), float32] */;
  %190 = reshape(%188, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %191 = reshape(%189, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(36864, 1, 4, 4), float32] */;
  %192 = nn.conv2d(%190, %191, padding=[0, 0, 0, 0], groups=384) /* ty=Tensor[(1, 36864, 1, 1), float32] */;
  %193 = reshape(%192, newshape=[1, 384, 96, 1, 1]) /* ty=Tensor[(1, 384, 96, 1, 1), float32] */;
  %194 = sum(%193, axis=[0]) /* ty=Tensor[(384, 96, 1, 1), float32] */;
  %195 = cast(%142, dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %196 = greater_equal(%195, -128f /* ty=float32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %197 = less_equal(%195, 127f /* ty=float32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %198 = cast(%v20_conv_2_weight, dtype="float32") /* ty=Tensor[(96, 384, 1, 1), float32] */;
  %199 = multiply(%196, %197) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %200 = nn.conv2d_transpose(%187, %198, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %201 = zeros(shape=[1, 384, 4, 4], dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %202 = where(%199, %200, %201) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %203 = reshape(%v20_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %204 = multiply(%202, %203) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %205 = cast(%141, dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %206 = tile(%204, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %207 = reshape(%205, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %208 = reshape(%206, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 4, 4), float32] */;
  %209 = nn.conv2d(%207, %208, padding=[3, 3, 3, 3], groups=384) /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %210 = reshape(%209, newshape=[1, 1, 384, 7, 7]) /* ty=Tensor[(1, 1, 384, 7, 7), float32] */;
  %211 = sum(%210, axis=[0]) /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %212 = cast(%140, dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %213 = greater_equal(%212, -128f /* ty=float32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %214 = less_equal(%212, 127f /* ty=float32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %215 = cast(%v20_conv_1_weight, dtype="float32") /* ty=Tensor[(384, 1, 7, 7), float32] */;
  %216 = multiply(%213, %214) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %217 = nn.conv2d_transpose(%204, %215, channels=384, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %218 = zeros(shape=[1, 384, 4, 4], dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %219 = where(%216, %217, %218) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %220 = reshape(%v20_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %221 = multiply(%219, %220) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %222 = cast(%139, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %223 = tile(%221, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 24576, 4, 4), float32] */;
  %224 = reshape(%222, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %225 = reshape(%223, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 4, 4), float32] */;
  %226 = nn.conv2d(%224, %225, padding=[0, 0, 0, 0], groups=64) /* ty=Tensor[(1, 24576, 1, 1), float32] */;
  %227 = reshape(%226, newshape=[1, 64, 384, 1, 1]) /* ty=Tensor[(1, 64, 384, 1, 1), float32] */;
  %228 = sum(%227, axis=[0]) /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %229 = cast(%136, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %230 = greater_equal(%229, -128f /* ty=float32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %231 = less_equal(%229, 127f /* ty=float32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %232 = cast(%138, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %233 = greater_equal(%232, -128f /* ty=float32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %234 = less_equal(%232, 127f /* ty=float32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %235 = cast(%v20_conv_0_weight, dtype="float32") /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %236 = multiply(%233, %234) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %237 = nn.conv2d_transpose(%221, %235, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %238 = zeros(shape=[1, 64, 4, 4], dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %239 = where(%236, %237, %238) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %240 = reshape(%v19_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %241 = divide(%239, %240) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %242 = reshape(%v19_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %243 = multiply(%230, %231) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %244 = multiply(%241, %242) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %245 = zeros(shape=[1, 64, 4, 4], dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %246 = where(%243, %244, %245) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %247 = reshape(%v19_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %248 = multiply(%246, %247) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %249 = cast(%135, dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %250 = tile(%248, reps=[1, 192, 1, 1]) /* ty=Tensor[(1, 12288, 4, 4), float32] */;
  %251 = reshape(%249, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %252 = reshape(%250, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(12288, 1, 4, 4), float32] */;
  %253 = nn.conv2d(%251, %252, padding=[0, 0, 0, 0], groups=192) /* ty=Tensor[(1, 12288, 1, 1), float32] */;
  %254 = reshape(%253, newshape=[1, 192, 64, 1, 1]) /* ty=Tensor[(1, 192, 64, 1, 1), float32] */;
  %255 = sum(%254, axis=[0]) /* ty=Tensor[(192, 64, 1, 1), float32] */;
  %256 = cast(%134, dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %257 = greater_equal(%256, -128f /* ty=float32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %258 = less_equal(%256, 127f /* ty=float32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %259 = cast(%v19_conv_2_weight, dtype="float32") /* ty=Tensor[(64, 192, 1, 1), float32] */;
  %260 = multiply(%257, %258) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %261 = nn.conv2d_transpose(%248, %259, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %262 = zeros(shape=[1, 192, 4, 4], dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %263 = where(%260, %261, %262) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %264 = reshape(%v19_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %265 = multiply(%263, %264) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %266 = cast(%133, dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %267 = tile(%265, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %268 = reshape(%266, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %269 = reshape(%267, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(192, 1, 4, 4), float32] */;
  %270 = nn.conv2d(%268, %269, padding=[3, 3, 3, 3], groups=192) /* ty=Tensor[(1, 192, 7, 7), float32] */;
  %271 = reshape(%270, newshape=[1, 1, 192, 7, 7]) /* ty=Tensor[(1, 1, 192, 7, 7), float32] */;
  %272 = sum(%271, axis=[0]) /* ty=Tensor[(1, 192, 7, 7), float32] */;
  %273 = cast(%132, dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %274 = greater_equal(%273, -128f /* ty=float32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %275 = less_equal(%273, 127f /* ty=float32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %276 = cast(%v19_conv_1_weight, dtype="float32") /* ty=Tensor[(192, 1, 7, 7), float32] */;
  %277 = multiply(%274, %275) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %278 = nn.conv2d_transpose(%265, %276, channels=192, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %279 = zeros(shape=[1, 192, 4, 4], dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %280 = where(%277, %278, %279) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %281 = reshape(%v19_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %282 = multiply(%280, %281) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %283 = cast(%131, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %284 = tile(%282, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 12288, 4, 4), float32] */;
  %285 = reshape(%283, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %286 = reshape(%284, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(12288, 1, 4, 4), float32] */;
  %287 = nn.conv2d(%285, %286, padding=[0, 0, 0, 0], groups=64) /* ty=Tensor[(1, 12288, 1, 1), float32] */;
  %288 = reshape(%287, newshape=[1, 64, 192, 1, 1]) /* ty=Tensor[(1, 64, 192, 1, 1), float32] */;
  %289 = sum(%288, axis=[0]) /* ty=Tensor[(64, 192, 1, 1), float32] */;
  %290 = cast(%128, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %291 = greater_equal(%290, -128f /* ty=float32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %292 = less_equal(%290, 127f /* ty=float32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %293 = cast(%130, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %294 = greater_equal(%293, -128f /* ty=float32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %295 = less_equal(%293, 127f /* ty=float32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %296 = cast(%v19_conv_0_weight, dtype="float32") /* ty=Tensor[(192, 64, 1, 1), float32] */;
  %297 = multiply(%294, %295) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %298 = nn.conv2d_transpose(%282, %296, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %299 = zeros(shape=[1, 64, 4, 4], dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %300 = where(%297, %298, %299) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %301 = reshape(%v18_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %302 = divide(%300, %301) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %303 = reshape(%v18_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %304 = multiply(%291, %292) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %305 = multiply(%302, %303) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %306 = zeros(shape=[1, 64, 4, 4], dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %307 = where(%304, %305, %306) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %308 = reshape(%v18_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %309 = multiply(%307, %308) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %310 = cast(%127, dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %311 = tile(%309, reps=[1, 192, 1, 1]) /* ty=Tensor[(1, 12288, 4, 4), float32] */;
  %312 = reshape(%310, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %313 = reshape(%311, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(12288, 1, 4, 4), float32] */;
  %314 = nn.conv2d(%312, %313, padding=[0, 0, 0, 0], groups=192) /* ty=Tensor[(1, 12288, 1, 1), float32] */;
  %315 = reshape(%314, newshape=[1, 192, 64, 1, 1]) /* ty=Tensor[(1, 192, 64, 1, 1), float32] */;
  %316 = sum(%315, axis=[0]) /* ty=Tensor[(192, 64, 1, 1), float32] */;
  %317 = cast(%126, dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %318 = greater_equal(%317, -128f /* ty=float32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %319 = less_equal(%317, 127f /* ty=float32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %320 = cast(%v18_conv_2_weight, dtype="float32") /* ty=Tensor[(64, 192, 1, 1), float32] */;
  %321 = multiply(%318, %319) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %322 = nn.conv2d_transpose(%309, %320, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %323 = zeros(shape=[1, 192, 4, 4], dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %324 = where(%321, %322, %323) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %325 = reshape(%v18_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %326 = multiply(%324, %325) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %327 = cast(%125, dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %328 = tile(%326, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %329 = reshape(%327, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %330 = reshape(%328, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(192, 1, 4, 4), float32] */;
  %331 = nn.conv2d(%329, %330, padding=[3, 3, 3, 3], groups=192) /* ty=Tensor[(1, 192, 7, 7), float32] */;
  %332 = reshape(%331, newshape=[1, 1, 192, 7, 7]) /* ty=Tensor[(1, 1, 192, 7, 7), float32] */;
  %333 = sum(%332, axis=[0]) /* ty=Tensor[(1, 192, 7, 7), float32] */;
  %334 = cast(%124, dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %335 = greater_equal(%334, -128f /* ty=float32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %336 = less_equal(%334, 127f /* ty=float32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %337 = cast(%v18_conv_1_weight, dtype="float32") /* ty=Tensor[(192, 1, 7, 7), float32] */;
  %338 = multiply(%335, %336) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %339 = nn.conv2d_transpose(%326, %337, channels=192, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %340 = zeros(shape=[1, 192, 4, 4], dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %341 = where(%338, %339, %340) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %342 = reshape(%v18_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %343 = multiply(%341, %342) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %344 = cast(%123, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %345 = tile(%343, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 12288, 4, 4), float32] */;
  %346 = reshape(%344, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %347 = reshape(%345, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(12288, 1, 4, 4), float32] */;
  %348 = nn.conv2d(%346, %347, padding=[0, 0, 0, 0], groups=64) /* ty=Tensor[(1, 12288, 1, 1), float32] */;
  %349 = reshape(%348, newshape=[1, 64, 192, 1, 1]) /* ty=Tensor[(1, 64, 192, 1, 1), float32] */;
  %350 = sum(%349, axis=[0]) /* ty=Tensor[(64, 192, 1, 1), float32] */;
  %351 = cast(%120, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %352 = greater_equal(%351, -128f /* ty=float32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %353 = less_equal(%351, 127f /* ty=float32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %354 = cast(%122, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %355 = greater_equal(%354, -128f /* ty=float32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %356 = less_equal(%354, 127f /* ty=float32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %357 = cast(%v18_conv_0_weight, dtype="float32") /* ty=Tensor[(192, 64, 1, 1), float32] */;
  %358 = multiply(%355, %356) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %359 = nn.conv2d_transpose(%343, %357, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %360 = zeros(shape=[1, 64, 4, 4], dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %361 = where(%358, %359, %360) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %362 = reshape(%v17_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %363 = divide(%361, %362) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %364 = reshape(%v17_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %365 = multiply(%352, %353) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %366 = multiply(%363, %364) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %367 = zeros(shape=[1, 64, 4, 4], dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %368 = where(%365, %366, %367) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %369 = reshape(%v17_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %370 = multiply(%368, %369) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %371 = cast(%119, dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %372 = tile(%370, reps=[1, 384, 1, 1]) /* ty=Tensor[(1, 24576, 4, 4), float32] */;
  %373 = reshape(%371, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %374 = reshape(%372, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 4, 4), float32] */;
  %375 = nn.conv2d(%373, %374, padding=[0, 0, 0, 0], groups=384) /* ty=Tensor[(1, 24576, 1, 1), float32] */;
  %376 = reshape(%375, newshape=[1, 384, 64, 1, 1]) /* ty=Tensor[(1, 384, 64, 1, 1), float32] */;
  %377 = sum(%376, axis=[0]) /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %378 = cast(%118, dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %379 = greater_equal(%378, -128f /* ty=float32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %380 = less_equal(%378, 127f /* ty=float32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %381 = cast(%v17_conv_2_weight, dtype="float32") /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %382 = multiply(%379, %380) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %383 = nn.conv2d_transpose(%370, %381, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %384 = zeros(shape=[1, 384, 4, 4], dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %385 = where(%382, %383, %384) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %386 = reshape(%v17_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %387 = multiply(%385, %386) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %388 = cast(%117, dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %389 = tile(%387, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %390 = reshape(%388, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %391 = reshape(%389, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 4, 4), float32] */;
  %392 = nn.conv2d(%390, %391, padding=[3, 3, 3, 3], groups=384) /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %393 = reshape(%392, newshape=[1, 1, 384, 7, 7]) /* ty=Tensor[(1, 1, 384, 7, 7), float32] */;
  %394 = sum(%393, axis=[0]) /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %395 = cast(%116, dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %396 = greater_equal(%395, -128f /* ty=float32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %397 = less_equal(%395, 127f /* ty=float32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %398 = cast(%v17_conv_1_weight, dtype="float32") /* ty=Tensor[(384, 1, 7, 7), float32] */;
  %399 = multiply(%396, %397) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %400 = nn.conv2d_transpose(%387, %398, channels=384, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %401 = zeros(shape=[1, 384, 4, 4], dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %402 = where(%399, %400, %401) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %403 = reshape(%v17_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %404 = multiply(%402, %403) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %405 = cast(%115, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %406 = tile(%404, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 24576, 4, 4), float32] */;
  %407 = reshape(%405, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %408 = reshape(%406, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 4, 4), float32] */;
  %409 = nn.conv2d(%407, %408, padding=[0, 0, 0, 0], groups=64) /* ty=Tensor[(1, 24576, 1, 1), float32] */;
  %410 = reshape(%409, newshape=[1, 64, 384, 1, 1]) /* ty=Tensor[(1, 64, 384, 1, 1), float32] */;
  %411 = sum(%410, axis=[0]) /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %412 = cast(%114, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %413 = greater_equal(%412, -128f /* ty=float32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %414 = less_equal(%412, 127f /* ty=float32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %415 = cast(%v17_conv_0_weight, dtype="float32") /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %416 = multiply(%413, %414) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %417 = nn.conv2d_transpose(%404, %415, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %418 = zeros(shape=[1, 64, 4, 4], dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %419 = where(%416, %417, %418) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %420 = reshape(%v16_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %421 = multiply(%419, %420) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %422 = cast(%113, dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %423 = tile(%421, reps=[1, 192, 1, 1]) /* ty=Tensor[(1, 12288, 4, 4), float32] */;
  %424 = reshape(%422, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %425 = reshape(%423, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(12288, 1, 4, 4), float32] */;
  %426 = nn.conv2d(%424, %425, padding=[0, 0, 0, 0], groups=192) /* ty=Tensor[(1, 12288, 1, 1), float32] */;
  %427 = reshape(%426, newshape=[1, 192, 64, 1, 1]) /* ty=Tensor[(1, 192, 64, 1, 1), float32] */;
  %428 = sum(%427, axis=[0]) /* ty=Tensor[(192, 64, 1, 1), float32] */;
  %429 = cast(%112, dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %430 = greater_equal(%429, -128f /* ty=float32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %431 = less_equal(%429, 127f /* ty=float32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %432 = cast(%v16_conv_2_weight, dtype="float32") /* ty=Tensor[(64, 192, 1, 1), float32] */;
  %433 = multiply(%430, %431) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %434 = nn.conv2d_transpose(%421, %432, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %435 = zeros(shape=[1, 192, 4, 4], dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %436 = where(%433, %434, %435) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %437 = reshape(%v16_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %438 = multiply(%436, %437) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %439 = cast(%111, dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %440 = tile(%438, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %441 = reshape(%439, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %442 = reshape(%440, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(192, 1, 4, 4), float32] */;
  %443 = nn.conv2d(%441, %442, padding=[3, 3, 3, 3], dilation=[2, 2], groups=192) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %444 = reshape(%443, newshape=[1, 1, 192, 8, 8]) /* ty=Tensor[(1, 1, 192, 8, 8), float32] */;
  %445 = sum(%444, axis=[0]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %446 = transpose(%445, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 1, 8, 8), float32] */;
  %447 = cast(%110, dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %448 = greater_equal(%447, -128f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %449 = less_equal(%447, 127f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %450 = cast(%v16_conv_1_weight, dtype="float32") /* ty=Tensor[(192, 1, 7, 7), float32] */;
  %451 = multiply(%448, %449) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %452 = nn.conv2d_transpose(%438, %450, channels=192, kernel_size=[7, 7], strides=[2, 2], output_padding=[1, 1], padding=[3, 3, 3, 3], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %453 = zeros(shape=[1, 192, 8, 8], dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %454 = where(%451, %452, %453) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %455 = reshape(%v16_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %456 = multiply(%454, %455) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %457 = cast(%109, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %458 = tile(%456, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 8, 8), float32] */;
  %459 = reshape(%457, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %460 = reshape(%458, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 8, 8), float32] */;
  %461 = nn.conv2d(%459, %460, padding=[0, 0, 0, 0], groups=32) /* ty=Tensor[(1, 6144, 1, 1), float32] */;
  %462 = reshape(%461, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), float32] */;
  %463 = sum(%462, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), float32] */;
  %464 = cast(%106, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %465 = greater_equal(%464, -128f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %466 = less_equal(%464, 127f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %467 = cast(%108, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %468 = greater_equal(%467, -128f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %469 = less_equal(%467, 127f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %470 = cast(%v16_conv_0_weight, dtype="float32") /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %471 = multiply(%468, %469) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %472 = nn.conv2d_transpose(%456, %470, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %473 = zeros(shape=[1, 32, 8, 8], dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %474 = where(%471, %472, %473) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %475 = reshape(%v15_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %476 = divide(%474, %475) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %477 = reshape(%v15_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %478 = multiply(%465, %466) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %479 = multiply(%476, %477) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %480 = zeros(shape=[1, 32, 8, 8], dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %481 = where(%478, %479, %480) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %482 = reshape(%v15_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %483 = multiply(%481, %482) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %484 = cast(%105, dtype="float32") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %485 = tile(%483, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 3072, 8, 8), float32] */;
  %486 = reshape(%484, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %487 = reshape(%485, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3072, 1, 8, 8), float32] */;
  %488 = nn.conv2d(%486, %487, padding=[0, 0, 0, 0], groups=96) /* ty=Tensor[(1, 3072, 1, 1), float32] */;
  %489 = reshape(%488, newshape=[1, 96, 32, 1, 1]) /* ty=Tensor[(1, 96, 32, 1, 1), float32] */;
  %490 = sum(%489, axis=[0]) /* ty=Tensor[(96, 32, 1, 1), float32] */;
  %491 = cast(%104, dtype="float32") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %492 = greater_equal(%491, -128f /* ty=float32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %493 = less_equal(%491, 127f /* ty=float32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %494 = cast(%v15_conv_2_weight, dtype="float32") /* ty=Tensor[(32, 96, 1, 1), float32] */;
  %495 = multiply(%492, %493) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %496 = nn.conv2d_transpose(%483, %494, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %497 = zeros(shape=[1, 96, 8, 8], dtype="float32") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %498 = where(%495, %496, %497) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %499 = reshape(%v15_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %500 = multiply(%498, %499) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %501 = cast(%103, dtype="float32") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %502 = tile(%500, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %503 = reshape(%501, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %504 = reshape(%502, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(96, 1, 8, 8), float32] */;
  %505 = nn.conv2d(%503, %504, padding=[2, 2, 2, 2], groups=96) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %506 = reshape(%505, newshape=[1, 1, 96, 5, 5]) /* ty=Tensor[(1, 1, 96, 5, 5), float32] */;
  %507 = sum(%506, axis=[0]) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %508 = cast(%102, dtype="float32") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %509 = greater_equal(%508, -128f /* ty=float32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %510 = less_equal(%508, 127f /* ty=float32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %511 = cast(%v15_conv_1_weight, dtype="float32") /* ty=Tensor[(96, 1, 5, 5), float32] */;
  %512 = multiply(%509, %510) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %513 = nn.conv2d_transpose(%500, %511, channels=96, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=96, kernel_layout="IOHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %514 = zeros(shape=[1, 96, 8, 8], dtype="float32") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %515 = where(%512, %513, %514) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %516 = reshape(%v15_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %517 = multiply(%515, %516) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %518 = cast(%101, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %519 = tile(%517, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 3072, 8, 8), float32] */;
  %520 = reshape(%518, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %521 = reshape(%519, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3072, 1, 8, 8), float32] */;
  %522 = nn.conv2d(%520, %521, padding=[0, 0, 0, 0], groups=32) /* ty=Tensor[(1, 3072, 1, 1), float32] */;
  %523 = reshape(%522, newshape=[1, 32, 96, 1, 1]) /* ty=Tensor[(1, 32, 96, 1, 1), float32] */;
  %524 = sum(%523, axis=[0]) /* ty=Tensor[(32, 96, 1, 1), float32] */;
  %525 = cast(%98, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %526 = greater_equal(%525, -128f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %527 = less_equal(%525, 127f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %528 = cast(%100, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %529 = greater_equal(%528, -128f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %530 = less_equal(%528, 127f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %531 = cast(%v15_conv_0_weight, dtype="float32") /* ty=Tensor[(96, 32, 1, 1), float32] */;
  %532 = multiply(%529, %530) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %533 = nn.conv2d_transpose(%517, %531, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %534 = zeros(shape=[1, 32, 8, 8], dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %535 = where(%532, %533, %534) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %536 = reshape(%v14_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %537 = divide(%535, %536) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %538 = reshape(%v14_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %539 = multiply(%526, %527) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %540 = multiply(%537, %538) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %541 = zeros(shape=[1, 32, 8, 8], dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %542 = where(%539, %540, %541) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %543 = reshape(%v14_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %544 = multiply(%542, %543) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %545 = cast(%97, dtype="float32") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %546 = tile(%544, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 3072, 8, 8), float32] */;
  %547 = reshape(%545, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %548 = reshape(%546, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3072, 1, 8, 8), float32] */;
  %549 = nn.conv2d(%547, %548, padding=[0, 0, 0, 0], groups=96) /* ty=Tensor[(1, 3072, 1, 1), float32] */;
  %550 = reshape(%549, newshape=[1, 96, 32, 1, 1]) /* ty=Tensor[(1, 96, 32, 1, 1), float32] */;
  %551 = sum(%550, axis=[0]) /* ty=Tensor[(96, 32, 1, 1), float32] */;
  %552 = cast(%96, dtype="float32") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %553 = greater_equal(%552, -128f /* ty=float32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %554 = less_equal(%552, 127f /* ty=float32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %555 = cast(%v14_conv_2_weight, dtype="float32") /* ty=Tensor[(32, 96, 1, 1), float32] */;
  %556 = multiply(%553, %554) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %557 = nn.conv2d_transpose(%544, %555, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %558 = zeros(shape=[1, 96, 8, 8], dtype="float32") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %559 = where(%556, %557, %558) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %560 = reshape(%v14_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %561 = multiply(%559, %560) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %562 = cast(%95, dtype="float32") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %563 = tile(%561, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %564 = reshape(%562, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %565 = reshape(%563, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(96, 1, 8, 8), float32] */;
  %566 = nn.conv2d(%564, %565, padding=[2, 2, 2, 2], groups=96) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %567 = reshape(%566, newshape=[1, 1, 96, 5, 5]) /* ty=Tensor[(1, 1, 96, 5, 5), float32] */;
  %568 = sum(%567, axis=[0]) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %569 = cast(%94, dtype="float32") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %570 = greater_equal(%569, -128f /* ty=float32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %571 = less_equal(%569, 127f /* ty=float32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %572 = cast(%v14_conv_1_weight, dtype="float32") /* ty=Tensor[(96, 1, 5, 5), float32] */;
  %573 = multiply(%570, %571) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %574 = nn.conv2d_transpose(%561, %572, channels=96, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=96, kernel_layout="IOHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %575 = zeros(shape=[1, 96, 8, 8], dtype="float32") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %576 = where(%573, %574, %575) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %577 = reshape(%v14_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %578 = multiply(%576, %577) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %579 = cast(%93, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %580 = tile(%578, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 3072, 8, 8), float32] */;
  %581 = reshape(%579, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %582 = reshape(%580, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3072, 1, 8, 8), float32] */;
  %583 = nn.conv2d(%581, %582, padding=[0, 0, 0, 0], groups=32) /* ty=Tensor[(1, 3072, 1, 1), float32] */;
  %584 = reshape(%583, newshape=[1, 32, 96, 1, 1]) /* ty=Tensor[(1, 32, 96, 1, 1), float32] */;
  %585 = sum(%584, axis=[0]) /* ty=Tensor[(32, 96, 1, 1), float32] */;
  %586 = cast(%90, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %587 = greater_equal(%586, -128f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %588 = less_equal(%586, 127f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %589 = cast(%92, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %590 = greater_equal(%589, -128f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %591 = less_equal(%589, 127f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %592 = cast(%v14_conv_0_weight, dtype="float32") /* ty=Tensor[(96, 32, 1, 1), float32] */;
  %593 = multiply(%590, %591) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %594 = nn.conv2d_transpose(%578, %592, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %595 = zeros(shape=[1, 32, 8, 8], dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %596 = where(%593, %594, %595) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %597 = reshape(%v13_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %598 = divide(%596, %597) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %599 = reshape(%v13_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %600 = multiply(%587, %588) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %601 = multiply(%598, %599) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %602 = zeros(shape=[1, 32, 8, 8], dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %603 = where(%600, %601, %602) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %604 = reshape(%v13_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %605 = multiply(%603, %604) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %606 = cast(%89, dtype="float32") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %607 = tile(%605, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 3072, 8, 8), float32] */;
  %608 = reshape(%606, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %609 = reshape(%607, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3072, 1, 8, 8), float32] */;
  %610 = nn.conv2d(%608, %609, padding=[0, 0, 0, 0], groups=96) /* ty=Tensor[(1, 3072, 1, 1), float32] */;
  %611 = reshape(%610, newshape=[1, 96, 32, 1, 1]) /* ty=Tensor[(1, 96, 32, 1, 1), float32] */;
  %612 = sum(%611, axis=[0]) /* ty=Tensor[(96, 32, 1, 1), float32] */;
  %613 = cast(%88, dtype="float32") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %614 = greater_equal(%613, -128f /* ty=float32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %615 = less_equal(%613, 127f /* ty=float32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %616 = cast(%v13_conv_2_weight, dtype="float32") /* ty=Tensor[(32, 96, 1, 1), float32] */;
  %617 = multiply(%614, %615) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %618 = nn.conv2d_transpose(%605, %616, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %619 = zeros(shape=[1, 96, 8, 8], dtype="float32") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %620 = where(%617, %618, %619) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %621 = reshape(%v13_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %622 = multiply(%620, %621) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %623 = cast(%87, dtype="float32") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %624 = tile(%622, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %625 = reshape(%623, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %626 = reshape(%624, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(96, 1, 8, 8), float32] */;
  %627 = nn.conv2d(%625, %626, padding=[2, 2, 2, 2], groups=96) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %628 = reshape(%627, newshape=[1, 1, 96, 5, 5]) /* ty=Tensor[(1, 1, 96, 5, 5), float32] */;
  %629 = sum(%628, axis=[0]) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %630 = cast(%86, dtype="float32") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %631 = greater_equal(%630, -128f /* ty=float32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %632 = less_equal(%630, 127f /* ty=float32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %633 = cast(%v13_conv_1_weight, dtype="float32") /* ty=Tensor[(96, 1, 5, 5), float32] */;
  %634 = multiply(%631, %632) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %635 = nn.conv2d_transpose(%622, %633, channels=96, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=96, kernel_layout="IOHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %636 = zeros(shape=[1, 96, 8, 8], dtype="float32") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %637 = where(%634, %635, %636) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %638 = reshape(%v13_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %639 = multiply(%637, %638) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %640 = cast(%85, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %641 = tile(%639, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 3072, 8, 8), float32] */;
  %642 = reshape(%640, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %643 = reshape(%641, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3072, 1, 8, 8), float32] */;
  %644 = nn.conv2d(%642, %643, padding=[0, 0, 0, 0], groups=32) /* ty=Tensor[(1, 3072, 1, 1), float32] */;
  %645 = reshape(%644, newshape=[1, 32, 96, 1, 1]) /* ty=Tensor[(1, 32, 96, 1, 1), float32] */;
  %646 = sum(%645, axis=[0]) /* ty=Tensor[(32, 96, 1, 1), float32] */;
  %647 = cast(%84, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %648 = greater_equal(%647, -128f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %649 = less_equal(%647, 127f /* ty=float32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %650 = cast(%v13_conv_0_weight, dtype="float32") /* ty=Tensor[(96, 32, 1, 1), float32] */;
  %651 = multiply(%648, %649) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %652 = nn.conv2d_transpose(%639, %650, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %653 = zeros(shape=[1, 32, 8, 8], dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %654 = where(%651, %652, %653) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %655 = reshape(%v12_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %656 = multiply(%654, %655) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %657 = cast(%83, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %658 = tile(%656, reps=[1, 144, 1, 1]) /* ty=Tensor[(1, 4608, 8, 8), float32] */;
  %659 = reshape(%657, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %660 = reshape(%658, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(4608, 1, 8, 8), float32] */;
  %661 = nn.conv2d(%659, %660, padding=[0, 0, 0, 0], groups=144) /* ty=Tensor[(1, 4608, 1, 1), float32] */;
  %662 = reshape(%661, newshape=[1, 144, 32, 1, 1]) /* ty=Tensor[(1, 144, 32, 1, 1), float32] */;
  %663 = sum(%662, axis=[0]) /* ty=Tensor[(144, 32, 1, 1), float32] */;
  %664 = cast(%82, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %665 = greater_equal(%664, -128f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %666 = less_equal(%664, 127f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %667 = cast(%v12_conv_2_weight, dtype="float32") /* ty=Tensor[(32, 144, 1, 1), float32] */;
  %668 = multiply(%665, %666) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %669 = nn.conv2d_transpose(%656, %667, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %670 = zeros(shape=[1, 144, 8, 8], dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %671 = where(%668, %669, %670) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %672 = reshape(%v12_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 144, 1, 1), float32] */;
  %673 = multiply(%671, %672) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %674 = cast(%81, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %675 = tile(%673, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %676 = reshape(%674, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %677 = reshape(%675, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(144, 1, 8, 8), float32] */;
  %678 = nn.conv2d(%676, %677, padding=[2, 2, 2, 2], groups=144) /* ty=Tensor[(1, 144, 5, 5), float32] */;
  %679 = reshape(%678, newshape=[1, 1, 144, 5, 5]) /* ty=Tensor[(1, 1, 144, 5, 5), float32] */;
  %680 = sum(%679, axis=[0]) /* ty=Tensor[(1, 144, 5, 5), float32] */;
  %681 = cast(%80, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %682 = greater_equal(%681, -128f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %683 = less_equal(%681, 127f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %684 = cast(%v12_conv_1_weight, dtype="float32") /* ty=Tensor[(144, 1, 5, 5), float32] */;
  %685 = multiply(%682, %683) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %686 = nn.conv2d_transpose(%673, %684, channels=144, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=144, kernel_layout="IOHW") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %687 = zeros(shape=[1, 144, 8, 8], dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %688 = where(%685, %686, %687) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %689 = reshape(%v12_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 144, 1, 1), float32] */;
  %690 = multiply(%688, %689) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %691 = cast(%79, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %692 = tile(%690, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 3456, 8, 8), float32] */;
  %693 = reshape(%691, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %694 = reshape(%692, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 8, 8), float32] */;
  %695 = nn.conv2d(%693, %694, padding=[0, 0, 0, 0], groups=24) /* ty=Tensor[(1, 3456, 1, 1), float32] */;
  %696 = reshape(%695, newshape=[1, 24, 144, 1, 1]) /* ty=Tensor[(1, 24, 144, 1, 1), float32] */;
  %697 = sum(%696, axis=[0]) /* ty=Tensor[(24, 144, 1, 1), float32] */;
  %698 = cast(%76, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %699 = greater_equal(%698, -128f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %700 = less_equal(%698, 127f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %701 = cast(%78, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %702 = greater_equal(%701, -128f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %703 = less_equal(%701, 127f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %704 = cast(%v12_conv_0_weight, dtype="float32") /* ty=Tensor[(144, 24, 1, 1), float32] */;
  %705 = multiply(%702, %703) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %706 = nn.conv2d_transpose(%690, %704, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %707 = zeros(shape=[1, 24, 8, 8], dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %708 = where(%705, %706, %707) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %709 = reshape(%v11_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %710 = divide(%708, %709) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %711 = reshape(%v11_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %712 = multiply(%699, %700) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %713 = multiply(%710, %711) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %714 = zeros(shape=[1, 24, 8, 8], dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %715 = where(%712, %713, %714) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %716 = reshape(%v11_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 24, 1, 1), float32] */;
  %717 = multiply(%715, %716) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %718 = cast(%75, dtype="float32") /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %719 = tile(%717, reps=[1, 72, 1, 1]) /* ty=Tensor[(1, 1728, 8, 8), float32] */;
  %720 = reshape(%718, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %721 = reshape(%719, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1728, 1, 8, 8), float32] */;
  %722 = nn.conv2d(%720, %721, padding=[0, 0, 0, 0], groups=72) /* ty=Tensor[(1, 1728, 1, 1), float32] */;
  %723 = reshape(%722, newshape=[1, 72, 24, 1, 1]) /* ty=Tensor[(1, 72, 24, 1, 1), float32] */;
  %724 = sum(%723, axis=[0]) /* ty=Tensor[(72, 24, 1, 1), float32] */;
  %725 = cast(%74, dtype="float32") /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %726 = greater_equal(%725, -128f /* ty=float32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %727 = less_equal(%725, 127f /* ty=float32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %728 = cast(%v11_conv_2_weight, dtype="float32") /* ty=Tensor[(24, 72, 1, 1), float32] */;
  %729 = multiply(%726, %727) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %730 = nn.conv2d_transpose(%717, %728, channels=72, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %731 = zeros(shape=[1, 72, 8, 8], dtype="float32") /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %732 = where(%729, %730, %731) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %733 = reshape(%v11_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 72, 1, 1), float32] */;
  %734 = multiply(%732, %733) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %735 = cast(%73, dtype="float32") /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %736 = tile(%734, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %737 = reshape(%735, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %738 = reshape(%736, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(72, 1, 8, 8), float32] */;
  %739 = nn.conv2d(%737, %738, padding=[2, 2, 2, 2], groups=72) /* ty=Tensor[(1, 72, 5, 5), float32] */;
  %740 = reshape(%739, newshape=[1, 1, 72, 5, 5]) /* ty=Tensor[(1, 1, 72, 5, 5), float32] */;
  %741 = sum(%740, axis=[0]) /* ty=Tensor[(1, 72, 5, 5), float32] */;
  %742 = cast(%72, dtype="float32") /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %743 = greater_equal(%742, -128f /* ty=float32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %744 = less_equal(%742, 127f /* ty=float32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %745 = cast(%v11_conv_1_weight, dtype="float32") /* ty=Tensor[(72, 1, 5, 5), float32] */;
  %746 = multiply(%743, %744) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %747 = nn.conv2d_transpose(%734, %745, channels=72, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=72, kernel_layout="IOHW") /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %748 = zeros(shape=[1, 72, 8, 8], dtype="float32") /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %749 = where(%746, %747, %748) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %750 = reshape(%v11_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 72, 1, 1), float32] */;
  %751 = multiply(%749, %750) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %752 = cast(%71, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %753 = tile(%751, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 1728, 8, 8), float32] */;
  %754 = reshape(%752, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %755 = reshape(%753, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1728, 1, 8, 8), float32] */;
  %756 = nn.conv2d(%754, %755, padding=[0, 0, 0, 0], groups=24) /* ty=Tensor[(1, 1728, 1, 1), float32] */;
  %757 = reshape(%756, newshape=[1, 24, 72, 1, 1]) /* ty=Tensor[(1, 24, 72, 1, 1), float32] */;
  %758 = sum(%757, axis=[0]) /* ty=Tensor[(24, 72, 1, 1), float32] */;
  %759 = cast(%68, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %760 = greater_equal(%759, -128f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %761 = less_equal(%759, 127f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %762 = cast(%70, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %763 = greater_equal(%762, -128f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %764 = less_equal(%762, 127f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %765 = cast(%v11_conv_0_weight, dtype="float32") /* ty=Tensor[(72, 24, 1, 1), float32] */;
  %766 = multiply(%763, %764) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %767 = nn.conv2d_transpose(%751, %765, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %768 = zeros(shape=[1, 24, 8, 8], dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %769 = where(%766, %767, %768) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %770 = reshape(%v10_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %771 = divide(%769, %770) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %772 = reshape(%v10_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %773 = multiply(%760, %761) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %774 = multiply(%771, %772) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %775 = zeros(shape=[1, 24, 8, 8], dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %776 = where(%773, %774, %775) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %777 = reshape(%v10_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 24, 1, 1), float32] */;
  %778 = multiply(%776, %777) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %779 = cast(%67, dtype="float32") /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %780 = tile(%778, reps=[1, 72, 1, 1]) /* ty=Tensor[(1, 1728, 8, 8), float32] */;
  %781 = reshape(%779, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %782 = reshape(%780, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1728, 1, 8, 8), float32] */;
  %783 = nn.conv2d(%781, %782, padding=[0, 0, 0, 0], groups=72) /* ty=Tensor[(1, 1728, 1, 1), float32] */;
  %784 = reshape(%783, newshape=[1, 72, 24, 1, 1]) /* ty=Tensor[(1, 72, 24, 1, 1), float32] */;
  %785 = sum(%784, axis=[0]) /* ty=Tensor[(72, 24, 1, 1), float32] */;
  %786 = cast(%66, dtype="float32") /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %787 = greater_equal(%786, -128f /* ty=float32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %788 = less_equal(%786, 127f /* ty=float32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %789 = cast(%v10_conv_2_weight, dtype="float32") /* ty=Tensor[(24, 72, 1, 1), float32] */;
  %790 = multiply(%787, %788) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %791 = nn.conv2d_transpose(%778, %789, channels=72, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %792 = zeros(shape=[1, 72, 8, 8], dtype="float32") /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %793 = where(%790, %791, %792) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %794 = reshape(%v10_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 72, 1, 1), float32] */;
  %795 = multiply(%793, %794) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %796 = cast(%65, dtype="float32") /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %797 = tile(%795, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %798 = reshape(%796, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %799 = reshape(%797, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(72, 1, 8, 8), float32] */;
  %800 = nn.conv2d(%798, %799, padding=[2, 2, 2, 2], groups=72) /* ty=Tensor[(1, 72, 5, 5), float32] */;
  %801 = reshape(%800, newshape=[1, 1, 72, 5, 5]) /* ty=Tensor[(1, 1, 72, 5, 5), float32] */;
  %802 = sum(%801, axis=[0]) /* ty=Tensor[(1, 72, 5, 5), float32] */;
  %803 = cast(%64, dtype="float32") /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %804 = greater_equal(%803, -128f /* ty=float32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %805 = less_equal(%803, 127f /* ty=float32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %806 = cast(%v10_conv_1_weight, dtype="float32") /* ty=Tensor[(72, 1, 5, 5), float32] */;
  %807 = multiply(%804, %805) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %808 = nn.conv2d_transpose(%795, %806, channels=72, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=72, kernel_layout="IOHW") /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %809 = zeros(shape=[1, 72, 8, 8], dtype="float32") /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %810 = where(%807, %808, %809) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %811 = reshape(%v10_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 72, 1, 1), float32] */;
  %812 = multiply(%810, %811) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %813 = cast(%63, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %814 = tile(%812, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 1728, 8, 8), float32] */;
  %815 = reshape(%813, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %816 = reshape(%814, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1728, 1, 8, 8), float32] */;
  %817 = nn.conv2d(%815, %816, padding=[0, 0, 0, 0], groups=24) /* ty=Tensor[(1, 1728, 1, 1), float32] */;
  %818 = reshape(%817, newshape=[1, 24, 72, 1, 1]) /* ty=Tensor[(1, 24, 72, 1, 1), float32] */;
  %819 = sum(%818, axis=[0]) /* ty=Tensor[(24, 72, 1, 1), float32] */;
  %820 = cast(%60, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %821 = greater_equal(%820, -128f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %822 = less_equal(%820, 127f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %823 = cast(%62, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %824 = greater_equal(%823, -128f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %825 = less_equal(%823, 127f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %826 = cast(%v10_conv_0_weight, dtype="float32") /* ty=Tensor[(72, 24, 1, 1), float32] */;
  %827 = multiply(%824, %825) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %828 = nn.conv2d_transpose(%812, %826, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %829 = zeros(shape=[1, 24, 8, 8], dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %830 = where(%827, %828, %829) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %831 = reshape(%v9_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %832 = divide(%830, %831) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %833 = reshape(%v9_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %834 = multiply(%821, %822) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %835 = multiply(%832, %833) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %836 = zeros(shape=[1, 24, 8, 8], dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %837 = where(%834, %835, %836) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %838 = reshape(%v9_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 24, 1, 1), float32] */;
  %839 = multiply(%837, %838) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %840 = cast(%59, dtype="float32") /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %841 = tile(%839, reps=[1, 72, 1, 1]) /* ty=Tensor[(1, 1728, 8, 8), float32] */;
  %842 = reshape(%840, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %843 = reshape(%841, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1728, 1, 8, 8), float32] */;
  %844 = nn.conv2d(%842, %843, padding=[0, 0, 0, 0], groups=72) /* ty=Tensor[(1, 1728, 1, 1), float32] */;
  %845 = reshape(%844, newshape=[1, 72, 24, 1, 1]) /* ty=Tensor[(1, 72, 24, 1, 1), float32] */;
  %846 = sum(%845, axis=[0]) /* ty=Tensor[(72, 24, 1, 1), float32] */;
  %847 = cast(%58, dtype="float32") /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %848 = greater_equal(%847, -128f /* ty=float32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %849 = less_equal(%847, 127f /* ty=float32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %850 = cast(%v9_conv_2_weight, dtype="float32") /* ty=Tensor[(24, 72, 1, 1), float32] */;
  %851 = multiply(%848, %849) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %852 = nn.conv2d_transpose(%839, %850, channels=72, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %853 = zeros(shape=[1, 72, 8, 8], dtype="float32") /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %854 = where(%851, %852, %853) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %855 = reshape(%v9_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 72, 1, 1), float32] */;
  %856 = multiply(%854, %855) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %857 = cast(%57, dtype="float32") /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %858 = tile(%856, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %859 = reshape(%857, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %860 = reshape(%858, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(72, 1, 8, 8), float32] */;
  %861 = nn.conv2d(%859, %860, padding=[2, 2, 2, 2], groups=72) /* ty=Tensor[(1, 72, 5, 5), float32] */;
  %862 = reshape(%861, newshape=[1, 1, 72, 5, 5]) /* ty=Tensor[(1, 1, 72, 5, 5), float32] */;
  %863 = sum(%862, axis=[0]) /* ty=Tensor[(1, 72, 5, 5), float32] */;
  %864 = cast(%56, dtype="float32") /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %865 = greater_equal(%864, -128f /* ty=float32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %866 = less_equal(%864, 127f /* ty=float32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %867 = cast(%v9_conv_1_weight, dtype="float32") /* ty=Tensor[(72, 1, 5, 5), float32] */;
  %868 = multiply(%865, %866) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %869 = nn.conv2d_transpose(%856, %867, channels=72, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=72, kernel_layout="IOHW") /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %870 = zeros(shape=[1, 72, 8, 8], dtype="float32") /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %871 = where(%868, %869, %870) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %872 = reshape(%v9_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 72, 1, 1), float32] */;
  %873 = multiply(%871, %872) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %874 = cast(%55, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %875 = tile(%873, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 1728, 8, 8), float32] */;
  %876 = reshape(%874, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %877 = reshape(%875, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1728, 1, 8, 8), float32] */;
  %878 = nn.conv2d(%876, %877, padding=[0, 0, 0, 0], groups=24) /* ty=Tensor[(1, 1728, 1, 1), float32] */;
  %879 = reshape(%878, newshape=[1, 24, 72, 1, 1]) /* ty=Tensor[(1, 24, 72, 1, 1), float32] */;
  %880 = sum(%879, axis=[0]) /* ty=Tensor[(24, 72, 1, 1), float32] */;
  %881 = cast(%54, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %882 = greater_equal(%881, -128f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %883 = less_equal(%881, 127f /* ty=float32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %884 = cast(%v9_conv_0_weight, dtype="float32") /* ty=Tensor[(72, 24, 1, 1), float32] */;
  %885 = multiply(%882, %883) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %886 = nn.conv2d_transpose(%873, %884, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %887 = zeros(shape=[1, 24, 8, 8], dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %888 = where(%885, %886, %887) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %889 = reshape(%v8_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 24, 1, 1), float32] */;
  %890 = multiply(%888, %889) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %891 = cast(%53, dtype="float32") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %892 = tile(%890, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 2304, 8, 8), float32] */;
  %893 = reshape(%891, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %894 = reshape(%892, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(2304, 1, 8, 8), float32] */;
  %895 = nn.conv2d(%893, %894, padding=[0, 0, 0, 0], groups=96) /* ty=Tensor[(1, 2304, 1, 1), float32] */;
  %896 = reshape(%895, newshape=[1, 96, 24, 1, 1]) /* ty=Tensor[(1, 96, 24, 1, 1), float32] */;
  %897 = sum(%896, axis=[0]) /* ty=Tensor[(96, 24, 1, 1), float32] */;
  %898 = cast(%52, dtype="float32") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %899 = greater_equal(%898, -128f /* ty=float32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %900 = less_equal(%898, 127f /* ty=float32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %901 = cast(%v8_conv_2_weight, dtype="float32") /* ty=Tensor[(24, 96, 1, 1), float32] */;
  %902 = multiply(%899, %900) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %903 = nn.conv2d_transpose(%890, %901, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %904 = zeros(shape=[1, 96, 8, 8], dtype="float32") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %905 = where(%902, %903, %904) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %906 = reshape(%v8_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %907 = multiply(%905, %906) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %908 = cast(%51, dtype="float32") /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %909 = tile(%907, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %910 = reshape(%908, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %911 = reshape(%909, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(96, 1, 8, 8), float32] */;
  %912 = nn.conv2d(%910, %911, padding=[3, 3, 3, 3], dilation=[2, 2], groups=96) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %913 = reshape(%912, newshape=[1, 1, 96, 8, 8]) /* ty=Tensor[(1, 1, 96, 8, 8), float32] */;
  %914 = sum(%913, axis=[0]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %915 = transpose(%914, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 1, 8, 8), float32] */;
  %916 = cast(%50, dtype="float32") /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %917 = greater_equal(%916, -128f /* ty=float32 */) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %918 = less_equal(%916, 127f /* ty=float32 */) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %919 = cast(%v8_conv_1_weight, dtype="float32") /* ty=Tensor[(96, 1, 7, 7), float32] */;
  %920 = multiply(%917, %918) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %921 = nn.conv2d_transpose(%907, %919, channels=96, kernel_size=[7, 7], strides=[2, 2], output_padding=[1, 1], padding=[3, 3, 3, 3], groups=96, kernel_layout="IOHW") /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %922 = zeros(shape=[1, 96, 16, 16], dtype="float32") /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %923 = where(%920, %921, %922) /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %924 = reshape(%v8_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %925 = multiply(%923, %924) /* ty=Tensor[(1, 96, 16, 16), float32] */;
  %926 = cast(%49, dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %927 = tile(%925, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 1536, 16, 16), float32] */;
  %928 = reshape(%926, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %929 = reshape(%927, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1536, 1, 16, 16), float32] */;
  %930 = nn.conv2d(%928, %929, padding=[0, 0, 0, 0], groups=16) /* ty=Tensor[(1, 1536, 1, 1), float32] */;
  %931 = reshape(%930, newshape=[1, 16, 96, 1, 1]) /* ty=Tensor[(1, 16, 96, 1, 1), float32] */;
  %932 = sum(%931, axis=[0]) /* ty=Tensor[(16, 96, 1, 1), float32] */;
  %933 = cast(%46, dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %934 = greater_equal(%933, -128f /* ty=float32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %935 = less_equal(%933, 127f /* ty=float32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %936 = cast(%48, dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %937 = greater_equal(%936, -128f /* ty=float32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %938 = less_equal(%936, 127f /* ty=float32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %939 = cast(%v8_conv_0_weight, dtype="float32") /* ty=Tensor[(96, 16, 1, 1), float32] */;
  %940 = multiply(%937, %938) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %941 = nn.conv2d_transpose(%925, %939, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %942 = zeros(shape=[1, 16, 16, 16], dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %943 = where(%940, %941, %942) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %944 = reshape(%v7_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %945 = divide(%943, %944) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %946 = reshape(%v7_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %947 = multiply(%934, %935) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %948 = multiply(%945, %946) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %949 = zeros(shape=[1, 16, 16, 16], dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %950 = where(%947, %948, %949) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %951 = reshape(%v7_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 16, 1, 1), float32] */;
  %952 = multiply(%950, %951) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %953 = cast(%45, dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %954 = tile(%952, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 768, 16, 16), float32] */;
  %955 = reshape(%953, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %956 = reshape(%954, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 16, 16), float32] */;
  %957 = nn.conv2d(%955, %956, padding=[0, 0, 0, 0], groups=48) /* ty=Tensor[(1, 768, 1, 1), float32] */;
  %958 = reshape(%957, newshape=[1, 48, 16, 1, 1]) /* ty=Tensor[(1, 48, 16, 1, 1), float32] */;
  %959 = sum(%958, axis=[0]) /* ty=Tensor[(48, 16, 1, 1), float32] */;
  %960 = cast(%44, dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %961 = greater_equal(%960, -128f /* ty=float32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %962 = less_equal(%960, 127f /* ty=float32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %963 = cast(%v7_conv_2_weight, dtype="float32") /* ty=Tensor[(16, 48, 1, 1), float32] */;
  %964 = multiply(%961, %962) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %965 = nn.conv2d_transpose(%952, %963, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %966 = zeros(shape=[1, 48, 16, 16], dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %967 = where(%964, %965, %966) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %968 = reshape(%v7_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %969 = multiply(%967, %968) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %970 = cast(%43, dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %971 = tile(%969, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %972 = reshape(%970, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %973 = reshape(%971, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(48, 1, 16, 16), float32] */;
  %974 = nn.conv2d(%972, %973, padding=[2, 2, 2, 2], groups=48) /* ty=Tensor[(1, 48, 5, 5), float32] */;
  %975 = reshape(%974, newshape=[1, 1, 48, 5, 5]) /* ty=Tensor[(1, 1, 48, 5, 5), float32] */;
  %976 = sum(%975, axis=[0]) /* ty=Tensor[(1, 48, 5, 5), float32] */;
  %977 = cast(%42, dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %978 = greater_equal(%977, -128f /* ty=float32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %979 = less_equal(%977, 127f /* ty=float32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %980 = cast(%v7_conv_1_weight, dtype="float32") /* ty=Tensor[(48, 1, 5, 5), float32] */;
  %981 = multiply(%978, %979) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %982 = nn.conv2d_transpose(%969, %980, channels=48, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=48, kernel_layout="IOHW") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %983 = zeros(shape=[1, 48, 16, 16], dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %984 = where(%981, %982, %983) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %985 = reshape(%v7_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %986 = multiply(%984, %985) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %987 = cast(%41, dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %988 = tile(%986, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 768, 16, 16), float32] */;
  %989 = reshape(%987, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %990 = reshape(%988, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 16, 16), float32] */;
  %991 = nn.conv2d(%989, %990, padding=[0, 0, 0, 0], groups=16) /* ty=Tensor[(1, 768, 1, 1), float32] */;
  %992 = reshape(%991, newshape=[1, 16, 48, 1, 1]) /* ty=Tensor[(1, 16, 48, 1, 1), float32] */;
  %993 = sum(%992, axis=[0]) /* ty=Tensor[(16, 48, 1, 1), float32] */;
  %994 = cast(%38, dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %995 = greater_equal(%994, -128f /* ty=float32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %996 = less_equal(%994, 127f /* ty=float32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %997 = cast(%40, dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %998 = greater_equal(%997, -128f /* ty=float32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %999 = less_equal(%997, 127f /* ty=float32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1000 = cast(%v7_conv_0_weight, dtype="float32") /* ty=Tensor[(48, 16, 1, 1), float32] */;
  %1001 = multiply(%998, %999) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1002 = nn.conv2d_transpose(%986, %1000, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1003 = zeros(shape=[1, 16, 16, 16], dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1004 = where(%1001, %1002, %1003) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1005 = reshape(%v6_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %1006 = divide(%1004, %1005) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1007 = reshape(%v6_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %1008 = multiply(%995, %996) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1009 = multiply(%1006, %1007) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1010 = zeros(shape=[1, 16, 16, 16], dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1011 = where(%1008, %1009, %1010) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1012 = reshape(%v6_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 16, 1, 1), float32] */;
  %1013 = multiply(%1011, %1012) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1014 = cast(%37, dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1015 = tile(%1013, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 768, 16, 16), float32] */;
  %1016 = reshape(%1014, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1017 = reshape(%1015, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 16, 16), float32] */;
  %1018 = nn.conv2d(%1016, %1017, padding=[0, 0, 0, 0], groups=48) /* ty=Tensor[(1, 768, 1, 1), float32] */;
  %1019 = reshape(%1018, newshape=[1, 48, 16, 1, 1]) /* ty=Tensor[(1, 48, 16, 1, 1), float32] */;
  %1020 = sum(%1019, axis=[0]) /* ty=Tensor[(48, 16, 1, 1), float32] */;
  %1021 = cast(%36, dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1022 = greater_equal(%1021, -128f /* ty=float32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1023 = less_equal(%1021, 127f /* ty=float32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1024 = cast(%v6_conv_2_weight, dtype="float32") /* ty=Tensor[(16, 48, 1, 1), float32] */;
  %1025 = multiply(%1022, %1023) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1026 = nn.conv2d_transpose(%1013, %1024, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1027 = zeros(shape=[1, 48, 16, 16], dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1028 = where(%1025, %1026, %1027) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1029 = reshape(%v6_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %1030 = multiply(%1028, %1029) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1031 = cast(%35, dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1032 = tile(%1030, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1033 = reshape(%1031, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1034 = reshape(%1032, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(48, 1, 16, 16), float32] */;
  %1035 = nn.conv2d(%1033, %1034, padding=[2, 2, 2, 2], groups=48) /* ty=Tensor[(1, 48, 5, 5), float32] */;
  %1036 = reshape(%1035, newshape=[1, 1, 48, 5, 5]) /* ty=Tensor[(1, 1, 48, 5, 5), float32] */;
  %1037 = sum(%1036, axis=[0]) /* ty=Tensor[(1, 48, 5, 5), float32] */;
  %1038 = cast(%34, dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1039 = greater_equal(%1038, -128f /* ty=float32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1040 = less_equal(%1038, 127f /* ty=float32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1041 = cast(%v6_conv_1_weight, dtype="float32") /* ty=Tensor[(48, 1, 5, 5), float32] */;
  %1042 = multiply(%1039, %1040) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1043 = nn.conv2d_transpose(%1030, %1041, channels=48, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=48, kernel_layout="IOHW") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1044 = zeros(shape=[1, 48, 16, 16], dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1045 = where(%1042, %1043, %1044) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1046 = reshape(%v6_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %1047 = multiply(%1045, %1046) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1048 = cast(%33, dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1049 = tile(%1047, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 768, 16, 16), float32] */;
  %1050 = reshape(%1048, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1051 = reshape(%1049, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 16, 16), float32] */;
  %1052 = nn.conv2d(%1050, %1051, padding=[0, 0, 0, 0], groups=16) /* ty=Tensor[(1, 768, 1, 1), float32] */;
  %1053 = reshape(%1052, newshape=[1, 16, 48, 1, 1]) /* ty=Tensor[(1, 16, 48, 1, 1), float32] */;
  %1054 = sum(%1053, axis=[0]) /* ty=Tensor[(16, 48, 1, 1), float32] */;
  %1055 = cast(%30, dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1056 = greater_equal(%1055, -128f /* ty=float32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1057 = less_equal(%1055, 127f /* ty=float32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1058 = cast(%32, dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1059 = greater_equal(%1058, -128f /* ty=float32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1060 = less_equal(%1058, 127f /* ty=float32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1061 = cast(%v6_conv_0_weight, dtype="float32") /* ty=Tensor[(48, 16, 1, 1), float32] */;
  %1062 = multiply(%1059, %1060) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1063 = nn.conv2d_transpose(%1047, %1061, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1064 = zeros(shape=[1, 16, 16, 16], dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1065 = where(%1062, %1063, %1064) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1066 = reshape(%v5_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %1067 = divide(%1065, %1066) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1068 = reshape(%v5_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %1069 = multiply(%1056, %1057) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1070 = multiply(%1067, %1068) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1071 = zeros(shape=[1, 16, 16, 16], dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1072 = where(%1069, %1070, %1071) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1073 = reshape(%v5_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 16, 1, 1), float32] */;
  %1074 = multiply(%1072, %1073) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1075 = cast(%29, dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1076 = tile(%1074, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 768, 16, 16), float32] */;
  %1077 = reshape(%1075, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1078 = reshape(%1076, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 16, 16), float32] */;
  %1079 = nn.conv2d(%1077, %1078, padding=[0, 0, 0, 0], groups=48) /* ty=Tensor[(1, 768, 1, 1), float32] */;
  %1080 = reshape(%1079, newshape=[1, 48, 16, 1, 1]) /* ty=Tensor[(1, 48, 16, 1, 1), float32] */;
  %1081 = sum(%1080, axis=[0]) /* ty=Tensor[(48, 16, 1, 1), float32] */;
  %1082 = cast(%28, dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1083 = greater_equal(%1082, -128f /* ty=float32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1084 = less_equal(%1082, 127f /* ty=float32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1085 = cast(%v5_conv_2_weight, dtype="float32") /* ty=Tensor[(16, 48, 1, 1), float32] */;
  %1086 = multiply(%1083, %1084) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1087 = nn.conv2d_transpose(%1074, %1085, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1088 = zeros(shape=[1, 48, 16, 16], dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1089 = where(%1086, %1087, %1088) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1090 = reshape(%v5_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %1091 = multiply(%1089, %1090) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1092 = cast(%27, dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1093 = tile(%1091, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1094 = reshape(%1092, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1095 = reshape(%1093, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(48, 1, 16, 16), float32] */;
  %1096 = nn.conv2d(%1094, %1095, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 3, 3), float32] */;
  %1097 = reshape(%1096, newshape=[1, 1, 48, 3, 3]) /* ty=Tensor[(1, 1, 48, 3, 3), float32] */;
  %1098 = sum(%1097, axis=[0]) /* ty=Tensor[(1, 48, 3, 3), float32] */;
  %1099 = cast(%26, dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1100 = greater_equal(%1099, -128f /* ty=float32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1101 = less_equal(%1099, 127f /* ty=float32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1102 = cast(%v5_conv_1_weight, dtype="float32") /* ty=Tensor[(48, 1, 3, 3), float32] */;
  %1103 = multiply(%1100, %1101) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1104 = nn.conv2d_transpose(%1091, %1102, channels=48, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=48, kernel_layout="IOHW") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1105 = zeros(shape=[1, 48, 16, 16], dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1106 = where(%1103, %1104, %1105) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1107 = reshape(%v5_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %1108 = multiply(%1106, %1107) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1109 = cast(%25, dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1110 = tile(%1108, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 768, 16, 16), float32] */;
  %1111 = reshape(%1109, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1112 = reshape(%1110, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 16, 16), float32] */;
  %1113 = nn.conv2d(%1111, %1112, padding=[0, 0, 0, 0], groups=16) /* ty=Tensor[(1, 768, 1, 1), float32] */;
  %1114 = reshape(%1113, newshape=[1, 16, 48, 1, 1]) /* ty=Tensor[(1, 16, 48, 1, 1), float32] */;
  %1115 = sum(%1114, axis=[0]) /* ty=Tensor[(16, 48, 1, 1), float32] */;
  %1116 = cast(%24, dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1117 = greater_equal(%1116, -128f /* ty=float32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1118 = less_equal(%1116, 127f /* ty=float32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1119 = cast(%v5_conv_0_weight, dtype="float32") /* ty=Tensor[(48, 16, 1, 1), float32] */;
  %1120 = multiply(%1117, %1118) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1121 = nn.conv2d_transpose(%1108, %1119, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1122 = zeros(shape=[1, 16, 16, 16], dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1123 = where(%1120, %1121, %1122) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1124 = reshape(%v4_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 16, 1, 1), float32] */;
  %1125 = multiply(%1123, %1124) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1126 = cast(%23, dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1127 = tile(%1125, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 768, 16, 16), float32] */;
  %1128 = reshape(%1126, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1129 = reshape(%1127, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 16, 16), float32] */;
  %1130 = nn.conv2d(%1128, %1129, padding=[0, 0, 0, 0], groups=48) /* ty=Tensor[(1, 768, 1, 1), float32] */;
  %1131 = reshape(%1130, newshape=[1, 48, 16, 1, 1]) /* ty=Tensor[(1, 48, 16, 1, 1), float32] */;
  %1132 = sum(%1131, axis=[0]) /* ty=Tensor[(48, 16, 1, 1), float32] */;
  %1133 = cast(%22, dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1134 = greater_equal(%1133, -128f /* ty=float32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1135 = less_equal(%1133, 127f /* ty=float32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1136 = cast(%v4_conv_2_weight, dtype="float32") /* ty=Tensor[(16, 48, 1, 1), float32] */;
  %1137 = multiply(%1134, %1135) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1138 = nn.conv2d_transpose(%1125, %1136, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1139 = zeros(shape=[1, 48, 16, 16], dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1140 = where(%1137, %1138, %1139) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1141 = reshape(%v4_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %1142 = multiply(%1140, %1141) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1143 = cast(%21, dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1144 = tile(%1142, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %1145 = reshape(%1143, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1146 = reshape(%1144, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(48, 1, 16, 16), float32] */;
  %1147 = nn.conv2d(%1145, %1146, padding=[3, 3, 3, 3], dilation=[2, 2], groups=48) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %1148 = reshape(%1147, newshape=[1, 1, 48, 8, 8]) /* ty=Tensor[(1, 1, 48, 8, 8), float32] */;
  %1149 = sum(%1148, axis=[0]) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %1150 = transpose(%1149, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 1, 8, 8), float32] */;
  %1151 = cast(%20, dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1152 = greater_equal(%1151, -128f /* ty=float32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1153 = less_equal(%1151, 127f /* ty=float32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1154 = cast(%v4_conv_1_weight, dtype="float32") /* ty=Tensor[(48, 1, 7, 7), float32] */;
  %1155 = multiply(%1152, %1153) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1156 = nn.conv2d_transpose(%1142, %1154, channels=48, kernel_size=[7, 7], strides=[2, 2], output_padding=[1, 1], padding=[3, 3, 3, 3], groups=48, kernel_layout="IOHW") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1157 = zeros(shape=[1, 48, 32, 32], dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1158 = where(%1155, %1156, %1157) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1159 = reshape(%v4_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %1160 = multiply(%1158, %1159) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1161 = cast(%19, dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %1162 = tile(%1160, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 768, 32, 32), float32] */;
  %1163 = reshape(%1161, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %1164 = reshape(%1162, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 32, 32), float32] */;
  %1165 = nn.conv2d(%1163, %1164, padding=[0, 0, 0, 0], groups=16) /* ty=Tensor[(1, 768, 1, 1), float32] */;
  %1166 = reshape(%1165, newshape=[1, 16, 48, 1, 1]) /* ty=Tensor[(1, 16, 48, 1, 1), float32] */;
  %1167 = sum(%1166, axis=[0]) /* ty=Tensor[(16, 48, 1, 1), float32] */;
  %1168 = cast(%16, dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %1169 = greater_equal(%1168, -128f /* ty=float32 */) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %1170 = less_equal(%1168, 127f /* ty=float32 */) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %1171 = cast(%18, dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %1172 = greater_equal(%1171, -128f /* ty=float32 */) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %1173 = less_equal(%1171, 127f /* ty=float32 */) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %1174 = cast(%v4_conv_0_weight, dtype="float32") /* ty=Tensor[(48, 16, 1, 1), float32] */;
  %1175 = multiply(%1172, %1173) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %1176 = nn.conv2d_transpose(%1160, %1174, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %1177 = zeros(shape=[1, 16, 32, 32], dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %1178 = where(%1175, %1176, %1177) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %1179 = reshape(%v3_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %1180 = divide(%1178, %1179) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %1181 = reshape(%v3_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %1182 = multiply(%1169, %1170) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %1183 = multiply(%1180, %1181) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %1184 = zeros(shape=[1, 16, 32, 32], dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %1185 = where(%1182, %1183, %1184) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %1186 = reshape(%v3_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 16, 1, 1), float32] */;
  %1187 = multiply(%1185, %1186) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %1188 = cast(%15, dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1189 = tile(%1187, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 768, 32, 32), float32] */;
  %1190 = reshape(%1188, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1191 = reshape(%1189, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 32, 32), float32] */;
  %1192 = nn.conv2d(%1190, %1191, padding=[0, 0, 0, 0], groups=48) /* ty=Tensor[(1, 768, 1, 1), float32] */;
  %1193 = reshape(%1192, newshape=[1, 48, 16, 1, 1]) /* ty=Tensor[(1, 48, 16, 1, 1), float32] */;
  %1194 = sum(%1193, axis=[0]) /* ty=Tensor[(48, 16, 1, 1), float32] */;
  %1195 = cast(%14, dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1196 = greater_equal(%1195, -128f /* ty=float32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1197 = less_equal(%1195, 127f /* ty=float32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1198 = cast(%v3_conv_2_weight, dtype="float32") /* ty=Tensor[(16, 48, 1, 1), float32] */;
  %1199 = multiply(%1196, %1197) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1200 = nn.conv2d_transpose(%1187, %1198, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1201 = zeros(shape=[1, 48, 32, 32], dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1202 = where(%1199, %1200, %1201) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1203 = reshape(%v3_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %1204 = multiply(%1202, %1203) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1205 = cast(%13, dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1206 = tile(%1204, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1207 = reshape(%1205, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1208 = reshape(%1206, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(48, 1, 32, 32), float32] */;
  %1209 = nn.conv2d(%1207, %1208, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 3, 3), float32] */;
  %1210 = reshape(%1209, newshape=[1, 1, 48, 3, 3]) /* ty=Tensor[(1, 1, 48, 3, 3), float32] */;
  %1211 = sum(%1210, axis=[0]) /* ty=Tensor[(1, 48, 3, 3), float32] */;
  %1212 = cast(%12, dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1213 = greater_equal(%1212, -128f /* ty=float32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1214 = less_equal(%1212, 127f /* ty=float32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1215 = cast(%v3_conv_1_weight, dtype="float32") /* ty=Tensor[(48, 1, 3, 3), float32] */;
  %1216 = multiply(%1213, %1214) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1217 = nn.conv2d_transpose(%1204, %1215, channels=48, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=48, kernel_layout="IOHW") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1218 = zeros(shape=[1, 48, 32, 32], dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1219 = where(%1216, %1217, %1218) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1220 = reshape(%v3_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %1221 = multiply(%1219, %1220) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %1222 = cast(%11, dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %1223 = tile(%1221, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 768, 32, 32), float32] */;
  %1224 = reshape(%1222, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %1225 = reshape(%1223, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 32, 32), float32] */;
  %1226 = nn.conv2d(%1224, %1225, padding=[0, 0, 0, 0], groups=16) /* ty=Tensor[(1, 768, 1, 1), float32] */;
  %1227 = reshape(%1226, newshape=[1, 16, 48, 1, 1]) /* ty=Tensor[(1, 16, 48, 1, 1), float32] */;
  %1228 = sum(%1227, axis=[0]) /* ty=Tensor[(16, 48, 1, 1), float32] */;
  %1229 = cast(%10, dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %1230 = greater_equal(%1229, -128f /* ty=float32 */) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %1231 = less_equal(%1229, 127f /* ty=float32 */) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %1232 = cast(%v3_conv_0_weight, dtype="float32") /* ty=Tensor[(48, 16, 1, 1), float32] */;
  %1233 = multiply(%1230, %1231) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %1234 = nn.conv2d_transpose(%1221, %1232, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %1235 = zeros(shape=[1, 16, 32, 32], dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %1236 = where(%1233, %1234, %1235) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %1237 = reshape(%v2_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 16, 1, 1), float32] */;
  %1238 = multiply(%1236, %1237) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %1239 = cast(%9, dtype="float32") /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %1240 = tile(%1238, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 384, 32, 32), float32] */;
  %1241 = reshape(%1239, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %1242 = reshape(%1240, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 32, 32), float32] */;
  %1243 = nn.conv2d(%1241, %1242, padding=[0, 0, 0, 0], groups=24) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %1244 = reshape(%1243, newshape=[1, 24, 16, 1, 1]) /* ty=Tensor[(1, 24, 16, 1, 1), float32] */;
  %1245 = sum(%1244, axis=[0]) /* ty=Tensor[(24, 16, 1, 1), float32] */;
  %1246 = cast(%8, dtype="float32") /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %1247 = greater_equal(%1246, -128f /* ty=float32 */) /* ty=Tensor[(1, 24, 32, 32), bool] */;
  %1248 = less_equal(%1246, 127f /* ty=float32 */) /* ty=Tensor[(1, 24, 32, 32), bool] */;
  %1249 = cast(%v2_conv_2_weight, dtype="float32") /* ty=Tensor[(16, 24, 1, 1), float32] */;
  %1250 = multiply(%1247, %1248) /* ty=Tensor[(1, 24, 32, 32), bool] */;
  %1251 = nn.conv2d_transpose(%1238, %1249, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %1252 = zeros(shape=[1, 24, 32, 32], dtype="float32") /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %1253 = where(%1250, %1251, %1252) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %1254 = reshape(%v2_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 24, 1, 1), float32] */;
  %1255 = multiply(%1253, %1254) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %1256 = cast(%7, dtype="float32") /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %1257 = tile(%1255, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %1258 = reshape(%1256, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %1259 = reshape(%1257, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24, 1, 32, 32), float32] */;
  %1260 = nn.conv2d(%1258, %1259, padding=[2, 2, 2, 2], dilation=[2, 2], groups=24) /* ty=Tensor[(1, 24, 6, 6), float32] */;
  %1261 = reshape(%1260, newshape=[1, 1, 24, 6, 6]) /* ty=Tensor[(1, 1, 24, 6, 6), float32] */;
  %1262 = sum(%1261, axis=[0]) /* ty=Tensor[(1, 24, 6, 6), float32] */;
  %1263 = transpose(%1262, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 1, 6, 6), float32] */;
  %1264 = cast(%6, dtype="float32") /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %1265 = greater_equal(%1264, -128f /* ty=float32 */) /* ty=Tensor[(1, 24, 64, 64), bool] */;
  %1266 = less_equal(%1264, 127f /* ty=float32 */) /* ty=Tensor[(1, 24, 64, 64), bool] */;
  %1267 = cast(%v2_conv_1_weight, dtype="float32") /* ty=Tensor[(24, 1, 5, 5), float32] */;
  %1268 = multiply(%1265, %1266) /* ty=Tensor[(1, 24, 64, 64), bool] */;
  %1269 = nn.conv2d_transpose(%1255, %1267, channels=24, kernel_size=[5, 5], strides=[2, 2], output_padding=[1, 1], padding=[2, 2, 2, 2], groups=24, kernel_layout="IOHW") /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %1270 = zeros(shape=[1, 24, 64, 64], dtype="float32") /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %1271 = where(%1268, %1269, %1270) /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %1272 = reshape(%v2_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 24, 1, 1), float32] */;
  %1273 = multiply(%1271, %1272) /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %1274 = cast(%5, dtype="float32") /* ty=Tensor[(1, 8, 64, 64), float32] */;
  %1275 = tile(%1273, reps=[1, 8, 1, 1]) /* ty=Tensor[(1, 192, 64, 64), float32] */;
  %1276 = reshape(%1274, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 8, 64, 64), float32] */;
  %1277 = reshape(%1275, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(192, 1, 64, 64), float32] */;
  %1278 = nn.conv2d(%1276, %1277, padding=[0, 0, 0, 0], groups=8) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %1279 = reshape(%1278, newshape=[1, 8, 24, 1, 1]) /* ty=Tensor[(1, 8, 24, 1, 1), float32] */;
  %1280 = sum(%1279, axis=[0]) /* ty=Tensor[(8, 24, 1, 1), float32] */;
  %1281 = cast(%4, dtype="float32") /* ty=Tensor[(1, 8, 64, 64), float32] */;
  %1282 = greater_equal(%1281, -128f /* ty=float32 */) /* ty=Tensor[(1, 8, 64, 64), bool] */;
  %1283 = less_equal(%1281, 127f /* ty=float32 */) /* ty=Tensor[(1, 8, 64, 64), bool] */;
  %1284 = cast(%v2_conv_0_weight, dtype="float32") /* ty=Tensor[(24, 8, 1, 1), float32] */;
  %1285 = multiply(%1282, %1283) /* ty=Tensor[(1, 8, 64, 64), bool] */;
  %1286 = nn.conv2d_transpose(%1273, %1284, channels=8, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 8, 64, 64), float32] */;
  %1287 = zeros(shape=[1, 8, 64, 64], dtype="float32") /* ty=Tensor[(1, 8, 64, 64), float32] */;
  %1288 = where(%1285, %1286, %1287) /* ty=Tensor[(1, 8, 64, 64), float32] */;
  %1289 = reshape(%v1_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 8, 1, 1), float32] */;
  %1290 = multiply(%1288, %1289) /* ty=Tensor[(1, 8, 64, 64), float32] */;
  %1291 = cast(%3, dtype="float32") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1292 = tile(%1290, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 128, 64, 64), float32] */;
  %1293 = reshape(%1291, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1294 = reshape(%1292, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(128, 1, 64, 64), float32] */;
  %1295 = nn.conv2d(%1293, %1294, padding=[0, 0, 0, 0], groups=16) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %1296 = reshape(%1295, newshape=[1, 16, 8, 1, 1]) /* ty=Tensor[(1, 16, 8, 1, 1), float32] */;
  %1297 = sum(%1296, axis=[0]) /* ty=Tensor[(16, 8, 1, 1), float32] */;
  %1298 = cast(%2, dtype="float32") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1299 = greater_equal(%1298, -128f /* ty=float32 */) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1300 = less_equal(%1298, 127f /* ty=float32 */) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1301 = cast(%v1_conv_1_weight, dtype="float32") /* ty=Tensor[(8, 16, 1, 1), float32] */;
  %1302 = multiply(%1299, %1300) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1303 = nn.conv2d_transpose(%1290, %1301, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1304 = zeros(shape=[1, 16, 64, 64], dtype="float32") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1305 = where(%1302, %1303, %1304) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1306 = reshape(%v1_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 16, 1, 1), float32] */;
  %1307 = multiply(%1305, %1306) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1308 = cast(%1, dtype="float32") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1309 = tile(%1307, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1310 = reshape(%1308, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1311 = reshape(%1309, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(16, 1, 64, 64), float32] */;
  %1312 = nn.conv2d(%1310, %1311, padding=[1, 1, 1, 1], groups=16) /* ty=Tensor[(1, 16, 3, 3), float32] */;
  %1313 = reshape(%1312, newshape=[1, 1, 16, 3, 3]) /* ty=Tensor[(1, 1, 16, 3, 3), float32] */;
  %1314 = sum(%1313, axis=[0]) /* ty=Tensor[(1, 16, 3, 3), float32] */;
  %1315 = cast(%0, dtype="float32") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1316 = greater_equal(%1315, -128f /* ty=float32 */) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1317 = less_equal(%1315, 127f /* ty=float32 */) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1318 = cast(%v1_conv_0_weight, dtype="float32") /* ty=Tensor[(16, 1, 3, 3), float32] */;
  %1319 = multiply(%1316, %1317) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1320 = nn.conv2d_transpose(%1307, %1318, channels=16, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=16, kernel_layout="IOHW") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1321 = zeros(shape=[1, 16, 64, 64], dtype="float32") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1322 = where(%1319, %1320, %1321) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1323 = reshape(%v0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 16, 1, 1), float32] */;
  %1324 = multiply(%1322, %1323) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %1325 = cast(%input, dtype="float32") /* ty=Tensor[(1, 3, 128, 128), float32] */;
  %1326 = tile(%1324, reps=[1, 3, 1, 1]) /* ty=Tensor[(1, 48, 64, 64), float32] */;
  %1327 = reshape(%1325, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 3, 128, 128), float32] */;
  %1328 = reshape(%1326, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(48, 1, 64, 64), float32] */;
  %1329 = nn.conv2d(%1327, %1328, padding=[1, 1, 1, 1], dilation=[2, 2], groups=3) /* ty=Tensor[(1, 48, 4, 4), float32] */;
  %1330 = reshape(%1329, newshape=[1, 3, 16, 4, 4]) /* ty=Tensor[(1, 3, 16, 4, 4), float32] */;
  %1331 = sum(%1330, axis=[0]) /* ty=Tensor[(3, 16, 4, 4), float32] */;
  %1332 = transpose(%1331, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 3, 4, 4), float32] */;
  %1333 = nn.cross_entropy_with_logits(%151, %label) /* ty=float32 */;
  %1334 = sum(%167, axis=[1], exclude=True) /* ty=Tensor[(10), float32] */;
  %1335 = transpose(%174, axes=[1, 0, 2, 3]) /* ty=Tensor[(10, 96, 1, 1), float32] */;
  %1336 = sum(%187, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %1337 = transpose(%194, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 384, 1, 1), float32] */;
  %1338 = sum(%204, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %1339 = transpose(%211, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 1, 7, 7), float32] */;
  %1340 = sum(%221, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %1341 = transpose(%228, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %1342 = sum(%248, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %1343 = transpose(%255, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 192, 1, 1), float32] */;
  %1344 = sum(%265, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %1345 = transpose(%272, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 1, 7, 7), float32] */;
  %1346 = sum(%282, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %1347 = transpose(%289, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 64, 1, 1), float32] */;
  %1348 = sum(%309, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %1349 = transpose(%316, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 192, 1, 1), float32] */;
  %1350 = sum(%326, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %1351 = transpose(%333, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 1, 7, 7), float32] */;
  %1352 = sum(%343, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %1353 = transpose(%350, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 64, 1, 1), float32] */;
  %1354 = sum(%370, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %1355 = transpose(%377, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %1356 = sum(%387, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %1357 = transpose(%394, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 1, 7, 7), float32] */;
  %1358 = sum(%404, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %1359 = transpose(%411, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %1360 = sum(%421, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %1361 = transpose(%428, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 192, 1, 1), float32] */;
  %1362 = sum(%438, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %1363 = strided_slice(%446, begin=[0, 0, 0, 0], end=[192, 1, 7, 7], strides=[1], axes=None) /* ty=Tensor[(192, 1, 7, 7), float32] */;
  %1364 = sum(%456, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %1365 = transpose(%463, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), float32] */;
  %1366 = sum(%483, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %1367 = transpose(%490, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 96, 1, 1), float32] */;
  %1368 = sum(%500, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %1369 = transpose(%507, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 1, 5, 5), float32] */;
  %1370 = sum(%517, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %1371 = transpose(%524, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 32, 1, 1), float32] */;
  %1372 = sum(%544, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %1373 = transpose(%551, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 96, 1, 1), float32] */;
  %1374 = sum(%561, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %1375 = transpose(%568, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 1, 5, 5), float32] */;
  %1376 = sum(%578, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %1377 = transpose(%585, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 32, 1, 1), float32] */;
  %1378 = sum(%605, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %1379 = transpose(%612, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 96, 1, 1), float32] */;
  %1380 = sum(%622, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %1381 = transpose(%629, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 1, 5, 5), float32] */;
  %1382 = sum(%639, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %1383 = transpose(%646, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 32, 1, 1), float32] */;
  %1384 = sum(%656, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %1385 = transpose(%663, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 144, 1, 1), float32] */;
  %1386 = sum(%673, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %1387 = transpose(%680, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 1, 5, 5), float32] */;
  %1388 = sum(%690, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %1389 = transpose(%697, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 24, 1, 1), float32] */;
  %1390 = sum(%717, axis=[1], exclude=True) /* ty=Tensor[(24), float32] */;
  %1391 = transpose(%724, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 72, 1, 1), float32] */;
  %1392 = sum(%734, axis=[1], exclude=True) /* ty=Tensor[(72), float32] */;
  %1393 = transpose(%741, axes=[1, 0, 2, 3]) /* ty=Tensor[(72, 1, 5, 5), float32] */;
  %1394 = sum(%751, axis=[1], exclude=True) /* ty=Tensor[(72), float32] */;
  %1395 = transpose(%758, axes=[1, 0, 2, 3]) /* ty=Tensor[(72, 24, 1, 1), float32] */;
  %1396 = sum(%778, axis=[1], exclude=True) /* ty=Tensor[(24), float32] */;
  %1397 = transpose(%785, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 72, 1, 1), float32] */;
  %1398 = sum(%795, axis=[1], exclude=True) /* ty=Tensor[(72), float32] */;
  %1399 = transpose(%802, axes=[1, 0, 2, 3]) /* ty=Tensor[(72, 1, 5, 5), float32] */;
  %1400 = sum(%812, axis=[1], exclude=True) /* ty=Tensor[(72), float32] */;
  %1401 = transpose(%819, axes=[1, 0, 2, 3]) /* ty=Tensor[(72, 24, 1, 1), float32] */;
  %1402 = sum(%839, axis=[1], exclude=True) /* ty=Tensor[(24), float32] */;
  %1403 = transpose(%846, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 72, 1, 1), float32] */;
  %1404 = sum(%856, axis=[1], exclude=True) /* ty=Tensor[(72), float32] */;
  %1405 = transpose(%863, axes=[1, 0, 2, 3]) /* ty=Tensor[(72, 1, 5, 5), float32] */;
  %1406 = sum(%873, axis=[1], exclude=True) /* ty=Tensor[(72), float32] */;
  %1407 = transpose(%880, axes=[1, 0, 2, 3]) /* ty=Tensor[(72, 24, 1, 1), float32] */;
  %1408 = sum(%890, axis=[1], exclude=True) /* ty=Tensor[(24), float32] */;
  %1409 = transpose(%897, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 96, 1, 1), float32] */;
  %1410 = sum(%907, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %1411 = strided_slice(%915, begin=[0, 0, 0, 0], end=[96, 1, 7, 7], strides=[1], axes=None) /* ty=Tensor[(96, 1, 7, 7), float32] */;
  %1412 = sum(%925, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %1413 = transpose(%932, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 16, 1, 1), float32] */;
  %1414 = sum(%952, axis=[1], exclude=True) /* ty=Tensor[(16), float32] */;
  %1415 = transpose(%959, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 48, 1, 1), float32] */;
  %1416 = sum(%969, axis=[1], exclude=True) /* ty=Tensor[(48), float32] */;
  %1417 = transpose(%976, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 1, 5, 5), float32] */;
  %1418 = sum(%986, axis=[1], exclude=True) /* ty=Tensor[(48), float32] */;
  %1419 = transpose(%993, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 16, 1, 1), float32] */;
  %1420 = sum(%1013, axis=[1], exclude=True) /* ty=Tensor[(16), float32] */;
  %1421 = transpose(%1020, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 48, 1, 1), float32] */;
  %1422 = sum(%1030, axis=[1], exclude=True) /* ty=Tensor[(48), float32] */;
  %1423 = transpose(%1037, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 1, 5, 5), float32] */;
  %1424 = sum(%1047, axis=[1], exclude=True) /* ty=Tensor[(48), float32] */;
  %1425 = transpose(%1054, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 16, 1, 1), float32] */;
  %1426 = sum(%1074, axis=[1], exclude=True) /* ty=Tensor[(16), float32] */;
  %1427 = transpose(%1081, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 48, 1, 1), float32] */;
  %1428 = sum(%1091, axis=[1], exclude=True) /* ty=Tensor[(48), float32] */;
  %1429 = transpose(%1098, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 1, 3, 3), float32] */;
  %1430 = sum(%1108, axis=[1], exclude=True) /* ty=Tensor[(48), float32] */;
  %1431 = transpose(%1115, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 16, 1, 1), float32] */;
  %1432 = sum(%1125, axis=[1], exclude=True) /* ty=Tensor[(16), float32] */;
  %1433 = transpose(%1132, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 48, 1, 1), float32] */;
  %1434 = sum(%1142, axis=[1], exclude=True) /* ty=Tensor[(48), float32] */;
  %1435 = strided_slice(%1150, begin=[0, 0, 0, 0], end=[48, 1, 7, 7], strides=[1], axes=None) /* ty=Tensor[(48, 1, 7, 7), float32] */;
  %1436 = sum(%1160, axis=[1], exclude=True) /* ty=Tensor[(48), float32] */;
  %1437 = transpose(%1167, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 16, 1, 1), float32] */;
  %1438 = sum(%1187, axis=[1], exclude=True) /* ty=Tensor[(16), float32] */;
  %1439 = transpose(%1194, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 48, 1, 1), float32] */;
  %1440 = sum(%1204, axis=[1], exclude=True) /* ty=Tensor[(48), float32] */;
  %1441 = transpose(%1211, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 1, 3, 3), float32] */;
  %1442 = sum(%1221, axis=[1], exclude=True) /* ty=Tensor[(48), float32] */;
  %1443 = transpose(%1228, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 16, 1, 1), float32] */;
  %1444 = sum(%1238, axis=[1], exclude=True) /* ty=Tensor[(16), float32] */;
  %1445 = transpose(%1245, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 24, 1, 1), float32] */;
  %1446 = sum(%1255, axis=[1], exclude=True) /* ty=Tensor[(24), float32] */;
  %1447 = strided_slice(%1263, begin=[0, 0, 0, 0], end=[24, 1, 5, 5], strides=[1], axes=None) /* ty=Tensor[(24, 1, 5, 5), float32] */;
  %1448 = sum(%1273, axis=[1], exclude=True) /* ty=Tensor[(24), float32] */;
  %1449 = transpose(%1280, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 8, 1, 1), float32] */;
  %1450 = sum(%1290, axis=[1], exclude=True) /* ty=Tensor[(8), float32] */;
  %1451 = transpose(%1297, axes=[1, 0, 2, 3]) /* ty=Tensor[(8, 16, 1, 1), float32] */;
  %1452 = sum(%1307, axis=[1], exclude=True) /* ty=Tensor[(16), float32] */;
  %1453 = transpose(%1314, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 1, 3, 3), float32] */;
  %1454 = sum(%1324, axis=[1], exclude=True) /* ty=Tensor[(16), float32] */;
  %1455 = strided_slice(%1332, begin=[0, 0, 0, 0], end=[16, 3, 3, 3], strides=[1], axes=None) /* ty=Tensor[(16, 3, 3, 3), float32] */;
  (%1333, %1334, %1335, %1336, %1337, %1338, %1339, %1340, %1341, %1342, %1343, %1344, %1345, %1346, %1347, %1348, %1349, %1350, %1351, %1352, %1353, %1354, %1355, %1356, %1357, %1358, %1359, %1360, %1361, %1362, %1363, %1364, %1365, %1366, %1367, %1368, %1369, %1370, %1371, %1372, %1373, %1374, %1375, %1376, %1377, %1378, %1379, %1380, %1381, %1382, %1383, %1384, %1385, %1386, %1387, %1388, %1389, %1390, %1391, %1392, %1393, %1394, %1395, %1396, %1397, %1398, %1399, %1400, %1401, %1402, %1403, %1404, %1405, %1406, %1407, %1408, %1409, %1410, %1411, %1412, %1413, %1414, %1415, %1416, %1417, %1418, %1419, %1420, %1421, %1422, %1423, %1424, %1425, %1426, %1427, %1428, %1429, %1430, %1431, %1432, %1433, %1434, %1435, %1436, %1437, %1438, %1439, %1440, %1441, %1442, %1443, %1444, %1445, %1446, %1447, %1448, %1449, %1450, %1451, %1452, %1453, %1454, %1455)
}
