def @main(%input: Tensor[(1, 3, 128, 128), int8], %v0_weight: Tensor[(16, 3, 3, 3), int8], %v0_bias: Tensor[(16), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(16), float32], %v1_conv_0_weight: Tensor[(16, 1, 3, 3), int8], %v1_conv_0_bias: Tensor[(16), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(16), float32], %v1_conv_1_weight: Tensor[(8, 16, 1, 1), int8], %v1_conv_1_bias: Tensor[(8), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(8), float32], %v2_conv_0_weight: Tensor[(24, 8, 1, 1), int8], %v2_conv_0_bias: Tensor[(24), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(24), float32], %v2_conv_1_weight: Tensor[(24, 1, 5, 5), int8], %v2_conv_1_bias: Tensor[(24), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(24), float32], %v2_conv_2_weight: Tensor[(16, 24, 1, 1), int8], %v2_conv_2_bias: Tensor[(16), int32], %v2_conv_2_zero_x: Tensor[(1), int8], %v2_conv_2_zero_y: Tensor[(1), int8], %v2_conv_2_scale: Tensor[(16), float32], %v3_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v3_conv_0_bias: Tensor[(48), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(48), float32], %v3_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v3_conv_1_bias: Tensor[(48), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(48), float32], %v3_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v3_conv_2_bias: Tensor[(16), int32], %v3_conv_2_zero_x: Tensor[(1), int8], %v3_conv_2_zero_y: Tensor[(1), int8], %v3_conv_2_scale: Tensor[(16), float32], %v3_qadd_zero_x1: Tensor[(1), int8], %v3_qadd_zero_x2: Tensor[(1), int8], %v3_qadd_scale_x1: Tensor[(1), float32], %v3_qadd_scale_x2: Tensor[(1), float32], %v3_qadd_zero_y: Tensor[(1), int8], %v3_qadd_scale_y: Tensor[(1), float32], %v4_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v4_conv_0_bias: Tensor[(48), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(48), float32], %v4_conv_1_weight: Tensor[(48, 1, 7, 7), int8], %v4_conv_1_bias: Tensor[(48), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(48), float32], %v4_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v4_conv_2_bias: Tensor[(16), int32], %v4_conv_2_zero_x: Tensor[(1), int8], %v4_conv_2_zero_y: Tensor[(1), int8], %v4_conv_2_scale: Tensor[(16), float32], %v5_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v5_conv_0_bias: Tensor[(48), int32], %v5_conv_0_zero_x: Tensor[(1), int8], %v5_conv_0_zero_y: Tensor[(1), int8], %v5_conv_0_scale: Tensor[(48), float32], %v5_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v5_conv_1_bias: Tensor[(48), int32], %v5_conv_1_zero_x: Tensor[(1), int8], %v5_conv_1_zero_y: Tensor[(1), int8], %v5_conv_1_scale: Tensor[(48), float32], %v5_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v5_conv_2_bias: Tensor[(16), int32], %v5_conv_2_zero_x: Tensor[(1), int8], %v5_conv_2_zero_y: Tensor[(1), int8], %v5_conv_2_scale: Tensor[(16), float32], %v5_qadd_zero_x1: Tensor[(1), int8], %v5_qadd_zero_x2: Tensor[(1), int8], %v5_qadd_scale_x1: Tensor[(1), float32], %v5_qadd_scale_x2: Tensor[(1), float32], %v5_qadd_zero_y: Tensor[(1), int8], %v5_qadd_scale_y: Tensor[(1), float32], %v6_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v6_conv_0_bias: Tensor[(48), int32], %v6_conv_0_zero_x: Tensor[(1), int8], %v6_conv_0_zero_y: Tensor[(1), int8], %v6_conv_0_scale: Tensor[(48), float32], %v6_conv_1_weight: Tensor[(48, 1, 5, 5), int8], %v6_conv_1_bias: Tensor[(48), int32], %v6_conv_1_zero_x: Tensor[(1), int8], %v6_conv_1_zero_y: Tensor[(1), int8], %v6_conv_1_scale: Tensor[(48), float32], %v6_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v6_conv_2_bias: Tensor[(16), int32], %v6_conv_2_zero_x: Tensor[(1), int8], %v6_conv_2_zero_y: Tensor[(1), int8], %v6_conv_2_scale: Tensor[(16), float32], %v6_qadd_zero_x1: Tensor[(1), int8], %v6_qadd_zero_x2: Tensor[(1), int8], %v6_qadd_scale_x1: Tensor[(1), float32], %v6_qadd_scale_x2: Tensor[(1), float32], %v6_qadd_zero_y: Tensor[(1), int8], %v6_qadd_scale_y: Tensor[(1), float32], %v7_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v7_conv_0_bias: Tensor[(48), int32], %v7_conv_0_zero_x: Tensor[(1), int8], %v7_conv_0_zero_y: Tensor[(1), int8], %v7_conv_0_scale: Tensor[(48), float32], %v7_conv_1_weight: Tensor[(48, 1, 5, 5), int8], %v7_conv_1_bias: Tensor[(48), int32], %v7_conv_1_zero_x: Tensor[(1), int8], %v7_conv_1_zero_y: Tensor[(1), int8], %v7_conv_1_scale: Tensor[(48), float32], %v7_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v7_conv_2_bias: Tensor[(16), int32], %v7_conv_2_zero_x: Tensor[(1), int8], %v7_conv_2_zero_y: Tensor[(1), int8], %v7_conv_2_scale: Tensor[(16), float32], %v7_qadd_zero_x1: Tensor[(1), int8], %v7_qadd_zero_x2: Tensor[(1), int8], %v7_qadd_scale_x1: Tensor[(1), float32], %v7_qadd_scale_x2: Tensor[(1), float32], %v7_qadd_zero_y: Tensor[(1), int8], %v7_qadd_scale_y: Tensor[(1), float32], %v8_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v8_conv_0_bias: Tensor[(96), int32], %v8_conv_0_zero_x: Tensor[(1), int8], %v8_conv_0_zero_y: Tensor[(1), int8], %v8_conv_0_scale: Tensor[(96), float32], %v8_conv_1_weight: Tensor[(96, 1, 7, 7), int8], %v8_conv_1_bias: Tensor[(96), int32], %v8_conv_1_zero_x: Tensor[(1), int8], %v8_conv_1_zero_y: Tensor[(1), int8], %v8_conv_1_scale: Tensor[(96), float32], %v8_conv_2_weight: Tensor[(24, 96, 1, 1), int8], %v8_conv_2_bias: Tensor[(24), int32], %v8_conv_2_zero_x: Tensor[(1), int8], %v8_conv_2_zero_y: Tensor[(1), int8], %v8_conv_2_scale: Tensor[(24), float32], %v9_conv_0_weight: Tensor[(72, 24, 1, 1), int8], %v9_conv_0_bias: Tensor[(72), int32], %v9_conv_0_zero_x: Tensor[(1), int8], %v9_conv_0_zero_y: Tensor[(1), int8], %v9_conv_0_scale: Tensor[(72), float32], %v9_conv_1_weight: Tensor[(72, 1, 5, 5), int8], %v9_conv_1_bias: Tensor[(72), int32], %v9_conv_1_zero_x: Tensor[(1), int8], %v9_conv_1_zero_y: Tensor[(1), int8], %v9_conv_1_scale: Tensor[(72), float32], %v9_conv_2_weight: Tensor[(24, 72, 1, 1), int8], %v9_conv_2_bias: Tensor[(24), int32], %v9_conv_2_zero_x: Tensor[(1), int8], %v9_conv_2_zero_y: Tensor[(1), int8], %v9_conv_2_scale: Tensor[(24), float32], %v9_qadd_zero_x1: Tensor[(1), int8], %v9_qadd_zero_x2: Tensor[(1), int8], %v9_qadd_scale_x1: Tensor[(1), float32], %v9_qadd_scale_x2: Tensor[(1), float32], %v9_qadd_zero_y: Tensor[(1), int8], %v9_qadd_scale_y: Tensor[(1), float32], %v10_conv_0_weight: Tensor[(72, 24, 1, 1), int8], %v10_conv_0_bias: Tensor[(72), int32], %v10_conv_0_zero_x: Tensor[(1), int8], %v10_conv_0_zero_y: Tensor[(1), int8], %v10_conv_0_scale: Tensor[(72), float32], %v10_conv_1_weight: Tensor[(72, 1, 5, 5), int8], %v10_conv_1_bias: Tensor[(72), int32], %v10_conv_1_zero_x: Tensor[(1), int8], %v10_conv_1_zero_y: Tensor[(1), int8], %v10_conv_1_scale: Tensor[(72), float32], %v10_conv_2_weight: Tensor[(24, 72, 1, 1), int8], %v10_conv_2_bias: Tensor[(24), int32], %v10_conv_2_zero_x: Tensor[(1), int8], %v10_conv_2_zero_y: Tensor[(1), int8], %v10_conv_2_scale: Tensor[(24), float32], %v10_qadd_zero_x1: Tensor[(1), int8], %v10_qadd_zero_x2: Tensor[(1), int8], %v10_qadd_scale_x1: Tensor[(1), float32], %v10_qadd_scale_x2: Tensor[(1), float32], %v10_qadd_zero_y: Tensor[(1), int8], %v10_qadd_scale_y: Tensor[(1), float32], %v11_conv_0_weight: Tensor[(72, 24, 1, 1), int8], %v11_conv_0_bias: Tensor[(72), int32], %v11_conv_0_zero_x: Tensor[(1), int8], %v11_conv_0_zero_y: Tensor[(1), int8], %v11_conv_0_scale: Tensor[(72), float32], %v11_conv_1_weight: Tensor[(72, 1, 5, 5), int8], %v11_conv_1_bias: Tensor[(72), int32], %v11_conv_1_zero_x: Tensor[(1), int8], %v11_conv_1_zero_y: Tensor[(1), int8], %v11_conv_1_scale: Tensor[(72), float32], %v11_conv_2_weight: Tensor[(24, 72, 1, 1), int8], %v11_conv_2_bias: Tensor[(24), int32], %v11_conv_2_zero_x: Tensor[(1), int8], %v11_conv_2_zero_y: Tensor[(1), int8], %v11_conv_2_scale: Tensor[(24), float32], %v11_qadd_zero_x1: Tensor[(1), int8], %v11_qadd_zero_x2: Tensor[(1), int8], %v11_qadd_scale_x1: Tensor[(1), float32], %v11_qadd_scale_x2: Tensor[(1), float32], %v11_qadd_zero_y: Tensor[(1), int8], %v11_qadd_scale_y: Tensor[(1), float32], %v12_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v12_conv_0_bias: Tensor[(144), int32], %v12_conv_0_zero_x: Tensor[(1), int8], %v12_conv_0_zero_y: Tensor[(1), int8], %v12_conv_0_scale: Tensor[(144), float32], %v12_conv_1_weight: Tensor[(144, 1, 5, 5), int8], %v12_conv_1_bias: Tensor[(144), int32], %v12_conv_1_zero_x: Tensor[(1), int8], %v12_conv_1_zero_y: Tensor[(1), int8], %v12_conv_1_scale: Tensor[(144), float32], %v12_conv_2_weight: Tensor[(32, 144, 1, 1), int8], %v12_conv_2_bias: Tensor[(32), int32], %v12_conv_2_zero_x: Tensor[(1), int8], %v12_conv_2_zero_y: Tensor[(1), int8], %v12_conv_2_scale: Tensor[(32), float32], %v13_conv_0_weight: Tensor[(96, 32, 1, 1), int8], %v13_conv_0_bias: Tensor[(96), int32], %v13_conv_0_zero_x: Tensor[(1), int8], %v13_conv_0_zero_y: Tensor[(1), int8], %v13_conv_0_scale: Tensor[(96), float32], %v13_conv_1_weight: Tensor[(96, 1, 5, 5), int8], %v13_conv_1_bias: Tensor[(96), int32], %v13_conv_1_zero_x: Tensor[(1), int8], %v13_conv_1_zero_y: Tensor[(1), int8], %v13_conv_1_scale: Tensor[(96), float32], %v13_conv_2_weight: Tensor[(32, 96, 1, 1), int8], %v13_conv_2_bias: Tensor[(32), int32], %v13_conv_2_zero_x: Tensor[(1), int8], %v13_conv_2_zero_y: Tensor[(1), int8], %v13_conv_2_scale: Tensor[(32), float32], %v13_qadd_zero_x1: Tensor[(1), int8], %v13_qadd_zero_x2: Tensor[(1), int8], %v13_qadd_scale_x1: Tensor[(1), float32], %v13_qadd_scale_x2: Tensor[(1), float32], %v13_qadd_zero_y: Tensor[(1), int8], %v13_qadd_scale_y: Tensor[(1), float32], %v14_conv_0_weight: Tensor[(96, 32, 1, 1), int8], %v14_conv_0_bias: Tensor[(96), int32], %v14_conv_0_zero_x: Tensor[(1), int8], %v14_conv_0_zero_y: Tensor[(1), int8], %v14_conv_0_scale: Tensor[(96), float32], %v14_conv_1_weight: Tensor[(96, 1, 5, 5), int8], %v14_conv_1_bias: Tensor[(96), int32], %v14_conv_1_zero_x: Tensor[(1), int8], %v14_conv_1_zero_y: Tensor[(1), int8], %v14_conv_1_scale: Tensor[(96), float32], %v14_conv_2_weight: Tensor[(32, 96, 1, 1), int8], %v14_conv_2_bias: Tensor[(32), int32], %v14_conv_2_zero_x: Tensor[(1), int8], %v14_conv_2_zero_y: Tensor[(1), int8], %v14_conv_2_scale: Tensor[(32), float32], %v14_qadd_zero_x1: Tensor[(1), int8], %v14_qadd_zero_x2: Tensor[(1), int8], %v14_qadd_scale_x1: Tensor[(1), float32], %v14_qadd_scale_x2: Tensor[(1), float32], %v14_qadd_zero_y: Tensor[(1), int8], %v14_qadd_scale_y: Tensor[(1), float32], %v15_conv_0_weight: Tensor[(96, 32, 1, 1), int8], %v15_conv_0_bias: Tensor[(96), int32], %v15_conv_0_zero_x: Tensor[(1), int8], %v15_conv_0_zero_y: Tensor[(1), int8], %v15_conv_0_scale: Tensor[(96), float32], %v15_conv_1_weight: Tensor[(96, 1, 5, 5), int8], %v15_conv_1_bias: Tensor[(96), int32], %v15_conv_1_zero_x: Tensor[(1), int8], %v15_conv_1_zero_y: Tensor[(1), int8], %v15_conv_1_scale: Tensor[(96), float32], %v15_conv_2_weight: Tensor[(32, 96, 1, 1), int8], %v15_conv_2_bias: Tensor[(32), int32], %v15_conv_2_zero_x: Tensor[(1), int8], %v15_conv_2_zero_y: Tensor[(1), int8], %v15_conv_2_scale: Tensor[(32), float32], %v15_qadd_zero_x1: Tensor[(1), int8], %v15_qadd_zero_x2: Tensor[(1), int8], %v15_qadd_scale_x1: Tensor[(1), float32], %v15_qadd_scale_x2: Tensor[(1), float32], %v15_qadd_zero_y: Tensor[(1), int8], %v15_qadd_scale_y: Tensor[(1), float32], %v16_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v16_conv_0_bias: Tensor[(192), int32], %v16_conv_0_zero_x: Tensor[(1), int8], %v16_conv_0_zero_y: Tensor[(1), int8], %v16_conv_0_scale: Tensor[(192), float32], %v16_conv_1_weight: Tensor[(192, 1, 7, 7), int8], %v16_conv_1_bias: Tensor[(192), int32], %v16_conv_1_zero_x: Tensor[(1), int8], %v16_conv_1_zero_y: Tensor[(1), int8], %v16_conv_1_scale: Tensor[(192), float32], %v16_conv_2_weight: Tensor[(64, 192, 1, 1), int8], %v16_conv_2_bias: Tensor[(64), int32], %v16_conv_2_zero_x: Tensor[(1), int8], %v16_conv_2_zero_y: Tensor[(1), int8], %v16_conv_2_scale: Tensor[(64), float32], %v17_conv_0_weight: Tensor[(384, 64, 1, 1), int8], %v17_conv_0_bias: Tensor[(384), int32], %v17_conv_0_zero_x: Tensor[(1), int8], %v17_conv_0_zero_y: Tensor[(1), int8], %v17_conv_0_scale: Tensor[(384), float32], %v17_conv_1_weight: Tensor[(384, 1, 7, 7), int8], %v17_conv_1_bias: Tensor[(384), int32], %v17_conv_1_zero_x: Tensor[(1), int8], %v17_conv_1_zero_y: Tensor[(1), int8], %v17_conv_1_scale: Tensor[(384), float32], %v17_conv_2_weight: Tensor[(64, 384, 1, 1), int8], %v17_conv_2_bias: Tensor[(64), int32], %v17_conv_2_zero_x: Tensor[(1), int8], %v17_conv_2_zero_y: Tensor[(1), int8], %v17_conv_2_scale: Tensor[(64), float32], %v17_qadd_zero_x1: Tensor[(1), int8], %v17_qadd_zero_x2: Tensor[(1), int8], %v17_qadd_scale_x1: Tensor[(1), float32], %v17_qadd_scale_x2: Tensor[(1), float32], %v17_qadd_zero_y: Tensor[(1), int8], %v17_qadd_scale_y: Tensor[(1), float32], %v18_conv_0_weight: Tensor[(192, 64, 1, 1), int8], %v18_conv_0_bias: Tensor[(192), int32], %v18_conv_0_zero_x: Tensor[(1), int8], %v18_conv_0_zero_y: Tensor[(1), int8], %v18_conv_0_scale: Tensor[(192), float32], %v18_conv_1_weight: Tensor[(192, 1, 7, 7), int8], %v18_conv_1_bias: Tensor[(192), int32], %v18_conv_1_zero_x: Tensor[(1), int8], %v18_conv_1_zero_y: Tensor[(1), int8], %v18_conv_1_scale: Tensor[(192), float32], %v18_conv_2_weight: Tensor[(64, 192, 1, 1), int8], %v18_conv_2_bias: Tensor[(64), int32], %v18_conv_2_zero_x: Tensor[(1), int8], %v18_conv_2_zero_y: Tensor[(1), int8], %v18_conv_2_scale: Tensor[(64), float32], %v18_qadd_zero_x1: Tensor[(1), int8], %v18_qadd_zero_x2: Tensor[(1), int8], %v18_qadd_scale_x1: Tensor[(1), float32], %v18_qadd_scale_x2: Tensor[(1), float32], %v18_qadd_zero_y: Tensor[(1), int8], %v18_qadd_scale_y: Tensor[(1), float32], %v19_conv_0_weight: Tensor[(192, 64, 1, 1), int8], %v19_conv_0_bias: Tensor[(192), int32], %v19_conv_0_zero_x: Tensor[(1), int8], %v19_conv_0_zero_y: Tensor[(1), int8], %v19_conv_0_scale: Tensor[(192), float32], %v19_conv_1_weight: Tensor[(192, 1, 7, 7), int8], %v19_conv_1_bias: Tensor[(192), int32], %v19_conv_1_zero_x: Tensor[(1), int8], %v19_conv_1_zero_y: Tensor[(1), int8], %v19_conv_1_scale: Tensor[(192), float32], %v19_conv_2_weight: Tensor[(64, 192, 1, 1), int8], %v19_conv_2_bias: Tensor[(64), int32], %v19_conv_2_zero_x: Tensor[(1), int8], %v19_conv_2_zero_y: Tensor[(1), int8], %v19_conv_2_scale: Tensor[(64), float32], %v19_qadd_zero_x1: Tensor[(1), int8], %v19_qadd_zero_x2: Tensor[(1), int8], %v19_qadd_scale_x1: Tensor[(1), float32], %v19_qadd_scale_x2: Tensor[(1), float32], %v19_qadd_zero_y: Tensor[(1), int8], %v19_qadd_scale_y: Tensor[(1), float32], %v20_conv_0_weight: Tensor[(384, 64, 1, 1), int8], %v20_conv_0_bias: Tensor[(384), int32], %v20_conv_0_zero_x: Tensor[(1), int8], %v20_conv_0_zero_y: Tensor[(1), int8], %v20_conv_0_scale: Tensor[(384), float32], %v20_conv_1_weight: Tensor[(384, 1, 7, 7), int8], %v20_conv_1_bias: Tensor[(384), int32], %v20_conv_1_zero_x: Tensor[(1), int8], %v20_conv_1_zero_y: Tensor[(1), int8], %v20_conv_1_scale: Tensor[(384), float32], %v20_conv_2_weight: Tensor[(96, 384, 1, 1), int8], %v20_conv_2_bias: Tensor[(96), int32], %v20_conv_2_zero_x: Tensor[(1), int8], %v20_conv_2_zero_y: Tensor[(1), int8], %v20_conv_2_scale: Tensor[(96), float32], %v21_weight: Tensor[(10, 96, 1, 1), int8], %v21_bias: Tensor[(10), int32], %v21_zero_x: Tensor[(1), int8], %v21_zero_y: Tensor[(1), int8], %v21_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), float32], Tensor[(10, 96, 1, 1), float32], Tensor[(96), float32], Tensor[(384), float32], Tensor[(384), float32], Tensor[(384, 16, 1, 1), float32], Tensor[(64), int32], Tensor[(192), int32], Tensor[(192), float32], Tensor[(192, 16, 1, 1), float32], Tensor[(64), int32], Tensor[(192), int32], Tensor[(192), float32], Tensor[(192, 8, 1, 1), float32], Tensor[(64), int32], Tensor[(384), int32], Tensor[(384), int32], Tensor[(64), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(96), int32], Tensor[(96), int32], Tensor[(96, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(96), int32], Tensor[(96), float32], Tensor[(96, 8, 1, 1), float32]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1 = nn.mcutruncate(%0) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[1, 1, 1, 1], groups=16) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %3 = nn.mcutruncate(%2) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %5 = nn.mcutruncate(%4) /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 64, 64), int32] */;
  %7 = nn.mcutruncate(%6) /* ty=Tensor[(1, 24, 64, 64), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, strides=[2, 2], padding=[2, 2, 2, 2], groups=24) /* ty=Tensor[(1, 24, 32, 32), int32] */;
  %9 = nn.mcutruncate(%8) /* ty=Tensor[(1, 24, 32, 32), int8] */;
  %10 = nn.mcuconv2d(%9, %v2_conv_2_weight, %v2_conv_2_bias, %v2_conv_2_zero_x, %v2_conv_2_zero_y, %v2_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %11 = nn.mcutruncate(%10) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %13 = nn.mcutruncate(%12) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %14 = nn.mcuconv2d(%13, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %15 = nn.mcutruncate(%14) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %16 = nn.mcuconv2d(%15, %v3_conv_2_weight, %v3_conv_2_bias, %v3_conv_2_zero_x, %v3_conv_2_zero_y, %v3_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %17 = nn.mcutruncate(%16) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %18 = nn.mcuadd(%11, %17, %v3_qadd_zero_x1, %v3_qadd_zero_x2, %v3_qadd_scale_x1, %v3_qadd_scale_x2, %v3_qadd_zero_y, %v3_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %19 = nn.mcutruncate(%18) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %20 = nn.mcuconv2d(%19, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %21 = nn.mcutruncate(%20) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %22 = nn.mcuconv2d(%21, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %23 = nn.mcutruncate(%22) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %24 = nn.mcuconv2d(%23, %v4_conv_2_weight, %v4_conv_2_bias, %v4_conv_2_zero_x, %v4_conv_2_zero_y, %v4_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %25 = nn.mcutruncate(%24) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %26 = nn.mcuconv2d(%25, %v5_conv_0_weight, %v5_conv_0_bias, %v5_conv_0_zero_x, %v5_conv_0_zero_y, %v5_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %27 = nn.mcutruncate(%26) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %28 = nn.mcuconv2d(%27, %v5_conv_1_weight, %v5_conv_1_bias, %v5_conv_1_zero_x, %v5_conv_1_zero_y, %v5_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %29 = nn.mcutruncate(%28) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %30 = nn.mcuconv2d(%29, %v5_conv_2_weight, %v5_conv_2_bias, %v5_conv_2_zero_x, %v5_conv_2_zero_y, %v5_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %31 = nn.mcutruncate(%30) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %32 = nn.mcuadd(%25, %31, %v5_qadd_zero_x1, %v5_qadd_zero_x2, %v5_qadd_scale_x1, %v5_qadd_scale_x2, %v5_qadd_zero_y, %v5_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %33 = nn.mcutruncate(%32) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %34 = nn.mcuconv2d(%33, %v6_conv_0_weight, %v6_conv_0_bias, %v6_conv_0_zero_x, %v6_conv_0_zero_y, %v6_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %35 = nn.mcutruncate(%34) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %36 = nn.mcuconv2d(%35, %v6_conv_1_weight, %v6_conv_1_bias, %v6_conv_1_zero_x, %v6_conv_1_zero_y, %v6_conv_1_scale, padding=[2, 2, 2, 2], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %37 = nn.mcutruncate(%36) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %38 = nn.mcuconv2d(%37, %v6_conv_2_weight, %v6_conv_2_bias, %v6_conv_2_zero_x, %v6_conv_2_zero_y, %v6_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %39 = nn.mcutruncate(%38) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %40 = nn.mcuadd(%33, %39, %v6_qadd_zero_x1, %v6_qadd_zero_x2, %v6_qadd_scale_x1, %v6_qadd_scale_x2, %v6_qadd_zero_y, %v6_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %41 = nn.mcutruncate(%40) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %42 = nn.mcuconv2d(%41, %v7_conv_0_weight, %v7_conv_0_bias, %v7_conv_0_zero_x, %v7_conv_0_zero_y, %v7_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %43 = nn.mcutruncate(%42) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %44 = nn.mcuconv2d(%43, %v7_conv_1_weight, %v7_conv_1_bias, %v7_conv_1_zero_x, %v7_conv_1_zero_y, %v7_conv_1_scale, padding=[2, 2, 2, 2], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %45 = nn.mcutruncate(%44) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %46 = nn.mcuconv2d(%45, %v7_conv_2_weight, %v7_conv_2_bias, %v7_conv_2_zero_x, %v7_conv_2_zero_y, %v7_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %47 = nn.mcutruncate(%46) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %48 = nn.mcuadd(%41, %47, %v7_qadd_zero_x1, %v7_qadd_zero_x2, %v7_qadd_scale_x1, %v7_qadd_scale_x2, %v7_qadd_zero_y, %v7_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %49 = nn.mcutruncate(%48) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %50 = nn.mcuconv2d(%49, %v8_conv_0_weight, %v8_conv_0_bias, %v8_conv_0_zero_x, %v8_conv_0_zero_y, %v8_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %51 = nn.mcutruncate(%50) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %52 = nn.mcuconv2d(%51, %v8_conv_1_weight, %v8_conv_1_bias, %v8_conv_1_zero_x, %v8_conv_1_zero_y, %v8_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %53 = nn.mcutruncate(%52) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %54 = nn.mcuconv2d(%53, %v8_conv_2_weight, %v8_conv_2_bias, %v8_conv_2_zero_x, %v8_conv_2_zero_y, %v8_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %55 = nn.mcutruncate(%54) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %56 = nn.mcuconv2d(%55, %v9_conv_0_weight, %v9_conv_0_bias, %v9_conv_0_zero_x, %v9_conv_0_zero_y, %v9_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %57 = nn.mcutruncate(%56) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %58 = nn.mcuconv2d(%57, %v9_conv_1_weight, %v9_conv_1_bias, %v9_conv_1_zero_x, %v9_conv_1_zero_y, %v9_conv_1_scale, padding=[2, 2, 2, 2], groups=72) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %59 = nn.mcutruncate(%58) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %60 = nn.mcuconv2d(%59, %v9_conv_2_weight, %v9_conv_2_bias, %v9_conv_2_zero_x, %v9_conv_2_zero_y, %v9_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %61 = nn.mcutruncate(%60) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %62 = nn.mcuadd(%55, %61, %v9_qadd_zero_x1, %v9_qadd_zero_x2, %v9_qadd_scale_x1, %v9_qadd_scale_x2, %v9_qadd_zero_y, %v9_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %63 = nn.mcutruncate(%62) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %64 = nn.mcuconv2d(%63, %v10_conv_0_weight, %v10_conv_0_bias, %v10_conv_0_zero_x, %v10_conv_0_zero_y, %v10_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %65 = nn.mcutruncate(%64) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %66 = nn.mcuconv2d(%65, %v10_conv_1_weight, %v10_conv_1_bias, %v10_conv_1_zero_x, %v10_conv_1_zero_y, %v10_conv_1_scale, padding=[2, 2, 2, 2], groups=72) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %67 = nn.mcutruncate(%66) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %68 = nn.mcuconv2d(%67, %v10_conv_2_weight, %v10_conv_2_bias, %v10_conv_2_zero_x, %v10_conv_2_zero_y, %v10_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %69 = nn.mcutruncate(%68) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %70 = nn.mcuadd(%63, %69, %v10_qadd_zero_x1, %v10_qadd_zero_x2, %v10_qadd_scale_x1, %v10_qadd_scale_x2, %v10_qadd_zero_y, %v10_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %71 = nn.mcutruncate(%70) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %72 = nn.mcuconv2d(%71, %v11_conv_0_weight, %v11_conv_0_bias, %v11_conv_0_zero_x, %v11_conv_0_zero_y, %v11_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %73 = nn.mcutruncate(%72) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %74 = nn.mcuconv2d(%73, %v11_conv_1_weight, %v11_conv_1_bias, %v11_conv_1_zero_x, %v11_conv_1_zero_y, %v11_conv_1_scale, padding=[2, 2, 2, 2], groups=72) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %75 = nn.mcutruncate(%74) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %76 = nn.mcuconv2d(%75, %v11_conv_2_weight, %v11_conv_2_bias, %v11_conv_2_zero_x, %v11_conv_2_zero_y, %v11_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %77 = nn.mcutruncate(%76) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %78 = nn.mcuadd(%71, %77, %v11_qadd_zero_x1, %v11_qadd_zero_x2, %v11_qadd_scale_x1, %v11_qadd_scale_x2, %v11_qadd_zero_y, %v11_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %79 = nn.mcutruncate(%78) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %80 = nn.mcuconv2d(%79, %v12_conv_0_weight, %v12_conv_0_bias, %v12_conv_0_zero_x, %v12_conv_0_zero_y, %v12_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %81 = nn.mcutruncate(%80) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %82 = nn.mcuconv2d(%81, %v12_conv_1_weight, %v12_conv_1_bias, %v12_conv_1_zero_x, %v12_conv_1_zero_y, %v12_conv_1_scale, padding=[2, 2, 2, 2], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %83 = nn.mcutruncate(%82) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %84 = nn.mcuconv2d(%83, %v12_conv_2_weight, %v12_conv_2_bias, %v12_conv_2_zero_x, %v12_conv_2_zero_y, %v12_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %85 = nn.mcutruncate(%84) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %86 = nn.mcuconv2d(%85, %v13_conv_0_weight, %v13_conv_0_bias, %v13_conv_0_zero_x, %v13_conv_0_zero_y, %v13_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %87 = nn.mcutruncate(%86) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %88 = nn.mcuconv2d(%87, %v13_conv_1_weight, %v13_conv_1_bias, %v13_conv_1_zero_x, %v13_conv_1_zero_y, %v13_conv_1_scale, padding=[2, 2, 2, 2], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %89 = nn.mcutruncate(%88) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %90 = nn.mcuconv2d(%89, %v13_conv_2_weight, %v13_conv_2_bias, %v13_conv_2_zero_x, %v13_conv_2_zero_y, %v13_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %91 = nn.mcutruncate(%90) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %92 = nn.mcuadd(%85, %91, %v13_qadd_zero_x1, %v13_qadd_zero_x2, %v13_qadd_scale_x1, %v13_qadd_scale_x2, %v13_qadd_zero_y, %v13_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %93 = nn.mcutruncate(%92) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %94 = nn.mcuconv2d(%93, %v14_conv_0_weight, %v14_conv_0_bias, %v14_conv_0_zero_x, %v14_conv_0_zero_y, %v14_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %95 = nn.mcutruncate(%94) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %96 = nn.mcuconv2d(%95, %v14_conv_1_weight, %v14_conv_1_bias, %v14_conv_1_zero_x, %v14_conv_1_zero_y, %v14_conv_1_scale, padding=[2, 2, 2, 2], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %97 = nn.mcutruncate(%96) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %98 = nn.mcuconv2d(%97, %v14_conv_2_weight, %v14_conv_2_bias, %v14_conv_2_zero_x, %v14_conv_2_zero_y, %v14_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %99 = nn.mcutruncate(%98) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %100 = nn.mcuadd(%93, %99, %v14_qadd_zero_x1, %v14_qadd_zero_x2, %v14_qadd_scale_x1, %v14_qadd_scale_x2, %v14_qadd_zero_y, %v14_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %101 = nn.mcutruncate(%100) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %102 = nn.mcuconv2d(%101, %v15_conv_0_weight, %v15_conv_0_bias, %v15_conv_0_zero_x, %v15_conv_0_zero_y, %v15_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %103 = nn.mcutruncate(%102) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %104 = nn.mcuconv2d(%103, %v15_conv_1_weight, %v15_conv_1_bias, %v15_conv_1_zero_x, %v15_conv_1_zero_y, %v15_conv_1_scale, padding=[2, 2, 2, 2], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %105 = nn.mcutruncate(%104) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %106 = nn.mcuconv2d(%105, %v15_conv_2_weight, %v15_conv_2_bias, %v15_conv_2_zero_x, %v15_conv_2_zero_y, %v15_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %107 = nn.mcutruncate(%106) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %108 = nn.mcuadd(%101, %107, %v15_qadd_zero_x1, %v15_qadd_zero_x2, %v15_qadd_scale_x1, %v15_qadd_scale_x2, %v15_qadd_zero_y, %v15_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %109 = nn.mcutruncate(%108) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %110 = nn.mcuconv2d(%109, %v16_conv_0_weight, %v16_conv_0_bias, %v16_conv_0_zero_x, %v16_conv_0_zero_y, %v16_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %111 = nn.mcutruncate(%110) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %112 = nn.mcuconv2d(%111, %v16_conv_1_weight, %v16_conv_1_bias, %v16_conv_1_zero_x, %v16_conv_1_zero_y, %v16_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=192) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %113 = nn.mcutruncate(%112) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %114 = nn.mcuconv2d(%113, %v16_conv_2_weight, %v16_conv_2_bias, %v16_conv_2_zero_x, %v16_conv_2_zero_y, %v16_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %115 = nn.mcutruncate(%114) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %116 = nn.mcuconv2d(%115, %v17_conv_0_weight, %v17_conv_0_bias, %v17_conv_0_zero_x, %v17_conv_0_zero_y, %v17_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %117 = nn.mcutruncate(%116) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %118 = nn.mcuconv2d(%117, %v17_conv_1_weight, %v17_conv_1_bias, %v17_conv_1_zero_x, %v17_conv_1_zero_y, %v17_conv_1_scale, padding=[3, 3, 3, 3], groups=384) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %119 = nn.mcutruncate(%118) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %120 = nn.mcuconv2d(%119, %v17_conv_2_weight, %v17_conv_2_bias, %v17_conv_2_zero_x, %v17_conv_2_zero_y, %v17_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %121 = nn.mcutruncate(%120) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %122 = nn.mcuadd(%115, %121, %v17_qadd_zero_x1, %v17_qadd_zero_x2, %v17_qadd_scale_x1, %v17_qadd_scale_x2, %v17_qadd_zero_y, %v17_qadd_scale_y, axis=0) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %123 = nn.mcutruncate(%122) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %124 = nn.mcuconv2d(%123, %v18_conv_0_weight, %v18_conv_0_bias, %v18_conv_0_zero_x, %v18_conv_0_zero_y, %v18_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %125 = nn.mcutruncate(%124) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %126 = nn.mcuconv2d(%125, %v18_conv_1_weight, %v18_conv_1_bias, %v18_conv_1_zero_x, %v18_conv_1_zero_y, %v18_conv_1_scale, padding=[3, 3, 3, 3], groups=192) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %127 = nn.mcutruncate(%126) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %128 = nn.mcuconv2d(%127, %v18_conv_2_weight, %v18_conv_2_bias, %v18_conv_2_zero_x, %v18_conv_2_zero_y, %v18_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %129 = nn.mcutruncate(%128) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %130 = nn.mcuadd(%123, %129, %v18_qadd_zero_x1, %v18_qadd_zero_x2, %v18_qadd_scale_x1, %v18_qadd_scale_x2, %v18_qadd_zero_y, %v18_qadd_scale_y, axis=0) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %131 = nn.mcutruncate(%130) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %132 = nn.mcuconv2d(%131, %v19_conv_0_weight, %v19_conv_0_bias, %v19_conv_0_zero_x, %v19_conv_0_zero_y, %v19_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %133 = nn.mcutruncate(%132) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %134 = nn.mcuconv2d(%133, %v19_conv_1_weight, %v19_conv_1_bias, %v19_conv_1_zero_x, %v19_conv_1_zero_y, %v19_conv_1_scale, padding=[3, 3, 3, 3], groups=192) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %135 = nn.mcutruncate(%134) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %136 = nn.mcuconv2d(%135, %v19_conv_2_weight, %v19_conv_2_bias, %v19_conv_2_zero_x, %v19_conv_2_zero_y, %v19_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %137 = nn.mcutruncate(%136) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %138 = nn.mcuadd(%131, %137, %v19_qadd_zero_x1, %v19_qadd_zero_x2, %v19_qadd_scale_x1, %v19_qadd_scale_x2, %v19_qadd_zero_y, %v19_qadd_scale_y, axis=0) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %139 = nn.mcutruncate(%138) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %140 = nn.mcuconv2d(%139, %v20_conv_0_weight, %v20_conv_0_bias, %v20_conv_0_zero_x, %v20_conv_0_zero_y, %v20_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %141 = nn.mcutruncate(%140) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %142 = nn.mcuconv2d(%141, %v20_conv_1_weight, %v20_conv_1_bias, %v20_conv_1_zero_x, %v20_conv_1_zero_y, %v20_conv_1_scale, padding=[3, 3, 3, 3], groups=384) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %143 = nn.mcutruncate(%142) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %144 = nn.mcuconv2d(%143, %v20_conv_2_weight, %v20_conv_2_bias, %v20_conv_2_zero_x, %v20_conv_2_zero_y, %v20_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %145 = nn.mcutruncate(%144) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %146 = mcumean(%145, axis=[2, 3], keepdims=True) /* ty=Tensor[(1, 96, 1, 1), int8] */;
  %147 = nn.mcuconv2d(%146, %v21_weight, %v21_bias, %v21_zero_x, %v21_zero_y, %v21_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %148 = nn.mcutruncate(%147) /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %149 = reshape(%148, newshape=[0, 0]) /* ty=Tensor[(1, 10), int8] */;
  %150 = cast(%149, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %151 = nn.log_softmax(%150) /* ty=Tensor[(1, 10), float32] */;
  %152 = cast(%147, dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %153 = greater_equal(%152, -128f /* ty=float32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %154 = less_equal(%152, 127f /* ty=float32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %155 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %156 = negative(%155) /* ty=float32 */;
  %157 = multiply(%156, %label) /* ty=Tensor[(1, 10), float32] */;
  %158 = sum(%157, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %159 = exp(%151) /* ty=Tensor[(1, 10), float32] */;
  %160 = multiply(%158, %159) /* ty=Tensor[(1, 10), float32] */;
  %161 = subtract(%157, %160) /* ty=Tensor[(1, 10), float32] */;
  %162 = multiply(%153, %154) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %163 = reshape(%161, newshape=[1, 10, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %164 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %165 = where(%162, %163, %164) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %166 = reshape(%v21_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %167 = multiply(%165, %166) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %168 = cast(%146, dtype="float32") /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %169 = tile(%167, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 960, 1, 1), float32] */;
  %170 = reshape(%168, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %171 = reshape(%169, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(960, 1, 1, 1), float32] */;
  %172 = nn.conv2d(%170, %171, padding=[0, 0, 0, 0], groups=96) /* ty=Tensor[(1, 960, 1, 1), float32] */;
  %173 = reshape(%172, newshape=[1, 96, 10, 1, 1]) /* ty=Tensor[(1, 96, 10, 1, 1), float32] */;
  %174 = sum(%173, axis=[0]) /* ty=Tensor[(96, 10, 1, 1), float32] */;
  %175 = cast(%144, dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %176 = greater_equal(%175, -128f /* ty=float32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %177 = less_equal(%175, 127f /* ty=float32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %178 = cast(%v21_weight, dtype="float32") /* ty=Tensor[(10, 96, 1, 1), float32] */;
  %179 = nn.conv2d_transpose(%167, %178, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %180 = multiply(%179, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %181 = ones(shape=[1, 96, 4, 4], dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %182 = multiply(%176, %177) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %183 = multiply(%180, %181) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %184 = zeros(shape=[1, 96, 4, 4], dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %185 = where(%182, %183, %184) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %186 = reshape(%v20_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %187 = multiply(%185, %186) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %188 = cast(%142, dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %189 = greater_equal(%188, -128f /* ty=float32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %190 = less_equal(%188, 127f /* ty=float32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %191 = cast(%v20_conv_2_weight, dtype="float32") /* ty=Tensor[(96, 384, 1, 1), float32] */;
  %192 = multiply(%189, %190) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %193 = nn.conv2d_transpose(%187, %191, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %194 = zeros(shape=[1, 384, 4, 4], dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %195 = where(%192, %193, %194) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %196 = reshape(%v20_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %197 = multiply(%195, %196) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %198 = cast(%140, dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %199 = greater_equal(%198, -128f /* ty=float32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %200 = less_equal(%198, 127f /* ty=float32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %201 = cast(%v20_conv_1_weight, dtype="float32") /* ty=Tensor[(384, 1, 7, 7), float32] */;
  %202 = multiply(%199, %200) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %203 = nn.conv2d_transpose(%197, %201, channels=384, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %204 = zeros(shape=[1, 384, 4, 4], dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %205 = where(%202, %203, %204) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %206 = reshape(%v20_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %207 = multiply(%205, %206) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %208 = cast(%139, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %209 = strided_slice(%208, begin=[0, 0, 0, 0], end=[1, 16, 4, 4], strides=[1], axes=None) /* ty=Tensor[(1, 16, 4, 4), float32] */;
  %210 = tile(%207, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 6144, 4, 4), float32] */;
  %211 = reshape(%209, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 4, 4), float32] */;
  %212 = reshape(%210, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 4, 4), float32] */;
  %213 = nn.conv2d(%211, %212, padding=[0, 0, 0, 0], groups=16) /* ty=Tensor[(1, 6144, 1, 1), float32] */;
  %214 = reshape(%213, newshape=[1, 16, 384, 1, 1]) /* ty=Tensor[(1, 16, 384, 1, 1), float32] */;
  %215 = sum(%214, axis=[0]) /* ty=Tensor[(16, 384, 1, 1), float32] */;
  %216 = greater_equal(%136, -128 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %217 = less_equal(%136, 127 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %218 = greater_equal(%138, meta[relay.Constant][0] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %219 = less_equal(%138, meta[relay.Constant][1] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %220 = cast(%v20_conv_0_weight, dtype="float32") /* ty=Tensor[(384, 64, 1, 1), float32] */;
  %221 = multiply(%218, %219) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %222 = nn.conv2d_transpose(%207, %220, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %223 = zeros(shape=[1, 64, 4, 4], dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %224 = where(%221, %222, %223) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %225 = reshape(%v19_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %226 = divide(%224, %225) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %227 = reshape(%v19_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %228 = multiply(%216, %217) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %229 = multiply(%226, %227) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %230 = zeros(shape=[1, 64, 4, 4], dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %231 = where(%228, %229, %230) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %232 = cast(%231, dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %233 = greater_equal(%134, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %234 = less_equal(%134, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %235 = cast(%v19_conv_2_weight, dtype="float32") /* ty=Tensor[(64, 192, 1, 1), float32] */;
  %236 = nn.conv2d_transpose(%231, %235, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %237 = abs(%236) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %238 = max(%237, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %239 = divide(%238, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %240 = divide(%236, %239) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %241 = multiply(%233, %234) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %242 = cast(%240, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %243 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %244 = where(%241, %242, %243) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %245 = cast(%244, dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %246 = greater_equal(%132, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %247 = less_equal(%132, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %248 = nn.conv2d_transpose(%244, %v19_conv_1_weight, channels=192, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %249 = abs(%248) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %250 = max(%249, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %251 = divide(%250, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %252 = divide(%248, %251) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %253 = multiply(%246, %247) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %254 = cast(%252, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %255 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %256 = where(%253, %254, %255) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %257 = cast(%256, dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %258 = reshape(%v19_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %259 = multiply(%257, %258) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %260 = cast(%131, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %261 = strided_slice(%260, begin=[0, 0, 0, 0], end=[1, 16, 4, 4], strides=[1], axes=None) /* ty=Tensor[(1, 16, 4, 4), float32] */;
  %262 = tile(%259, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 3072, 4, 4), float32] */;
  %263 = reshape(%261, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 4, 4), float32] */;
  %264 = reshape(%262, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3072, 1, 4, 4), float32] */;
  %265 = nn.conv2d(%263, %264, padding=[0, 0, 0, 0], groups=16) /* ty=Tensor[(1, 3072, 1, 1), float32] */;
  %266 = reshape(%265, newshape=[1, 16, 192, 1, 1]) /* ty=Tensor[(1, 16, 192, 1, 1), float32] */;
  %267 = sum(%266, axis=[0]) /* ty=Tensor[(16, 192, 1, 1), float32] */;
  %268 = greater_equal(%128, -128 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %269 = less_equal(%128, 127 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %270 = greater_equal(%130, meta[relay.Constant][2] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %271 = less_equal(%130, meta[relay.Constant][3] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %272 = cast(%v19_conv_0_weight, dtype="float32") /* ty=Tensor[(192, 64, 1, 1), float32] */;
  %273 = multiply(%270, %271) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %274 = nn.conv2d_transpose(%259, %272, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %275 = zeros(shape=[1, 64, 4, 4], dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %276 = where(%273, %274, %275) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %277 = reshape(%v18_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %278 = divide(%276, %277) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %279 = reshape(%v18_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %280 = multiply(%268, %269) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %281 = multiply(%278, %279) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %282 = zeros(shape=[1, 64, 4, 4], dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %283 = where(%280, %281, %282) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %284 = cast(%283, dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %285 = greater_equal(%126, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %286 = less_equal(%126, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %287 = cast(%v18_conv_2_weight, dtype="float32") /* ty=Tensor[(64, 192, 1, 1), float32] */;
  %288 = nn.conv2d_transpose(%283, %287, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %289 = abs(%288) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %290 = max(%289, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %291 = divide(%290, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %292 = divide(%288, %291) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %293 = multiply(%285, %286) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %294 = cast(%292, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %295 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %296 = where(%293, %294, %295) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %297 = cast(%296, dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %298 = greater_equal(%124, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %299 = less_equal(%124, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %300 = nn.conv2d_transpose(%296, %v18_conv_1_weight, channels=192, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %301 = abs(%300) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %302 = max(%301, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %303 = divide(%302, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %304 = divide(%300, %303) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %305 = multiply(%298, %299) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %306 = cast(%304, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %307 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %308 = where(%305, %306, %307) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %309 = cast(%308, dtype="float32") /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %310 = reshape(%v18_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %311 = multiply(%309, %310) /* ty=Tensor[(1, 192, 4, 4), float32] */;
  %312 = cast(%123, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %313 = strided_slice(%312, begin=[0, 0, 0, 0], end=[1, 8, 4, 4], strides=[1], axes=None) /* ty=Tensor[(1, 8, 4, 4), float32] */;
  %314 = tile(%311, reps=[1, 8, 1, 1]) /* ty=Tensor[(1, 1536, 4, 4), float32] */;
  %315 = reshape(%313, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 8, 4, 4), float32] */;
  %316 = reshape(%314, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1536, 1, 4, 4), float32] */;
  %317 = nn.conv2d(%315, %316, padding=[0, 0, 0, 0], groups=8) /* ty=Tensor[(1, 1536, 1, 1), float32] */;
  %318 = reshape(%317, newshape=[1, 8, 192, 1, 1]) /* ty=Tensor[(1, 8, 192, 1, 1), float32] */;
  %319 = sum(%318, axis=[0]) /* ty=Tensor[(8, 192, 1, 1), float32] */;
  %320 = greater_equal(%120, -128 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %321 = less_equal(%120, 127 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %322 = greater_equal(%122, meta[relay.Constant][4] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %323 = less_equal(%122, meta[relay.Constant][5] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %324 = cast(%v18_conv_0_weight, dtype="float32") /* ty=Tensor[(192, 64, 1, 1), float32] */;
  %325 = multiply(%322, %323) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %326 = nn.conv2d_transpose(%311, %324, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %327 = zeros(shape=[1, 64, 4, 4], dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %328 = where(%325, %326, %327) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %329 = reshape(%v17_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %330 = divide(%328, %329) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %331 = reshape(%v17_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %332 = multiply(%320, %321) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %333 = multiply(%330, %331) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %334 = zeros(shape=[1, 64, 4, 4], dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %335 = where(%332, %333, %334) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %336 = cast(%335, dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %337 = greater_equal(%118, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %338 = less_equal(%118, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %339 = cast(%v17_conv_2_weight, dtype="float32") /* ty=Tensor[(64, 384, 1, 1), float32] */;
  %340 = nn.conv2d_transpose(%335, %339, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %341 = abs(%340) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %342 = max(%341, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %343 = divide(%342, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %344 = divide(%340, %343) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %345 = multiply(%337, %338) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %346 = cast(%344, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %347 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %348 = where(%345, %346, %347) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %349 = cast(%348, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %350 = greater_equal(%116, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %351 = less_equal(%116, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %352 = nn.conv2d_transpose(%348, %v17_conv_1_weight, channels=384, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=384, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %353 = abs(%352) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %354 = max(%353, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %355 = divide(%354, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %356 = divide(%352, %355) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %357 = multiply(%350, %351) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %358 = cast(%356, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %359 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %360 = where(%357, %358, %359) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %361 = cast(%360, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %362 = greater_equal(%114, -128 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %363 = less_equal(%114, 127 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %364 = nn.conv2d_transpose(%360, %v17_conv_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %365 = abs(%364) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %366 = max(%365, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %367 = divide(%366, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %368 = divide(%364, %367) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %369 = multiply(%362, %363) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %370 = cast(%368, dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %371 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %372 = where(%369, %370, %371) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %373 = cast(%372, dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %374 = greater_equal(%112, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %375 = less_equal(%112, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %376 = nn.conv2d_transpose(%372, %v16_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %377 = abs(%376) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %378 = max(%377, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %379 = divide(%378, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %380 = divide(%376, %379) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %381 = multiply(%374, %375) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %382 = cast(%380, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %383 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %384 = where(%381, %382, %383) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %385 = cast(%384, dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %386 = greater_equal(%110, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %387 = less_equal(%110, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %388 = nn.conv2d_transpose(%384, %v16_conv_1_weight, channels=192, kernel_size=[7, 7], strides=[2, 2], output_padding=[1, 1], padding=[3, 3, 3, 3], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %389 = abs(%388) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %390 = max(%389, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %391 = divide(%390, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %392 = divide(%388, %391) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %393 = multiply(%386, %387) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %394 = cast(%392, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %395 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %396 = where(%393, %394, %395) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %397 = cast(%396, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %398 = tile(%396, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 8, 8), int8] */;
  %399 = reshape(%109, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %400 = reshape(%398, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 8, 8), int8] */;
  %401 = nn.conv2d(%399, %400, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %402 = reshape(%401, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), int32] */;
  %403 = sum(%402, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %404 = transpose(%403, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %405 = abs(%404) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %406 = max(%405, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %407 = divide(%406, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %408 = divide(%404, %407) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %409 = greater_equal(%106, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %410 = less_equal(%106, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %411 = greater_equal(%108, meta[relay.Constant][6] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %412 = less_equal(%108, meta[relay.Constant][7] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %413 = nn.conv2d_transpose(%396, %v16_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %414 = abs(%413) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %415 = max(%414, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %416 = divide(%415, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %417 = divide(%413, %416) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %418 = multiply(%411, %412) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %419 = cast(%417, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %420 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %421 = where(%418, %419, %420) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %422 = cast(%421, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %423 = reshape(%v15_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %424 = divide(%422, %423) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %425 = reshape(%v15_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %426 = multiply(%424, %425) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %427 = multiply(%409, %410) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %428 = cast(%426, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %429 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %430 = where(%427, %428, %429) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %431 = cast(%430, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %432 = greater_equal(%104, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %433 = less_equal(%104, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %434 = nn.conv2d_transpose(%430, %v15_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %435 = abs(%434) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %436 = max(%435, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %437 = divide(%436, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %438 = divide(%434, %437) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %439 = multiply(%432, %433) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %440 = cast(%438, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %441 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %442 = where(%439, %440, %441) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %443 = cast(%442, dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %444 = greater_equal(%102, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %445 = less_equal(%102, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %446 = nn.conv2d_transpose(%442, %v15_conv_1_weight, channels=96, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=96, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %447 = abs(%446) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %448 = max(%447, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %449 = divide(%448, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %450 = divide(%446, %449) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %451 = multiply(%444, %445) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %452 = cast(%450, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %453 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %454 = where(%451, %452, %453) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %455 = cast(%454, dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %456 = tile(%454, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 3072, 8, 8), int8] */;
  %457 = reshape(%101, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %458 = reshape(%456, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3072, 1, 8, 8), int8] */;
  %459 = nn.conv2d(%457, %458, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* ty=Tensor[(1, 3072, 1, 1), int32] */;
  %460 = reshape(%459, newshape=[1, 32, 96, 1, 1]) /* ty=Tensor[(1, 32, 96, 1, 1), int32] */;
  %461 = sum(%460, axis=[0]) /* ty=Tensor[(32, 96, 1, 1), int32] */;
  %462 = transpose(%461, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %463 = abs(%462) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %464 = max(%463, axis=[1], keepdims=True) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %465 = divide(%464, 127 /* ty=int32 */) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %466 = divide(%462, %465) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %467 = greater_equal(%98, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %468 = less_equal(%98, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %469 = greater_equal(%100, meta[relay.Constant][8] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %470 = less_equal(%100, meta[relay.Constant][9] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %471 = nn.conv2d_transpose(%454, %v15_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %472 = abs(%471) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %473 = max(%472, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %474 = divide(%473, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %475 = divide(%471, %474) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %476 = multiply(%469, %470) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %477 = cast(%475, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %478 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %479 = where(%476, %477, %478) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %480 = cast(%479, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %481 = reshape(%v14_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %482 = divide(%480, %481) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %483 = reshape(%v14_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %484 = multiply(%482, %483) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %485 = multiply(%467, %468) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %486 = cast(%484, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %487 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %488 = where(%485, %486, %487) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %489 = cast(%488, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %490 = greater_equal(%96, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %491 = less_equal(%96, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %492 = nn.conv2d_transpose(%488, %v14_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %493 = abs(%492) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %494 = max(%493, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %495 = divide(%494, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %496 = divide(%492, %495) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %497 = multiply(%490, %491) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %498 = cast(%496, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %499 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %500 = where(%497, %498, %499) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %501 = cast(%500, dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %502 = greater_equal(%94, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %503 = less_equal(%94, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %504 = nn.conv2d_transpose(%500, %v14_conv_1_weight, channels=96, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=96, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %505 = abs(%504) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %506 = max(%505, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %507 = divide(%506, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %508 = divide(%504, %507) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %509 = multiply(%502, %503) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %510 = cast(%508, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %511 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %512 = where(%509, %510, %511) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %513 = cast(%512, dtype="float32") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %514 = reshape(%v14_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %515 = multiply(%513, %514) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %516 = cast(%93, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %517 = strided_slice(%516, begin=[0, 0, 0, 0], end=[1, 8, 8, 8], strides=[1], axes=None) /* ty=Tensor[(1, 8, 8, 8), float32] */;
  %518 = tile(%515, reps=[1, 8, 1, 1]) /* ty=Tensor[(1, 768, 8, 8), float32] */;
  %519 = reshape(%517, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 8, 8, 8), float32] */;
  %520 = reshape(%518, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 8, 8), float32] */;
  %521 = nn.conv2d(%519, %520, padding=[0, 0, 0, 0], groups=8) /* ty=Tensor[(1, 768, 1, 1), float32] */;
  %522 = reshape(%521, newshape=[1, 8, 96, 1, 1]) /* ty=Tensor[(1, 8, 96, 1, 1), float32] */;
  %523 = sum(%522, axis=[0]) /* ty=Tensor[(8, 96, 1, 1), float32] */;
  %524 = nn.cross_entropy_with_logits(%151, %label) /* ty=float32 */;
  %525 = sum(%167, axis=[1], exclude=True) /* ty=Tensor[(10), float32] */;
  %526 = transpose(%174, axes=[1, 0, 2, 3]) /* ty=Tensor[(10, 96, 1, 1), float32] */;
  %527 = sum(%187, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %528 = sum(%197, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %529 = sum(%207, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %530 = transpose(%215, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 16, 1, 1), float32] */;
  %531 = sum(%232, axis=[1], exclude=True) /* ty=Tensor[(64), int32] */;
  %532 = sum(%245, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %533 = sum(%259, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %534 = transpose(%267, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 16, 1, 1), float32] */;
  %535 = sum(%284, axis=[1], exclude=True) /* ty=Tensor[(64), int32] */;
  %536 = sum(%297, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %537 = sum(%311, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %538 = transpose(%319, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 8, 1, 1), float32] */;
  %539 = sum(%336, axis=[1], exclude=True) /* ty=Tensor[(64), int32] */;
  %540 = sum(%349, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %541 = sum(%361, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %542 = sum(%373, axis=[1], exclude=True) /* ty=Tensor[(64), int32] */;
  %543 = sum(%385, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %544 = sum(%397, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %545 = cast(%408, dtype="int8") /* ty=Tensor[(192, 32, 1, 1), int8] */;
  %546 = sum(%431, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %547 = sum(%443, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %548 = sum(%455, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %549 = cast(%466, dtype="int8") /* ty=Tensor[(96, 32, 1, 1), int8] */;
  %550 = sum(%489, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %551 = sum(%501, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %552 = sum(%515, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %553 = transpose(%523, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 8, 1, 1), float32] */;
  (%524, %525, %526, %527, %528, %529, %530, %531, %532, %533, %534, %535, %536, %537, %538, %539, %540, %541, %542, %543, %544, %545, %546, %547, %548, %549, %550, %551, %552, %553)
}

