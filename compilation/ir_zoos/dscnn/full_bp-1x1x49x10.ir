def @main(%input: Tensor[(1, 1, 49, 10), int8], %v0_weight: Tensor[(64, 1, 3, 3), int8], %v0_bias: Tensor[(64), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(64), float32], %v1_conv_0_weight: Tensor[(64, 1, 7, 7), int8], %v1_conv_0_bias: Tensor[(64), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(64), float32], %v1_conv_1_weight: Tensor[(64, 64, 1, 1), int8], %v1_conv_1_bias: Tensor[(64), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(64), float32], %v2_conv_0_weight: Tensor[(64, 1, 3, 3), int8], %v2_conv_0_bias: Tensor[(64), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(64), float32], %v2_conv_1_weight: Tensor[(64, 64, 1, 1), int8], %v2_conv_1_bias: Tensor[(64), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(64), float32], %v3_conv_0_weight: Tensor[(64, 1, 3, 3), int8], %v3_conv_0_bias: Tensor[(64), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(64), float32], %v3_conv_1_weight: Tensor[(64, 64, 1, 1), int8], %v3_conv_1_bias: Tensor[(64), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(64), float32], %v4_conv_0_weight: Tensor[(64, 1, 3, 3), int8], %v4_conv_0_bias: Tensor[(64), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(64), float32], %v4_conv_1_weight: Tensor[(64, 64, 1, 1), int8], %v4_conv_1_bias: Tensor[(64), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(64), float32], %v5_weight: Tensor[(10, 64, 1, 1), int8], %v5_bias: Tensor[(10), int32], %v5_zero_x: Tensor[(1), int8], %v5_zero_y: Tensor[(1), int8], %v5_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), float32], Tensor[(10, 64, 1, 1), float32], Tensor[(64), float32], Tensor[(64, 64, 1, 1), float32], Tensor[(64), float32], Tensor[(64, 1, 3, 3), float32], Tensor[(64), float32], Tensor[(64, 64, 1, 1), float32], Tensor[(64), float32], Tensor[(64, 1, 3, 3), float32], Tensor[(64), float32], Tensor[(64, 64, 1, 1), float32], Tensor[(64), float32], Tensor[(64, 1, 3, 3), float32], Tensor[(64), float32], Tensor[(64, 64, 1, 1), float32], Tensor[(64), float32], Tensor[(64, 1, 7, 7), float32], Tensor[(64), float32], Tensor[(64, 1, 3, 3), float32]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %1 = nn.mcutruncate(%0) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[3, 3, 3, 3], groups=64) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %3 = nn.mcutruncate(%2) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %5 = nn.mcutruncate(%4) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[1, 1, 1, 1], groups=64) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %7 = nn.mcutruncate(%6) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %9 = nn.mcutruncate(%8) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %10 = nn.mcuconv2d(%9, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[1, 1, 1, 1], groups=64) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %11 = nn.mcutruncate(%10) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %13 = nn.mcutruncate(%12) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %14 = nn.mcuconv2d(%13, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[1, 1, 1, 1], groups=64) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %15 = nn.mcutruncate(%14) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %16 = nn.mcuconv2d(%15, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %17 = nn.mcutruncate(%16) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %18 = mcumean(%17, axis=[2, 3], keepdims=True) /* ty=Tensor[(1, 64, 1, 1), int8] */;
  %19 = nn.mcuconv2d(%18, %v5_weight, %v5_bias, %v5_zero_x, %v5_zero_y, %v5_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %20 = nn.mcutruncate(%19) /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %21 = reshape(%20, newshape=[0, 0]) /* ty=Tensor[(1, 10), int8] */;
  %22 = cast(%21, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %23 = nn.log_softmax(%22) /* ty=Tensor[(1, 10), float32] */;
  %24 = cast(%19, dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %25 = greater_equal(%24, -128f /* ty=float32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %26 = less_equal(%24, 127f /* ty=float32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %27 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %28 = negative(%27) /* ty=float32 */;
  %29 = multiply(%28, %label) /* ty=Tensor[(1, 10), float32] */;
  %30 = sum(%29, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %31 = exp(%23) /* ty=Tensor[(1, 10), float32] */;
  %32 = multiply(%30, %31) /* ty=Tensor[(1, 10), float32] */;
  %33 = subtract(%29, %32) /* ty=Tensor[(1, 10), float32] */;
  %34 = multiply(%25, %26) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %35 = reshape(%33, newshape=[1, 10, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %36 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %37 = where(%34, %35, %36) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %38 = reshape(%v5_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %39 = multiply(%37, %38) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %40 = cast(%18, dtype="float32") /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %41 = tile(%39, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 640, 1, 1), float32] */;
  %42 = reshape(%40, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %43 = reshape(%41, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(640, 1, 1, 1), float32] */;
  %44 = nn.conv2d(%42, %43, padding=[0, 0, 0, 0], groups=64) /* ty=Tensor[(1, 640, 1, 1), float32] */;
  %45 = reshape(%44, newshape=[1, 64, 10, 1, 1]) /* ty=Tensor[(1, 64, 10, 1, 1), float32] */;
  %46 = sum(%45, axis=[0]) /* ty=Tensor[(64, 10, 1, 1), float32] */;
  %47 = cast(%16, dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %48 = greater_equal(%47, -128f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %49 = less_equal(%47, 127f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %50 = cast(%v5_weight, dtype="float32") /* ty=Tensor[(10, 64, 1, 1), float32] */;
  %51 = nn.conv2d_transpose(%39, %50, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %52 = multiply(%51, 0.008f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %53 = ones(shape=[1, 64, 25, 5], dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %54 = multiply(%48, %49) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %55 = multiply(%52, %53) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %56 = zeros(shape=[1, 64, 25, 5], dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %57 = where(%54, %55, %56) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %58 = reshape(%v4_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %59 = multiply(%57, %58) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %60 = cast(%15, dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %61 = tile(%59, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 4096, 25, 5), float32] */;
  %62 = reshape(%60, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %63 = reshape(%61, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(4096, 1, 25, 5), float32] */;
  %64 = nn.conv2d(%62, %63, padding=[0, 0, 0, 0], groups=64) /* ty=Tensor[(1, 4096, 1, 1), float32] */;
  %65 = reshape(%64, newshape=[1, 64, 64, 1, 1]) /* ty=Tensor[(1, 64, 64, 1, 1), float32] */;
  %66 = sum(%65, axis=[0]) /* ty=Tensor[(64, 64, 1, 1), float32] */;
  %67 = cast(%14, dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %68 = greater_equal(%67, -128f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %69 = less_equal(%67, 127f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %70 = cast(%v4_conv_1_weight, dtype="float32") /* ty=Tensor[(64, 64, 1, 1), float32] */;
  %71 = multiply(%68, %69) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %72 = nn.conv2d_transpose(%59, %70, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %73 = zeros(shape=[1, 64, 25, 5], dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %74 = where(%71, %72, %73) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %75 = reshape(%v4_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %76 = multiply(%74, %75) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %77 = cast(%13, dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %78 = tile(%76, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %79 = reshape(%77, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %80 = reshape(%78, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(64, 1, 25, 5), float32] */;
  %81 = nn.conv2d(%79, %80, padding=[1, 1, 1, 1], groups=64) /* ty=Tensor[(1, 64, 3, 3), float32] */;
  %82 = reshape(%81, newshape=[1, 1, 64, 3, 3]) /* ty=Tensor[(1, 1, 64, 3, 3), float32] */;
  %83 = sum(%82, axis=[0]) /* ty=Tensor[(1, 64, 3, 3), float32] */;
  %84 = cast(%12, dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %85 = greater_equal(%84, -128f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %86 = less_equal(%84, 127f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %87 = cast(%v4_conv_0_weight, dtype="float32") /* ty=Tensor[(64, 1, 3, 3), float32] */;
  %88 = multiply(%85, %86) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %89 = nn.conv2d_transpose(%76, %87, channels=64, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=64, kernel_layout="IOHW") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %90 = zeros(shape=[1, 64, 25, 5], dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %91 = where(%88, %89, %90) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %92 = reshape(%v3_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %93 = multiply(%91, %92) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %94 = cast(%11, dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %95 = tile(%93, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 4096, 25, 5), float32] */;
  %96 = reshape(%94, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %97 = reshape(%95, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(4096, 1, 25, 5), float32] */;
  %98 = nn.conv2d(%96, %97, padding=[0, 0, 0, 0], groups=64) /* ty=Tensor[(1, 4096, 1, 1), float32] */;
  %99 = reshape(%98, newshape=[1, 64, 64, 1, 1]) /* ty=Tensor[(1, 64, 64, 1, 1), float32] */;
  %100 = sum(%99, axis=[0]) /* ty=Tensor[(64, 64, 1, 1), float32] */;
  %101 = cast(%10, dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %102 = greater_equal(%101, -128f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %103 = less_equal(%101, 127f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %104 = cast(%v3_conv_1_weight, dtype="float32") /* ty=Tensor[(64, 64, 1, 1), float32] */;
  %105 = multiply(%102, %103) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %106 = nn.conv2d_transpose(%93, %104, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %107 = zeros(shape=[1, 64, 25, 5], dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %108 = where(%105, %106, %107) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %109 = reshape(%v3_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %110 = multiply(%108, %109) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %111 = cast(%9, dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %112 = tile(%110, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %113 = reshape(%111, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %114 = reshape(%112, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(64, 1, 25, 5), float32] */;
  %115 = nn.conv2d(%113, %114, padding=[1, 1, 1, 1], groups=64) /* ty=Tensor[(1, 64, 3, 3), float32] */;
  %116 = reshape(%115, newshape=[1, 1, 64, 3, 3]) /* ty=Tensor[(1, 1, 64, 3, 3), float32] */;
  %117 = sum(%116, axis=[0]) /* ty=Tensor[(1, 64, 3, 3), float32] */;
  %118 = cast(%8, dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %119 = greater_equal(%118, -128f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %120 = less_equal(%118, 127f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %121 = cast(%v3_conv_0_weight, dtype="float32") /* ty=Tensor[(64, 1, 3, 3), float32] */;
  %122 = multiply(%119, %120) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %123 = nn.conv2d_transpose(%110, %121, channels=64, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=64, kernel_layout="IOHW") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %124 = zeros(shape=[1, 64, 25, 5], dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %125 = where(%122, %123, %124) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %126 = reshape(%v2_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %127 = multiply(%125, %126) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %128 = cast(%7, dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %129 = tile(%127, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 4096, 25, 5), float32] */;
  %130 = reshape(%128, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %131 = reshape(%129, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(4096, 1, 25, 5), float32] */;
  %132 = nn.conv2d(%130, %131, padding=[0, 0, 0, 0], groups=64) /* ty=Tensor[(1, 4096, 1, 1), float32] */;
  %133 = reshape(%132, newshape=[1, 64, 64, 1, 1]) /* ty=Tensor[(1, 64, 64, 1, 1), float32] */;
  %134 = sum(%133, axis=[0]) /* ty=Tensor[(64, 64, 1, 1), float32] */;
  %135 = cast(%6, dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %136 = greater_equal(%135, -128f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %137 = less_equal(%135, 127f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %138 = cast(%v2_conv_1_weight, dtype="float32") /* ty=Tensor[(64, 64, 1, 1), float32] */;
  %139 = multiply(%136, %137) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %140 = nn.conv2d_transpose(%127, %138, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %141 = zeros(shape=[1, 64, 25, 5], dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %142 = where(%139, %140, %141) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %143 = reshape(%v2_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %144 = multiply(%142, %143) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %145 = cast(%5, dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %146 = tile(%144, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %147 = reshape(%145, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %148 = reshape(%146, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(64, 1, 25, 5), float32] */;
  %149 = nn.conv2d(%147, %148, padding=[1, 1, 1, 1], groups=64) /* ty=Tensor[(1, 64, 3, 3), float32] */;
  %150 = reshape(%149, newshape=[1, 1, 64, 3, 3]) /* ty=Tensor[(1, 1, 64, 3, 3), float32] */;
  %151 = sum(%150, axis=[0]) /* ty=Tensor[(1, 64, 3, 3), float32] */;
  %152 = cast(%4, dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %153 = greater_equal(%152, -128f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %154 = less_equal(%152, 127f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %155 = cast(%v2_conv_0_weight, dtype="float32") /* ty=Tensor[(64, 1, 3, 3), float32] */;
  %156 = multiply(%153, %154) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %157 = nn.conv2d_transpose(%144, %155, channels=64, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=64, kernel_layout="IOHW") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %158 = zeros(shape=[1, 64, 25, 5], dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %159 = where(%156, %157, %158) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %160 = reshape(%v1_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %161 = multiply(%159, %160) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %162 = cast(%3, dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %163 = tile(%161, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 4096, 25, 5), float32] */;
  %164 = reshape(%162, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %165 = reshape(%163, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(4096, 1, 25, 5), float32] */;
  %166 = nn.conv2d(%164, %165, padding=[0, 0, 0, 0], groups=64) /* ty=Tensor[(1, 4096, 1, 1), float32] */;
  %167 = reshape(%166, newshape=[1, 64, 64, 1, 1]) /* ty=Tensor[(1, 64, 64, 1, 1), float32] */;
  %168 = sum(%167, axis=[0]) /* ty=Tensor[(64, 64, 1, 1), float32] */;
  %169 = cast(%2, dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %170 = greater_equal(%169, -128f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %171 = less_equal(%169, 127f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %172 = cast(%v1_conv_1_weight, dtype="float32") /* ty=Tensor[(64, 64, 1, 1), float32] */;
  %173 = multiply(%170, %171) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %174 = nn.conv2d_transpose(%161, %172, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %175 = zeros(shape=[1, 64, 25, 5], dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %176 = where(%173, %174, %175) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %177 = reshape(%v1_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %178 = multiply(%176, %177) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %179 = cast(%1, dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %180 = tile(%178, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %181 = reshape(%179, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %182 = reshape(%180, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(64, 1, 25, 5), float32] */;
  %183 = nn.conv2d(%181, %182, padding=[3, 3, 3, 3], groups=64) /* ty=Tensor[(1, 64, 7, 7), float32] */;
  %184 = reshape(%183, newshape=[1, 1, 64, 7, 7]) /* ty=Tensor[(1, 1, 64, 7, 7), float32] */;
  %185 = sum(%184, axis=[0]) /* ty=Tensor[(1, 64, 7, 7), float32] */;
  %186 = cast(%0, dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %187 = greater_equal(%186, -128f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %188 = less_equal(%186, 127f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %189 = cast(%v1_conv_0_weight, dtype="float32") /* ty=Tensor[(64, 1, 7, 7), float32] */;
  %190 = multiply(%187, %188) /* ty=Tensor[(1, 64, 25, 5), bool] */;
  %191 = nn.conv2d_transpose(%178, %189, channels=64, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=64, kernel_layout="IOHW") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %192 = zeros(shape=[1, 64, 25, 5], dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %193 = where(%190, %191, %192) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %194 = reshape(%v0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %195 = multiply(%193, %194) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %196 = cast(%input, dtype="float32") /* ty=Tensor[(1, 1, 49, 10), float32] */;
  %197 = tile(%195, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %198 = reshape(%196, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 1, 49, 10), float32] */;
  %199 = reshape(%197, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(64, 1, 25, 5), float32] */;
  %200 = nn.conv2d(%198, %199, padding=[1, 1, 1, 1], dilation=[2, 2]) /* ty=Tensor[(1, 64, 3, 4), float32] */;
  %201 = reshape(%200, newshape=[1, 1, 64, 3, 4]) /* ty=Tensor[(1, 1, 64, 3, 4), float32] */;
  %202 = sum(%201, axis=[0]) /* ty=Tensor[(1, 64, 3, 4), float32] */;
  %203 = transpose(%202, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 1, 3, 4), float32] */;
  %204 = nn.cross_entropy_with_logits(%23, %label) /* ty=float32 */;
  %205 = sum(%39, axis=[1], exclude=True) /* ty=Tensor[(10), float32] */;
  %206 = transpose(%46, axes=[1, 0, 2, 3]) /* ty=Tensor[(10, 64, 1, 1), float32] */;
  %207 = sum(%59, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %208 = transpose(%66, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 64, 1, 1), float32] */;
  %209 = sum(%76, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %210 = transpose(%83, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 1, 3, 3), float32] */;
  %211 = sum(%93, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %212 = transpose(%100, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 64, 1, 1), float32] */;
  %213 = sum(%110, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %214 = transpose(%117, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 1, 3, 3), float32] */;
  %215 = sum(%127, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %216 = transpose(%134, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 64, 1, 1), float32] */;
  %217 = sum(%144, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %218 = transpose(%151, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 1, 3, 3), float32] */;
  %219 = sum(%161, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %220 = transpose(%168, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 64, 1, 1), float32] */;
  %221 = sum(%178, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %222 = transpose(%185, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 1, 7, 7), float32] */;
  %223 = sum(%195, axis=[1], exclude=True) /* ty=Tensor[(64), float32] */;
  %224 = strided_slice(%203, begin=[0, 0, 0, 0], end=[64, 1, 3, 3], strides=[1], axes=None) /* ty=Tensor[(64, 1, 3, 3), float32] */;
  (%204, %205, %206, %207, %208, %209, %210, %211, %212, %213, %214, %215, %216, %217, %218, %219, %220, %221, %222, %223, %224)
}
