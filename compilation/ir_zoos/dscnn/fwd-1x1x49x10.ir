def @main(%input: Tensor[(1, 1, 49, 10), int8], %label: Tensor[(1, 10), float32], %v0_weight: Tensor[(64, 1, 3, 3), int8], %v0_bias: Tensor[(64), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(64), float32], %v1_conv_0_weight: Tensor[(64, 1, 7, 7), int8], %v1_conv_0_bias: Tensor[(64), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(64), float32], %v1_conv_1_weight: Tensor[(64, 64, 1, 1), int8], %v1_conv_1_bias: Tensor[(64), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(64), float32], %v2_conv_0_weight: Tensor[(64, 1, 3, 3), int8], %v2_conv_0_bias: Tensor[(64), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(64), float32], %v2_conv_1_weight: Tensor[(64, 64, 1, 1), int8], %v2_conv_1_bias: Tensor[(64), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(64), float32], %v3_conv_0_weight: Tensor[(64, 1, 3, 3), int8], %v3_conv_0_bias: Tensor[(64), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(64), float32], %v3_conv_1_weight: Tensor[(64, 64, 1, 1), int8], %v3_conv_1_bias: Tensor[(64), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(64), float32], %v4_conv_0_weight: Tensor[(64, 1, 3, 3), int8], %v4_conv_0_bias: Tensor[(64), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(64), float32], %v4_conv_1_weight: Tensor[(64, 64, 1, 1), int8], %v4_conv_1_bias: Tensor[(64), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(64), float32], %v5_weight: Tensor[(10, 64, 1, 1), int8], %v5_bias: Tensor[(10), int32], %v5_zero_x: Tensor[(1), int8], %v5_zero_y: Tensor[(1), int8], %v5_scale: Tensor[(10), float32]) -> float32 {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %1 = nn.mcutruncate(%0) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[3, 3, 3, 3], groups=64) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %3 = nn.mcutruncate(%2) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %5 = nn.mcutruncate(%4) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[1, 1, 1, 1], groups=64) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %7 = nn.mcutruncate(%6) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %9 = nn.mcutruncate(%8) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %10 = nn.mcuconv2d(%9, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[1, 1, 1, 1], groups=64) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %11 = nn.mcutruncate(%10) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %13 = nn.mcutruncate(%12) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %14 = nn.mcuconv2d(%13, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[1, 1, 1, 1], groups=64) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %15 = nn.mcutruncate(%14) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %16 = nn.mcuconv2d(%15, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %17 = nn.mcutruncate(%16) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %18 = mcumean(%17, axis=[2, 3], keepdims=True) /* ty=Tensor[(1, 64, 1, 1), int8] */;
  %19 = nn.mcuconv2d(%18, %v5_weight, %v5_bias, %v5_zero_x, %v5_zero_y, %v5_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %20 = nn.mcutruncate(%19) /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %21 = reshape(%20, newshape=[0, 0]) /* ty=Tensor[(1, 10), int8] */;
  %22 = cast(%21, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %23 = nn.log_softmax(%22) /* ty=Tensor[(1, 10), float32] */;
  nn.cross_entropy_with_logits(%23, %label) /* ty=float32 */
}
